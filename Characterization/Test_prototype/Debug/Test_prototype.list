
Test_prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000574c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080058d4  080058d4  000158d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800590c  0800590c  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  0800590c  0800590c  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800590c  0800590c  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800590c  0800590c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005910  08005910  00015910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08005914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  2000003c  08005950  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08005950  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e6e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002037  00000000  00000000  00030eda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f90  00000000  00000000  00032f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e68  00000000  00000000  00033ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e47a  00000000  00000000  00034d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c4f2  00000000  00000000  0005318a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bd3fb  00000000  00000000  0005f67c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000e9  00000000  00000000  0011ca77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c0  00000000  00000000  0011cb60  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000044e  00000000  00000000  00120d20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080058bc 	.word	0x080058bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	080058bc 	.word	0x080058bc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f001 f80d 	bl	80011ec <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f96d 	bl	80004b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 fced 	bl	8000bb4 <MX_GPIO_Init>
  MX_DMA_Init();
 80001da:	f000 fcc5 	bl	8000b68 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001de:	f000 fc93 	bl	8000b08 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001e2:	f000 f9c3 	bl	800056c <MX_ADC1_Init>
  MX_ADC2_Init();
 80001e6:	f000 fa5b 	bl	80006a0 <MX_ADC2_Init>
  MX_HRTIM1_Init();
 80001ea:	f000 fad3 	bl	8000794 <MX_HRTIM1_Init>
  MX_SPI1_Init();
 80001ee:	f000 fc4d 	bl	8000a8c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  GainADC1[0] =0.009766;
 80001f2:	4b8d      	ldr	r3, [pc, #564]	; (8000428 <main+0x260>)
 80001f4:	4a8d      	ldr	r2, [pc, #564]	; (800042c <main+0x264>)
 80001f6:	601a      	str	r2, [r3, #0]
  GainADC1[1] =0.009766;
 80001f8:	4b8b      	ldr	r3, [pc, #556]	; (8000428 <main+0x260>)
 80001fa:	4a8c      	ldr	r2, [pc, #560]	; (800042c <main+0x264>)
 80001fc:	605a      	str	r2, [r3, #4]
  GainADC1[2] =-0.009766*2.794;
 80001fe:	4b8a      	ldr	r3, [pc, #552]	; (8000428 <main+0x260>)
 8000200:	4a8b      	ldr	r2, [pc, #556]	; (8000430 <main+0x268>)
 8000202:	609a      	str	r2, [r3, #8]
  GainADC1[3] =0.1*0.543;
 8000204:	4b88      	ldr	r3, [pc, #544]	; (8000428 <main+0x260>)
 8000206:	4a8b      	ldr	r2, [pc, #556]	; (8000434 <main+0x26c>)
 8000208:	60da      	str	r2, [r3, #12]

  GainADC2[0] =-0.05156*1.2931;
 800020a:	4b8b      	ldr	r3, [pc, #556]	; (8000438 <main+0x270>)
 800020c:	4a8b      	ldr	r2, [pc, #556]	; (800043c <main+0x274>)
 800020e:	601a      	str	r2, [r3, #0]
  GainADC2[1] =-0.05156*1.2931;		//1.2931 is the experimental gain multiplier found during calibration. Theoritical values must be checked.
 8000210:	4b89      	ldr	r3, [pc, #548]	; (8000438 <main+0x270>)
 8000212:	4a8a      	ldr	r2, [pc, #552]	; (800043c <main+0x274>)
 8000214:	605a      	str	r2, [r3, #4]
  GainADC2[2] =0.09668;
 8000216:	4b88      	ldr	r3, [pc, #544]	; (8000438 <main+0x270>)
 8000218:	4a89      	ldr	r2, [pc, #548]	; (8000440 <main+0x278>)
 800021a:	609a      	str	r2, [r3, #8]



  PID_test.Kp=Kpgain;
 800021c:	4b89      	ldr	r3, [pc, #548]	; (8000444 <main+0x27c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a89      	ldr	r2, [pc, #548]	; (8000448 <main+0x280>)
 8000222:	6193      	str	r3, [r2, #24]
  PID_test.Ki=Kigain;
 8000224:	4b89      	ldr	r3, [pc, #548]	; (800044c <main+0x284>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a87      	ldr	r2, [pc, #540]	; (8000448 <main+0x280>)
 800022a:	61d3      	str	r3, [r2, #28]
  PID_test.Kd=Kdgain;
 800022c:	4b88      	ldr	r3, [pc, #544]	; (8000450 <main+0x288>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a85      	ldr	r2, [pc, #532]	; (8000448 <main+0x280>)
 8000232:	6213      	str	r3, [r2, #32]
  arm_pid_init_f32(&PID_test,0);
 8000234:	2100      	movs	r1, #0
 8000236:	4884      	ldr	r0, [pc, #528]	; (8000448 <main+0x280>)
 8000238:	f005 fa6c 	bl	8005714 <arm_pid_init_f32>
  HAL_HRTIM_WaveformCountStart(&hhrtim1 , HRTIM_TIMERID_MASTER | HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_B); //Launch simultaneously HRTIM Master timer, Timer A, and Timer B
 800023c:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8000240:	4884      	ldr	r0, [pc, #528]	; (8000454 <main+0x28c>)
 8000242:	f003 f8b1 	bl	80033a8 <HAL_HRTIM_WaveformCountStart>
  HAL_HRTIM_WaveformOutputStart(&hhrtim1 , HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TB1 | HRTIM_OUTPUT_TB2); //Once timers launched, output are released simultaneously.
 8000246:	210f      	movs	r1, #15
 8000248:	4882      	ldr	r0, [pc, #520]	; (8000454 <main+0x28c>)
 800024a:	f003 f880 	bl	800334e <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_UpdateEnable(&hhrtim1, HRTIM_TIMERUPDATE_A | HRTIM_TIMERUPDATE_B);
 800024e:	2106      	movs	r1, #6
 8000250:	4880      	ldr	r0, [pc, #512]	; (8000454 <main+0x28c>)
 8000252:	f003 f8d4 	bl	80033fe <HAL_HRTIM_UpdateEnable>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000256:	2101      	movs	r1, #1
 8000258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025c:	f002 fcd8 	bl	8002c10 <HAL_GPIO_TogglePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, valuesADC1, 4);
 8000260:	2204      	movs	r2, #4
 8000262:	497d      	ldr	r1, [pc, #500]	; (8000458 <main+0x290>)
 8000264:	487d      	ldr	r0, [pc, #500]	; (800045c <main+0x294>)
 8000266:	f001 f9d7 	bl	8001618 <HAL_ADC_Start_DMA>
	  HAL_ADC_Stop_DMA(&hadc1);
 800026a:	487c      	ldr	r0, [pc, #496]	; (800045c <main+0x294>)
 800026c:	f001 faae 	bl	80017cc <HAL_ADC_Stop_DMA>
	  HAL_ADC_Start_DMA(&hadc2, valuesADC2, 3);
 8000270:	2203      	movs	r2, #3
 8000272:	497b      	ldr	r1, [pc, #492]	; (8000460 <main+0x298>)
 8000274:	487b      	ldr	r0, [pc, #492]	; (8000464 <main+0x29c>)
 8000276:	f001 f9cf 	bl	8001618 <HAL_ADC_Start_DMA>
	  HAL_ADC_Stop_DMA(&hadc2);
 800027a:	487a      	ldr	r0, [pc, #488]	; (8000464 <main+0x29c>)
 800027c:	f001 faa6 	bl	80017cc <HAL_ADC_Stop_DMA>
	  convertADC1[0] = (float32_t)valuesADC1[0];
 8000280:	4b75      	ldr	r3, [pc, #468]	; (8000458 <main+0x290>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	ee07 3a90 	vmov	s15, r3
 8000288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800028c:	4b76      	ldr	r3, [pc, #472]	; (8000468 <main+0x2a0>)
 800028e:	edc3 7a00 	vstr	s15, [r3]
	  convertADC1[1] = (float32_t)valuesADC1[1];
 8000292:	4b71      	ldr	r3, [pc, #452]	; (8000458 <main+0x290>)
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	ee07 3a90 	vmov	s15, r3
 800029a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800029e:	4b72      	ldr	r3, [pc, #456]	; (8000468 <main+0x2a0>)
 80002a0:	edc3 7a01 	vstr	s15, [r3, #4]
	  convertADC1[2] = (float32_t)valuesADC1[2];
 80002a4:	4b6c      	ldr	r3, [pc, #432]	; (8000458 <main+0x290>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	ee07 3a90 	vmov	s15, r3
 80002ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002b0:	4b6d      	ldr	r3, [pc, #436]	; (8000468 <main+0x2a0>)
 80002b2:	edc3 7a02 	vstr	s15, [r3, #8]
	  convertADC1[3] = (float32_t)valuesADC1[3];
 80002b6:	4b68      	ldr	r3, [pc, #416]	; (8000458 <main+0x290>)
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	ee07 3a90 	vmov	s15, r3
 80002be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002c2:	4b69      	ldr	r3, [pc, #420]	; (8000468 <main+0x2a0>)
 80002c4:	edc3 7a03 	vstr	s15, [r3, #12]
	  convertADC2[0] = (float32_t)valuesADC2[0];
 80002c8:	4b65      	ldr	r3, [pc, #404]	; (8000460 <main+0x298>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	ee07 3a90 	vmov	s15, r3
 80002d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002d4:	4b65      	ldr	r3, [pc, #404]	; (800046c <main+0x2a4>)
 80002d6:	edc3 7a00 	vstr	s15, [r3]
	  convertADC2[1] = (float32_t)valuesADC2[1];
 80002da:	4b61      	ldr	r3, [pc, #388]	; (8000460 <main+0x298>)
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	ee07 3a90 	vmov	s15, r3
 80002e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002e6:	4b61      	ldr	r3, [pc, #388]	; (800046c <main+0x2a4>)
 80002e8:	edc3 7a01 	vstr	s15, [r3, #4]
	  convertADC2[2] = (float32_t)valuesADC2[2];
 80002ec:	4b5c      	ldr	r3, [pc, #368]	; (8000460 <main+0x298>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	ee07 3a90 	vmov	s15, r3
 80002f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002f8:	4b5c      	ldr	r3, [pc, #368]	; (800046c <main+0x2a4>)
 80002fa:	edc3 7a02 	vstr	s15, [r3, #8]
	  arm_sub_f32(&convertADC1, &offsetADC1, &raw_offsetADC1, 4);
 80002fe:	2304      	movs	r3, #4
 8000300:	4a5b      	ldr	r2, [pc, #364]	; (8000470 <main+0x2a8>)
 8000302:	495c      	ldr	r1, [pc, #368]	; (8000474 <main+0x2ac>)
 8000304:	4858      	ldr	r0, [pc, #352]	; (8000468 <main+0x2a0>)
 8000306:	f005 fa21 	bl	800574c <arm_sub_f32>
	  arm_sub_f32(&convertADC2, &offsetADC2, &raw_offsetADC2, 3);
 800030a:	2303      	movs	r3, #3
 800030c:	4a5a      	ldr	r2, [pc, #360]	; (8000478 <main+0x2b0>)
 800030e:	495b      	ldr	r1, [pc, #364]	; (800047c <main+0x2b4>)
 8000310:	4856      	ldr	r0, [pc, #344]	; (800046c <main+0x2a4>)
 8000312:	f005 fa1b 	bl	800574c <arm_sub_f32>
	  arm_mult_f32(&raw_offsetADC1, &GainADC1, &ValuesADC1, 4);
 8000316:	2304      	movs	r3, #4
 8000318:	4a59      	ldr	r2, [pc, #356]	; (8000480 <main+0x2b8>)
 800031a:	4943      	ldr	r1, [pc, #268]	; (8000428 <main+0x260>)
 800031c:	4854      	ldr	r0, [pc, #336]	; (8000470 <main+0x2a8>)
 800031e:	f005 fa5b 	bl	80057d8 <arm_mult_f32>
	  arm_mult_f32(&raw_offsetADC2, &GainADC2, &ValuesADC2, 3);
 8000322:	2303      	movs	r3, #3
 8000324:	4a57      	ldr	r2, [pc, #348]	; (8000484 <main+0x2bc>)
 8000326:	4944      	ldr	r1, [pc, #272]	; (8000438 <main+0x270>)
 8000328:	4853      	ldr	r0, [pc, #332]	; (8000478 <main+0x2b0>)
 800032a:	f005 fa55 	bl	80057d8 <arm_mult_f32>
	  arm_sub_f32(&ValuesADC2[1], &ref, &error_pid,1);
 800032e:	2301      	movs	r3, #1
 8000330:	4a55      	ldr	r2, [pc, #340]	; (8000488 <main+0x2c0>)
 8000332:	4956      	ldr	r1, [pc, #344]	; (800048c <main+0x2c4>)
 8000334:	4856      	ldr	r0, [pc, #344]	; (8000490 <main+0x2c8>)
 8000336:	f005 fa09 	bl	800574c <arm_sub_f32>
	  rslt_pid = arm_pid_f32(&PID_test,error_pid);
 800033a:	4b53      	ldr	r3, [pc, #332]	; (8000488 <main+0x2c0>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a42      	ldr	r2, [pc, #264]	; (8000448 <main+0x280>)
 8000340:	60fa      	str	r2, [r7, #12]
 8000342:	60bb      	str	r3, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	ed93 7a00 	vldr	s14, [r3]
 800034a:	edd7 7a02 	vldr	s15, [r7, #8]
 800034e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	edd3 6a01 	vldr	s13, [r3, #4]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	edd3 7a03 	vldr	s15, [r3, #12]
 800035e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000362:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	edd3 6a02 	vldr	s13, [r3, #8]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000376:	ee37 7a27 	vadd.f32	s14, s14, s15
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000384:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	68da      	ldr	r2, [r3, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	68ba      	ldr	r2, [r7, #8]
 8000394:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a3d      	ldr	r2, [pc, #244]	; (8000494 <main+0x2cc>)
 80003a0:	6013      	str	r3, [r2, #0]
	  pwm = PWM_RESOLUTION*rslt_pid;
 80003a2:	4b3c      	ldr	r3, [pc, #240]	; (8000494 <main+0x2cc>)
 80003a4:	edd3 7a00 	vldr	s15, [r3]
 80003a8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000498 <main+0x2d0>
 80003ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80003b0:	4b3a      	ldr	r3, [pc, #232]	; (800049c <main+0x2d4>)
 80003b2:	edc3 7a00 	vstr	s15, [r3]

	  if (pwm > HIGH_DUTY)
 80003b6:	4b39      	ldr	r3, [pc, #228]	; (800049c <main+0x2d4>)
 80003b8:	edd3 7a00 	vldr	s15, [r3]
 80003bc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80004a0 <main+0x2d8>
 80003c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003c8:	dd08      	ble.n	80003dc <main+0x214>
	  {
		  dutyA = HIGH_DUTY;
 80003ca:	4b36      	ldr	r3, [pc, #216]	; (80004a4 <main+0x2dc>)
 80003cc:	f44f 7290 	mov.w	r2, #288	; 0x120
 80003d0:	801a      	strh	r2, [r3, #0]
		  dutyB = HIGH_DUTY;
 80003d2:	4b35      	ldr	r3, [pc, #212]	; (80004a8 <main+0x2e0>)
 80003d4:	f44f 7290 	mov.w	r2, #288	; 0x120
 80003d8:	801a      	strh	r2, [r3, #0]
 80003da:	e741      	b.n	8000260 <main+0x98>
	//	  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0X0, HRTIM_COMPAREUNIT_1, dutyA);
	//	  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0X1, HRTIM_COMPAREUNIT_1, dutyB);
	  }
	  else if (pwm < LOW_DUTY)
 80003dc:	4b2f      	ldr	r3, [pc, #188]	; (800049c <main+0x2d4>)
 80003de:	edd3 7a00 	vldr	s15, [r3]
 80003e2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80004ac <main+0x2e4>
 80003e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ee:	d506      	bpl.n	80003fe <main+0x236>
	  {
		  dutyA = LOW_DUTY;
 80003f0:	4b2c      	ldr	r3, [pc, #176]	; (80004a4 <main+0x2dc>)
 80003f2:	2220      	movs	r2, #32
 80003f4:	801a      	strh	r2, [r3, #0]
		  dutyB = LOW_DUTY;
 80003f6:	4b2c      	ldr	r3, [pc, #176]	; (80004a8 <main+0x2e0>)
 80003f8:	2220      	movs	r2, #32
 80003fa:	801a      	strh	r2, [r3, #0]
 80003fc:	e730      	b.n	8000260 <main+0x98>
	//	  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0X0, HRTIM_COMPAREUNIT_1, dutyA);
	//	  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0X1, HRTIM_COMPAREUNIT_1, dutyB);
	  }
	  else
	  {
		  dutyA = (uint16_t)pwm;
 80003fe:	4b27      	ldr	r3, [pc, #156]	; (800049c <main+0x2d4>)
 8000400:	edd3 7a00 	vldr	s15, [r3]
 8000404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000408:	ee17 3a90 	vmov	r3, s15
 800040c:	b29a      	uxth	r2, r3
 800040e:	4b25      	ldr	r3, [pc, #148]	; (80004a4 <main+0x2dc>)
 8000410:	801a      	strh	r2, [r3, #0]
		  dutyB = (uint16_t)pwm;
 8000412:	4b22      	ldr	r3, [pc, #136]	; (800049c <main+0x2d4>)
 8000414:	edd3 7a00 	vldr	s15, [r3]
 8000418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800041c:	ee17 3a90 	vmov	r3, s15
 8000420:	b29a      	uxth	r2, r3
 8000422:	4b21      	ldr	r3, [pc, #132]	; (80004a8 <main+0x2e0>)
 8000424:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Start_DMA(&hadc1, valuesADC1, 4);
 8000426:	e71b      	b.n	8000260 <main+0x98>
 8000428:	200000c0 	.word	0x200000c0
 800042c:	3c200193 	.word	0x3c200193
 8000430:	bcdf8751 	.word	0xbcdf8751
 8000434:	3d5e69ad 	.word	0x3d5e69ad
 8000438:	200003c4 	.word	0x200003c4
 800043c:	bd888b74 	.word	0xbd888b74
 8000440:	3dc6002a 	.word	0x3dc6002a
 8000444:	20000004 	.word	0x20000004
 8000448:	200003dc 	.word	0x200003dc
 800044c:	20000008 	.word	0x20000008
 8000450:	20000058 	.word	0x20000058
 8000454:	20000140 	.word	0x20000140
 8000458:	200000d0 	.word	0x200000d0
 800045c:	200000f0 	.word	0x200000f0
 8000460:	20000064 	.word	0x20000064
 8000464:	20000070 	.word	0x20000070
 8000468:	200003b4 	.word	0x200003b4
 800046c:	20000280 	.word	0x20000280
 8000470:	20000270 	.word	0x20000270
 8000474:	2000000c 	.word	0x2000000c
 8000478:	2000021c 	.word	0x2000021c
 800047c:	2000001c 	.word	0x2000001c
 8000480:	200000e0 	.word	0x200000e0
 8000484:	200003d0 	.word	0x200003d0
 8000488:	20000060 	.word	0x20000060
 800048c:	20000000 	.word	0x20000000
 8000490:	200003d4 	.word	0x200003d4
 8000494:	2000026c 	.word	0x2000026c
 8000498:	43a00000 	.word	0x43a00000
 800049c:	2000002c 	.word	0x2000002c
 80004a0:	43900000 	.word	0x43900000
 80004a4:	20000028 	.word	0x20000028
 80004a8:	2000002a 	.word	0x2000002a
 80004ac:	42000000 	.word	0x42000000

080004b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b096      	sub	sp, #88	; 0x58
 80004b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004ba:	2228      	movs	r2, #40	; 0x28
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f005 f9f4 	bl	80058ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c4:	f107 031c 	add.w	r3, r7, #28
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d4:	463b      	mov	r3, r7
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e6:	2302      	movs	r3, #2
 80004e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ea:	2301      	movs	r3, #1
 80004ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ee:	2310      	movs	r3, #16
 80004f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f2:	2302      	movs	r3, #2
 80004f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004f6:	2300      	movs	r3, #0
 80004f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004fa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80004fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000500:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000504:	4618      	mov	r0, r3
 8000506:	f003 fad5 	bl	8003ab4 <HAL_RCC_OscConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000510:	f000 fbb8 	bl	8000c84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000514:	230f      	movs	r3, #15
 8000516:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000518:	2302      	movs	r3, #2
 800051a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051c:	2300      	movs	r3, #0
 800051e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000524:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	2102      	movs	r1, #2
 8000530:	4618      	mov	r0, r3
 8000532:	f004 f9c7 	bl	80048c4 <HAL_RCC_ClockConfig>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800053c:	f000 fba2 	bl	8000c84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_ADC12;
 8000540:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000544:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800054a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_HCLK;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000550:	463b      	mov	r3, r7
 8000552:	4618      	mov	r0, r3
 8000554:	f004 fbec 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800055e:	f000 fb91 	bl	8000c84 <Error_Handler>
  }
}
 8000562:	bf00      	nop
 8000564:	3758      	adds	r7, #88	; 0x58
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
 800058c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800058e:	4b43      	ldr	r3, [pc, #268]	; (800069c <MX_ADC1_Init+0x130>)
 8000590:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000594:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000596:	4b41      	ldr	r3, [pc, #260]	; (800069c <MX_ADC1_Init+0x130>)
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800059c:	4b3f      	ldr	r3, [pc, #252]	; (800069c <MX_ADC1_Init+0x130>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005a2:	4b3e      	ldr	r3, [pc, #248]	; (800069c <MX_ADC1_Init+0x130>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a8:	4b3c      	ldr	r3, [pc, #240]	; (800069c <MX_ADC1_Init+0x130>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ae:	4b3b      	ldr	r3, [pc, #236]	; (800069c <MX_ADC1_Init+0x130>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b6:	4b39      	ldr	r3, [pc, #228]	; (800069c <MX_ADC1_Init+0x130>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005bc:	4b37      	ldr	r3, [pc, #220]	; (800069c <MX_ADC1_Init+0x130>)
 80005be:	2201      	movs	r2, #1
 80005c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c2:	4b36      	ldr	r3, [pc, #216]	; (800069c <MX_ADC1_Init+0x130>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80005c8:	4b34      	ldr	r3, [pc, #208]	; (800069c <MX_ADC1_Init+0x130>)
 80005ca:	2204      	movs	r2, #4
 80005cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ce:	4b33      	ldr	r3, [pc, #204]	; (800069c <MX_ADC1_Init+0x130>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d6:	4b31      	ldr	r3, [pc, #196]	; (800069c <MX_ADC1_Init+0x130>)
 80005d8:	2204      	movs	r2, #4
 80005da:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005dc:	4b2f      	ldr	r3, [pc, #188]	; (800069c <MX_ADC1_Init+0x130>)
 80005de:	2200      	movs	r2, #0
 80005e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005e2:	4b2e      	ldr	r3, [pc, #184]	; (800069c <MX_ADC1_Init+0x130>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e8:	482c      	ldr	r0, [pc, #176]	; (800069c <MX_ADC1_Init+0x130>)
 80005ea:	f000 fe83 	bl	80012f4 <HAL_ADC_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80005f4:	f000 fb46 	bl	8000c84 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4619      	mov	r1, r3
 8000602:	4826      	ldr	r0, [pc, #152]	; (800069c <MX_ADC1_Init+0x130>)
 8000604:	f001 fc00 	bl	8001e08 <HAL_ADCEx_MultiModeConfigChannel>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800060e:	f000 fb39 	bl	8000c84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000612:	2306      	movs	r3, #6
 8000614:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000616:	2301      	movs	r3, #1
 8000618:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4619      	mov	r1, r3
 800062e:	481b      	ldr	r0, [pc, #108]	; (800069c <MX_ADC1_Init+0x130>)
 8000630:	f001 f928 	bl	8001884 <HAL_ADC_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800063a:	f000 fb23 	bl	8000c84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800063e:	2307      	movs	r3, #7
 8000640:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000642:	2302      	movs	r3, #2
 8000644:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4619      	mov	r1, r3
 800064a:	4814      	ldr	r0, [pc, #80]	; (800069c <MX_ADC1_Init+0x130>)
 800064c:	f001 f91a 	bl	8001884 <HAL_ADC_ConfigChannel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000656:	f000 fb15 	bl	8000c84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800065a:	2308      	movs	r3, #8
 800065c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800065e:	2303      	movs	r3, #3
 8000660:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	4619      	mov	r1, r3
 8000666:	480d      	ldr	r0, [pc, #52]	; (800069c <MX_ADC1_Init+0x130>)
 8000668:	f001 f90c 	bl	8001884 <HAL_ADC_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000672:	f000 fb07 	bl	8000c84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000676:	2309      	movs	r3, #9
 8000678:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800067a:	2304      	movs	r3, #4
 800067c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4619      	mov	r1, r3
 8000682:	4806      	ldr	r0, [pc, #24]	; (800069c <MX_ADC1_Init+0x130>)
 8000684:	f001 f8fe 	bl	8001884 <HAL_ADC_ConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800068e:	f000 faf9 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	3728      	adds	r7, #40	; 0x28
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200000f0 	.word	0x200000f0

080006a0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80006b6:	4b35      	ldr	r3, [pc, #212]	; (800078c <MX_ADC2_Init+0xec>)
 80006b8:	4a35      	ldr	r2, [pc, #212]	; (8000790 <MX_ADC2_Init+0xf0>)
 80006ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <MX_ADC2_Init+0xec>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006c2:	4b32      	ldr	r3, [pc, #200]	; (800078c <MX_ADC2_Init+0xec>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <MX_ADC2_Init+0xec>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <MX_ADC2_Init+0xec>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006d4:	4b2d      	ldr	r3, [pc, #180]	; (800078c <MX_ADC2_Init+0xec>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006dc:	4b2b      	ldr	r3, [pc, #172]	; (800078c <MX_ADC2_Init+0xec>)
 80006de:	2200      	movs	r2, #0
 80006e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e2:	4b2a      	ldr	r3, [pc, #168]	; (800078c <MX_ADC2_Init+0xec>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <MX_ADC2_Init+0xec>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 80006ee:	4b27      	ldr	r3, [pc, #156]	; (800078c <MX_ADC2_Init+0xec>)
 80006f0:	2203      	movs	r2, #3
 80006f2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006f4:	4b25      	ldr	r3, [pc, #148]	; (800078c <MX_ADC2_Init+0xec>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <MX_ADC2_Init+0xec>)
 80006fe:	2204      	movs	r2, #4
 8000700:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <MX_ADC2_Init+0xec>)
 8000704:	2200      	movs	r2, #0
 8000706:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <MX_ADC2_Init+0xec>)
 800070a:	2200      	movs	r2, #0
 800070c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800070e:	481f      	ldr	r0, [pc, #124]	; (800078c <MX_ADC2_Init+0xec>)
 8000710:	f000 fdf0 	bl	80012f4 <HAL_ADC_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800071a:	f000 fab3 	bl	8000c84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800071e:	2301      	movs	r3, #1
 8000720:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000722:	2301      	movs	r3, #1
 8000724:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000726:	2301      	movs	r3, #1
 8000728:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000736:	463b      	mov	r3, r7
 8000738:	4619      	mov	r1, r3
 800073a:	4814      	ldr	r0, [pc, #80]	; (800078c <MX_ADC2_Init+0xec>)
 800073c:	f001 f8a2 	bl	8001884 <HAL_ADC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000746:	f000 fa9d 	bl	8000c84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800074a:	2303      	movs	r3, #3
 800074c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800074e:	2302      	movs	r3, #2
 8000750:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000752:	463b      	mov	r3, r7
 8000754:	4619      	mov	r1, r3
 8000756:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_ADC2_Init+0xec>)
 8000758:	f001 f894 	bl	8001884 <HAL_ADC_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8000762:	f000 fa8f 	bl	8000c84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000766:	230b      	movs	r3, #11
 8000768:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800076a:	2303      	movs	r3, #3
 800076c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	4619      	mov	r1, r3
 8000772:	4806      	ldr	r0, [pc, #24]	; (800078c <MX_ADC2_Init+0xec>)
 8000774:	f001 f886 	bl	8001884 <HAL_ADC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 800077e:	f000 fa81 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000070 	.word	0x20000070
 8000790:	50000100 	.word	0x50000100

08000794 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b0ae      	sub	sp, #184	; 0xb8
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800079a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80007a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007ac:	2254      	movs	r2, #84	; 0x54
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f005 f87b 	bl	80058ac <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80007b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 80007c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c6:	2224      	movs	r2, #36	; 0x24
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f005 f86e 	bl	80058ac <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2220      	movs	r2, #32
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f005 f868 	bl	80058ac <memset>
  /* USER CODE BEGIN HRTIM1_Init 1 */

 //Define the duty cycle variable duty must be below comprised between 0 and 320 in the actual configuration.

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80007dc:	4ba8      	ldr	r3, [pc, #672]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 80007de:	4aa9      	ldr	r2, [pc, #676]	; (8000a84 <MX_HRTIM1_Init+0x2f0>)
 80007e0:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80007e2:	4ba7      	ldr	r3, [pc, #668]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80007e8:	4ba5      	ldr	r3, [pc, #660]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80007ee:	48a4      	ldr	r0, [pc, #656]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 80007f0:	f002 fa28 	bl	8002c44 <HAL_HRTIM_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_HRTIM1_Init+0x6a>
  {
    Error_Handler();
 80007fa:	f000 fa43 	bl	8000c84 <Error_Handler>
  }
  pTimeBaseCfg.Period = 320;
 80007fe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000802:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000806:	2300      	movs	r3, #0
 8000808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 800080c:	2305      	movs	r3, #5
 800080e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000812:	2308      	movs	r3, #8
 8000814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8000818:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800081c:	461a      	mov	r2, r3
 800081e:	2105      	movs	r1, #5
 8000820:	4897      	ldr	r0, [pc, #604]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 8000822:	f002 fadb 	bl	8002ddc <HAL_HRTIM_TimeBaseConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_HRTIM1_Init+0x9c>
  {
    Error_Handler();
 800082c:	f000 fa2a 	bl	8000c84 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8000830:	2300      	movs	r3, #0
 8000832:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 8000834:	2300      	movs	r3, #0
 8000836:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.DMASrcAddress = 0x0000;
 8000838:	2300      	movs	r3, #0
 800083a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.DMADstAddress = 0x0000;
 800083c:	2300      	movs	r3, #0
 800083e:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DMASize = 0x1;
 8000840:	2301      	movs	r3, #1
 8000842:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000844:	2300      	movs	r3, #0
 8000846:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000848:	2300      	movs	r3, #0
 800084a:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800084c:	2300      	movs	r3, #0
 800084e:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000850:	2300      	movs	r3, #0
 8000852:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8000854:	2300      	movs	r3, #0
 8000856:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000858:	2300      	movs	r3, #0
 800085a:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800085c:	2300      	movs	r3, #0
 800085e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000862:	2300      	movs	r3, #0
 8000864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8000868:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800086c:	461a      	mov	r2, r3
 800086e:	2105      	movs	r1, #5
 8000870:	4883      	ldr	r0, [pc, #524]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 8000872:	f002 fadb 	bl	8002e2c <HAL_HRTIM_WaveformTimerConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_HRTIM1_Init+0xec>
  {
    Error_Handler();
 800087c:	f000 fa02 	bl	8000c84 <Error_Handler>
  }
  pCompareCfg.CompareValue = 160;
 8000880:	23a0      	movs	r3, #160	; 0xa0
 8000882:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000884:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000888:	2202      	movs	r2, #2
 800088a:	2105      	movs	r1, #5
 800088c:	487c      	ldr	r0, [pc, #496]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 800088e:	f002 fbbf 	bl	8003010 <HAL_HRTIM_WaveformCompareConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_HRTIM1_Init+0x108>
  {
    Error_Handler();
 8000898:	f000 f9f4 	bl	8000c84 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 800089c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80008a0:	461a      	mov	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	4876      	ldr	r0, [pc, #472]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 80008a6:	f002 fa99 	bl	8002ddc <HAL_HRTIM_TimeBaseConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_HRTIM1_Init+0x120>
  {
    Error_Handler();
 80008b0:	f000 f9e8 	bl	8000c84 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.DMASrcAddress = 0x0;
 80008bc:	2300      	movs	r3, #0
 80008be:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.DMADstAddress = 0x0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DMASize = 0x1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 80008c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008cc:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 80008ce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80008d6:	2300      	movs	r3, #0
 80008d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80008dc:	2300      	movs	r3, #0
 80008de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 80008e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80008f0:	2300      	movs	r3, #0
 80008f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_PER;
 80008fc:	2310      	movs	r3, #16
 80008fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8000902:	2300      	movs	r3, #0
 8000904:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000908:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800090c:	461a      	mov	r2, r3
 800090e:	2100      	movs	r1, #0
 8000910:	485b      	ldr	r0, [pc, #364]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 8000912:	f002 fa8b 	bl	8002e2c <HAL_HRTIM_WaveformTimerConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_HRTIM1_Init+0x18c>
  {
    Error_Handler();
 800091c:	f000 f9b2 	bl	8000c84 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0;
 8000920:	2300      	movs	r3, #0
 8000922:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.DMADstAddress = 0x0;
 8000924:	2300      	movs	r3, #0
 8000926:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DMASize = 0x1;
 8000928:	2301      	movs	r3, #1
 800092a:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_CMP2;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000932:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000936:	461a      	mov	r2, r3
 8000938:	2101      	movs	r1, #1
 800093a:	4851      	ldr	r0, [pc, #324]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 800093c:	f002 fa76 	bl	8002e2c <HAL_HRTIM_WaveformTimerConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_HRTIM1_Init+0x1b6>
  {
    Error_Handler();
 8000946:	f000 f99d 	bl	8000c84 <Error_Handler>
  }
  pCompareCfg.CompareValue = dutyA;
 800094a:	4b4f      	ldr	r3, [pc, #316]	; (8000a88 <MX_HRTIM1_Init+0x2f4>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000950:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000954:	2201      	movs	r2, #1
 8000956:	2100      	movs	r1, #0
 8000958:	4849      	ldr	r0, [pc, #292]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 800095a:	f002 fb59 	bl	8003010 <HAL_HRTIM_WaveformCompareConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_HRTIM1_Init+0x1d4>
  {
    Error_Handler();
 8000964:	f000 f98e 	bl	8000c84 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  pDeadTimeCfg.RisingValue = 10;
 800096c:	230a      	movs	r3, #10
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 8000974:	2300      	movs	r3, #0
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8000978:	2300      	movs	r3, #0
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
  pDeadTimeCfg.FallingValue = 10;
 800097c:	230a      	movs	r3, #10
 800097e:	63bb      	str	r3, [r7, #56]	; 0x38
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 8000980:	2300      	movs	r3, #0
 8000982:	63fb      	str	r3, [r7, #60]	; 0x3c
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 8000984:	2300      	movs	r3, #0
 8000986:	643b      	str	r3, [r7, #64]	; 0x40
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8000988:	2300      	movs	r3, #0
 800098a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	461a      	mov	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	483a      	ldr	r0, [pc, #232]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 8000996:	f002 fabb 	bl	8002f10 <HAL_HRTIM_DeadTimeConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_HRTIM1_Init+0x210>
  {
    Error_Handler();
 80009a0:	f000 f970 	bl	8000c84 <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pDeadTimeCfg) != HAL_OK)
 80009a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a8:	461a      	mov	r2, r3
 80009aa:	2101      	movs	r1, #1
 80009ac:	4834      	ldr	r0, [pc, #208]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 80009ae:	f002 faaf 	bl	8002f10 <HAL_HRTIM_DeadTimeConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_HRTIM1_Init+0x228>
  {
    Error_Handler();
 80009b8:	f000 f964 	bl	8000c84 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 80009c0:	2308      	movs	r3, #8
 80009c2:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMPER;
 80009c4:	2304      	movs	r3, #4
 80009c6:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2201      	movs	r2, #1
 80009e0:	2100      	movs	r1, #0
 80009e2:	4827      	ldr	r0, [pc, #156]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 80009e4:	f002 fc82 	bl	80032ec <HAL_HRTIM_WaveformOutputConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_HRTIM1_Init+0x25e>
  {
    Error_Handler();
 80009ee:	f000 f949 	bl	8000c84 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2204      	movs	r2, #4
 80009f6:	2101      	movs	r1, #1
 80009f8:	4821      	ldr	r0, [pc, #132]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 80009fa:	f002 fc77 	bl	80032ec <HAL_HRTIM_WaveformOutputConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_HRTIM1_Init+0x274>
  {
    Error_Handler();
 8000a04:	f000 f93e 	bl	8000c84 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2202      	movs	r2, #2
 8000a14:	2100      	movs	r1, #0
 8000a16:	481a      	ldr	r0, [pc, #104]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 8000a18:	f002 fc68 	bl	80032ec <HAL_HRTIM_WaveformOutputConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_HRTIM1_Init+0x292>
  {
    Error_Handler();
 8000a22:	f000 f92f 	bl	8000c84 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2208      	movs	r2, #8
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4814      	ldr	r0, [pc, #80]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 8000a2e:	f002 fc5d 	bl	80032ec <HAL_HRTIM_WaveformOutputConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_HRTIM1_Init+0x2a8>
  {
    Error_Handler();
 8000a38:	f000 f924 	bl	8000c84 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000a3c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000a40:	461a      	mov	r2, r3
 8000a42:	2101      	movs	r1, #1
 8000a44:	480e      	ldr	r0, [pc, #56]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 8000a46:	f002 f9c9 	bl	8002ddc <HAL_HRTIM_TimeBaseConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_HRTIM1_Init+0x2c0>
  {
    Error_Handler();
 8000a50:	f000 f918 	bl	8000c84 <Error_Handler>
  }
  pCompareCfg.CompareValue = 80;
 8000a54:	2350      	movs	r3, #80	; 0x50
 8000a56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000a58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2101      	movs	r1, #1
 8000a60:	4807      	ldr	r0, [pc, #28]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 8000a62:	f002 fad5 	bl	8003010 <HAL_HRTIM_WaveformCompareConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_HRTIM1_Init+0x2dc>
  {
    Error_Handler();
 8000a6c:	f000 f90a 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <MX_HRTIM1_Init+0x2ec>)
 8000a72:	f000 fa5d 	bl	8000f30 <HAL_HRTIM_MspPostInit>

}
 8000a76:	bf00      	nop
 8000a78:	37b8      	adds	r7, #184	; 0xb8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000140 	.word	0x20000140
 8000a84:	40017400 	.word	0x40017400
 8000a88:	20000028 	.word	0x20000028

08000a8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <MX_SPI1_Init+0x74>)
 8000a92:	4a1c      	ldr	r2, [pc, #112]	; (8000b04 <MX_SPI1_Init+0x78>)
 8000a94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_SPI1_Init+0x74>)
 8000a98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_SPI1_Init+0x74>)
 8000aa0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000aa4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <MX_SPI1_Init+0x74>)
 8000aa8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000aac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_SPI1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_SPI1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_SPI1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_SPI1_Init+0x74>)
 8000ac2:	2218      	movs	r2, #24
 8000ac4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_SPI1_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_SPI1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_SPI1_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_SPI1_Init+0x74>)
 8000ada:	2207      	movs	r2, #7
 8000adc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_SPI1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_SPI1_Init+0x74>)
 8000ae6:	2208      	movs	r2, #8
 8000ae8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_SPI1_Init+0x74>)
 8000aec:	f004 fa56 	bl	8004f9c <HAL_SPI_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000af6:	f000 f8c5 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000028c 	.word	0x2000028c
 8000b04:	40013000 	.word	0x40013000

08000b08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_USART2_UART_Init+0x58>)
 8000b0e:	4a15      	ldr	r2, [pc, #84]	; (8000b64 <MX_USART2_UART_Init+0x5c>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_USART2_UART_Init+0x58>)
 8000b14:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000b18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_USART2_UART_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_USART2_UART_Init+0x58>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_USART2_UART_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_USART2_UART_Init+0x58>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MX_USART2_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_USART2_UART_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MX_USART2_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_USART2_UART_Init+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_USART2_UART_Init+0x58>)
 8000b4c:	f004 fab0 	bl	80050b0 <HAL_UART_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b56:	f000 f895 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200002f0 	.word	0x200002f0
 8000b64:	40004400 	.word	0x40004400

08000b68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <MX_DMA_Init+0x48>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <MX_DMA_Init+0x48>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6153      	str	r3, [r2, #20]
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <MX_DMA_Init+0x48>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	200b      	movs	r0, #11
 8000b8c:	f001 fcaf 	bl	80024ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b90:	200b      	movs	r0, #11
 8000b92:	f001 fcc8 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	200c      	movs	r0, #12
 8000b9c:	f001 fca7 	bl	80024ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ba0:	200c      	movs	r0, #12
 8000ba2:	f001 fcc0 	bl	8002526 <HAL_NVIC_EnableIRQ>

}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	4a2a      	ldr	r2, [pc, #168]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000bd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bd4:	6153      	str	r3, [r2, #20]
 8000bd6:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000be2:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	4a24      	ldr	r2, [pc, #144]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000be8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bec:	6153      	str	r3, [r2, #20]
 8000bee:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	6153      	str	r3, [r2, #20]
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c1c:	6153      	str	r3, [r2, #20]
 8000c1e:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <MX_GPIO_Init+0xc4>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c32:	f001 ffd5 	bl	8002be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_GPIO_Init+0xc8>)
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480d      	ldr	r0, [pc, #52]	; (8000c80 <MX_GPIO_Init+0xcc>)
 8000c4c:	f001 fe56 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c50:	2301      	movs	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6a:	f001 fe47 	bl	80028fc <HAL_GPIO_Init>

}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	; 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	10210000 	.word	0x10210000
 8000c80:	48000800 	.word	0x48000800

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_MspInit+0x44>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <HAL_MspInit+0x44>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6193      	str	r3, [r2, #24]
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_MspInit+0x44>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_MspInit+0x44>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_MspInit+0x44>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	61d3      	str	r3, [r2, #28]
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_MspInit+0x44>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f001 fc04 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	; 0x38
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cfc:	d155      	bne.n	8000daa <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000cfe:	4b73      	ldr	r3, [pc, #460]	; (8000ecc <HAL_ADC_MspInit+0x1f0>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	3301      	adds	r3, #1
 8000d04:	4a71      	ldr	r2, [pc, #452]	; (8000ecc <HAL_ADC_MspInit+0x1f0>)
 8000d06:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d08:	4b70      	ldr	r3, [pc, #448]	; (8000ecc <HAL_ADC_MspInit+0x1f0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d10b      	bne.n	8000d28 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d10:	4b6f      	ldr	r3, [pc, #444]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	4a6e      	ldr	r2, [pc, #440]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	6153      	str	r3, [r2, #20]
 8000d1c:	4b6c      	ldr	r3, [pc, #432]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d24:	623b      	str	r3, [r7, #32]
 8000d26:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d28:	4b69      	ldr	r3, [pc, #420]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	4a68      	ldr	r2, [pc, #416]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000d2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d32:	6153      	str	r3, [r2, #20]
 8000d34:	4b66      	ldr	r3, [pc, #408]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d3c:	61fb      	str	r3, [r7, #28]
 8000d3e:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = I_1Low_Pin|I_2Low_Pin|I_High_Pin|Tp_Pin;
 8000d40:	230f      	movs	r3, #15
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d44:	2303      	movs	r3, #3
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4860      	ldr	r0, [pc, #384]	; (8000ed4 <HAL_ADC_MspInit+0x1f8>)
 8000d54:	f001 fdd2 	bl	80028fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d58:	4b5f      	ldr	r3, [pc, #380]	; (8000ed8 <HAL_ADC_MspInit+0x1fc>)
 8000d5a:	4a60      	ldr	r2, [pc, #384]	; (8000edc <HAL_ADC_MspInit+0x200>)
 8000d5c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d5e:	4b5e      	ldr	r3, [pc, #376]	; (8000ed8 <HAL_ADC_MspInit+0x1fc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d64:	4b5c      	ldr	r3, [pc, #368]	; (8000ed8 <HAL_ADC_MspInit+0x1fc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d6a:	4b5b      	ldr	r3, [pc, #364]	; (8000ed8 <HAL_ADC_MspInit+0x1fc>)
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d70:	4b59      	ldr	r3, [pc, #356]	; (8000ed8 <HAL_ADC_MspInit+0x1fc>)
 8000d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d78:	4b57      	ldr	r3, [pc, #348]	; (8000ed8 <HAL_ADC_MspInit+0x1fc>)
 8000d7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d7e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d80:	4b55      	ldr	r3, [pc, #340]	; (8000ed8 <HAL_ADC_MspInit+0x1fc>)
 8000d82:	2220      	movs	r2, #32
 8000d84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d86:	4b54      	ldr	r3, [pc, #336]	; (8000ed8 <HAL_ADC_MspInit+0x1fc>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d8c:	4852      	ldr	r0, [pc, #328]	; (8000ed8 <HAL_ADC_MspInit+0x1fc>)
 8000d8e:	f001 fbe4 	bl	800255a <HAL_DMA_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000d98:	f7ff ff74 	bl	8000c84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a4e      	ldr	r2, [pc, #312]	; (8000ed8 <HAL_ADC_MspInit+0x1fc>)
 8000da0:	639a      	str	r2, [r3, #56]	; 0x38
 8000da2:	4a4d      	ldr	r2, [pc, #308]	; (8000ed8 <HAL_ADC_MspInit+0x1fc>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000da8:	e08b      	b.n	8000ec2 <HAL_ADC_MspInit+0x1e6>
  else if(hadc->Instance==ADC2)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a4c      	ldr	r2, [pc, #304]	; (8000ee0 <HAL_ADC_MspInit+0x204>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	f040 8086 	bne.w	8000ec2 <HAL_ADC_MspInit+0x1e6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000db6:	4b45      	ldr	r3, [pc, #276]	; (8000ecc <HAL_ADC_MspInit+0x1f0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	4a43      	ldr	r2, [pc, #268]	; (8000ecc <HAL_ADC_MspInit+0x1f0>)
 8000dbe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dc0:	4b42      	ldr	r3, [pc, #264]	; (8000ecc <HAL_ADC_MspInit+0x1f0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d10b      	bne.n	8000de0 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000dc8:	4b41      	ldr	r3, [pc, #260]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	4a40      	ldr	r2, [pc, #256]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	6153      	str	r3, [r2, #20]
 8000dd4:	4b3e      	ldr	r3, [pc, #248]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b3b      	ldr	r3, [pc, #236]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	4a3a      	ldr	r2, [pc, #232]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dea:	6153      	str	r3, [r2, #20]
 8000dec:	4b38      	ldr	r3, [pc, #224]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df8:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	4a34      	ldr	r2, [pc, #208]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000dfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e02:	6153      	str	r3, [r2, #20]
 8000e04:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e10:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	4a2e      	ldr	r2, [pc, #184]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000e16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e1a:	6153      	str	r3, [r2, #20]
 8000e1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <HAL_ADC_MspInit+0x1f4>)
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_1LowP_Pin|V_1LowN_Pin|V_2LowP_Pin|V_2LowN_Pin;
 8000e28:	23f0      	movs	r3, #240	; 0xf0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3e:	f001 fd5d 	bl	80028fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = V_HighP_Pin;
 8000e42:	2320      	movs	r3, #32
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e46:	2303      	movs	r3, #3
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(V_HighP_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	4619      	mov	r1, r3
 8000e54:	481f      	ldr	r0, [pc, #124]	; (8000ed4 <HAL_ADC_MspInit+0x1f8>)
 8000e56:	f001 fd51 	bl	80028fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = V_HighN_Pin;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(V_HighN_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	481d      	ldr	r0, [pc, #116]	; (8000ee4 <HAL_ADC_MspInit+0x208>)
 8000e6e:	f001 fd45 	bl	80028fc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <HAL_ADC_MspInit+0x20c>)
 8000e74:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <HAL_ADC_MspInit+0x210>)
 8000e76:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <HAL_ADC_MspInit+0x20c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <HAL_ADC_MspInit+0x20c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e84:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <HAL_ADC_MspInit+0x20c>)
 8000e86:	2280      	movs	r2, #128	; 0x80
 8000e88:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_ADC_MspInit+0x20c>)
 8000e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e90:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_ADC_MspInit+0x20c>)
 8000e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e98:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <HAL_ADC_MspInit+0x20c>)
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_ADC_MspInit+0x20c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000ea6:	4810      	ldr	r0, [pc, #64]	; (8000ee8 <HAL_ADC_MspInit+0x20c>)
 8000ea8:	f001 fb57 	bl	800255a <HAL_DMA_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_ADC_MspInit+0x1da>
      Error_Handler();
 8000eb2:	f7ff fee7 	bl	8000c84 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <HAL_ADC_MspInit+0x20c>)
 8000eba:	639a      	str	r2, [r3, #56]	; 0x38
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_ADC_MspInit+0x20c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000ec2:	bf00      	nop
 8000ec4:	3738      	adds	r7, #56	; 0x38
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2000005c 	.word	0x2000005c
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	48000800 	.word	0x48000800
 8000ed8:	20000228 	.word	0x20000228
 8000edc:	40020008 	.word	0x40020008
 8000ee0:	50000100 	.word	0x50000100
 8000ee4:	48000400 	.word	0x48000400
 8000ee8:	20000370 	.word	0x20000370
 8000eec:	4002001c 	.word	0x4002001c

08000ef0 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_HRTIM_MspInit+0x38>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d10b      	bne.n	8000f1a <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_HRTIM_MspInit+0x3c>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <HAL_HRTIM_MspInit+0x3c>)
 8000f08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f0c:	6193      	str	r3, [r2, #24]
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <HAL_HRTIM_MspInit+0x3c>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40017400 	.word	0x40017400
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <HAL_HRTIM_MspPostInit+0x68>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d11d      	bne.n	8000f8e <HAL_HRTIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_HRTIM_MspPostInit+0x6c>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <HAL_HRTIM_MspPostInit+0x6c>)
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	6153      	str	r3, [r2, #20]
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <HAL_HRTIM_MspPostInit+0x6c>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2
    */
    GPIO_InitStruct.Pin = H1_Pin|L1_Pin|H2_Pin|L2_Pin;
 8000f6a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000f7c:	230d      	movs	r3, #13
 8000f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	4619      	mov	r1, r3
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8a:	f001 fcb7 	bl	80028fc <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8000f8e:	bf00      	nop
 8000f90:	3720      	adds	r7, #32
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40017400 	.word	0x40017400
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a26      	ldr	r2, [pc, #152]	; (8001058 <HAL_SPI_MspInit+0xb8>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d145      	bne.n	800104e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <HAL_SPI_MspInit+0xbc>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	4a25      	ldr	r2, [pc, #148]	; (800105c <HAL_SPI_MspInit+0xbc>)
 8000fc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fcc:	6193      	str	r3, [r2, #24]
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <HAL_SPI_MspInit+0xbc>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b20      	ldr	r3, [pc, #128]	; (800105c <HAL_SPI_MspInit+0xbc>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	4a1f      	ldr	r2, [pc, #124]	; (800105c <HAL_SPI_MspInit+0xbc>)
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	6153      	str	r3, [r2, #20]
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	; (800105c <HAL_SPI_MspInit+0xbc>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_SPI_MspInit+0xbc>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	4a19      	ldr	r2, [pc, #100]	; (800105c <HAL_SPI_MspInit+0xbc>)
 8000ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ffc:	6153      	str	r3, [r2, #20]
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <HAL_SPI_MspInit+0xbc>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800100a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800101c:	2305      	movs	r3, #5
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102a:	f001 fc67 	bl	80028fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800102e:	2328      	movs	r3, #40	; 0x28
 8001030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103a:	2303      	movs	r3, #3
 800103c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800103e:	2305      	movs	r3, #5
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <HAL_SPI_MspInit+0xc0>)
 800104a:	f001 fc57 	bl	80028fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40013000 	.word	0x40013000
 800105c:	40021000 	.word	0x40021000
 8001060:	48000400 	.word	0x48000400

08001064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <HAL_UART_MspInit+0x7c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d128      	bne.n	80010d8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_UART_MspInit+0x80>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <HAL_UART_MspInit+0x80>)
 800108c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_UART_MspInit+0x80>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_UART_MspInit+0x80>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <HAL_UART_MspInit+0x80>)
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	6153      	str	r3, [r2, #20]
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_UART_MspInit+0x80>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010b6:	230c      	movs	r3, #12
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010c6:	2307      	movs	r3, #7
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d4:	f001 fc12 	bl	80028fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40004400 	.word	0x40004400
 80010e4:	40021000 	.word	0x40021000

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <MemManage_Handler+0x4>

08001102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <UsageFault_Handler+0x4>

0800110e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113c:	f000 f89c 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <DMA1_Channel1_IRQHandler+0x10>)
 800114a:	f001 fae5 	bl	8002718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000228 	.word	0x20000228

08001158 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <DMA1_Channel2_IRQHandler+0x10>)
 800115e:	f001 fadb 	bl	8002718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000370 	.word	0x20000370

0800116c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <SystemInit+0x28>)
 8001172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001176:	4a07      	ldr	r2, [pc, #28]	; (8001194 <SystemInit+0x28>)
 8001178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800117c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <SystemInit+0x28>)
 8001182:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001186:	609a      	str	r2, [r3, #8]
#endif
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800119c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800119e:	e003      	b.n	80011a8 <LoopCopyDataInit>

080011a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011a6:	3104      	adds	r1, #4

080011a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011a8:	480b      	ldr	r0, [pc, #44]	; (80011d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80011ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011b0:	d3f6      	bcc.n	80011a0 <CopyDataInit>
	ldr	r2, =_sbss
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80011b4:	e002      	b.n	80011bc <LoopFillZerobss>

080011b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011b8:	f842 3b04 	str.w	r3, [r2], #4

080011bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <LoopForever+0x16>)
	cmp	r2, r3
 80011be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011c0:	d3f9      	bcc.n	80011b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011c2:	f7ff ffd3 	bl	800116c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c6:	f004 fb4d 	bl	8005864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ca:	f7fe fffd 	bl	80001c8 <main>

080011ce <LoopForever>:

LoopForever:
    b LoopForever
 80011ce:	e7fe      	b.n	80011ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011d0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80011d4:	08005914 	.word	0x08005914
	ldr	r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011dc:	2000003c 	.word	0x2000003c
	ldr	r2, =_sbss
 80011e0:	2000003c 	.word	0x2000003c
	ldr	r3, = _ebss
 80011e4:	20000404 	.word	0x20000404

080011e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC1_2_IRQHandler>
	...

080011ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HAL_Init+0x28>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <HAL_Init+0x28>)
 80011f6:	f043 0310 	orr.w	r3, r3, #16
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fc:	2003      	movs	r0, #3
 80011fe:	f001 f96b 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001202:	2000      	movs	r0, #0
 8001204:	f000 f808 	bl	8001218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001208:	f7ff fd44 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40022000 	.word	0x40022000

08001218 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x54>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x58>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f001 f983 	bl	8002542 <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e00e      	b.n	8001264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d80a      	bhi.n	8001262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124c:	2200      	movs	r2, #0
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001254:	f001 f94b 	bl	80024ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001258:	4a06      	ldr	r2, [pc, #24]	; (8001274 <HAL_InitTick+0x5c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000030 	.word	0x20000030
 8001270:	20000038 	.word	0x20000038
 8001274:	20000034 	.word	0x20000034

08001278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000038 	.word	0x20000038
 800129c:	20000400 	.word	0x20000400

080012a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000400 	.word	0x20000400

080012b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b09a      	sub	sp, #104	; 0x68
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e172      	b.n	80015fa <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	2b00      	cmp	r3, #0
 8001324:	d176      	bne.n	8001414 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	2b00      	cmp	r3, #0
 800132c:	d152      	bne.n	80013d4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff fcc7 	bl	8000cdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d13b      	bne.n	80013d4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 fedd 	bl	800211c <ADC_Disable>
 8001362:	4603      	mov	r3, r0
 8001364:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	2b00      	cmp	r3, #0
 8001372:	d12f      	bne.n	80013d4 <HAL_ADC_Init+0xe0>
 8001374:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001378:	2b00      	cmp	r3, #0
 800137a:	d12b      	bne.n	80013d4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001384:	f023 0302 	bic.w	r3, r3, #2
 8001388:	f043 0202 	orr.w	r2, r3, #2
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800139e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013ae:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013b0:	4b94      	ldr	r3, [pc, #592]	; (8001604 <HAL_ADC_Init+0x310>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a94      	ldr	r2, [pc, #592]	; (8001608 <HAL_ADC_Init+0x314>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	0c9a      	lsrs	r2, r3, #18
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013c6:	e002      	b.n	80013ce <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f9      	bne.n	80013c8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d007      	beq.n	80013f2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80013ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013f0:	d110      	bne.n	8001414 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f023 0312 	bic.w	r3, r3, #18
 80013fa:	f043 0210 	orr.w	r2, r3, #16
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f043 0201 	orr.w	r2, r3, #1
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	2b00      	cmp	r3, #0
 800141e:	f040 80df 	bne.w	80015e0 <HAL_ADC_Init+0x2ec>
 8001422:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 80da 	bne.w	80015e0 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001436:	2b00      	cmp	r3, #0
 8001438:	f040 80d2 	bne.w	80015e0 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001444:	f043 0202 	orr.w	r2, r3, #2
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800144c:	4b6f      	ldr	r3, [pc, #444]	; (800160c <HAL_ADC_Init+0x318>)
 800144e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001458:	d102      	bne.n	8001460 <HAL_ADC_Init+0x16c>
 800145a:	4b6d      	ldr	r3, [pc, #436]	; (8001610 <HAL_ADC_Init+0x31c>)
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	e002      	b.n	8001466 <HAL_ADC_Init+0x172>
 8001460:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001464:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b01      	cmp	r3, #1
 8001472:	d108      	bne.n	8001486 <HAL_ADC_Init+0x192>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b01      	cmp	r3, #1
 8001480:	d101      	bne.n	8001486 <HAL_ADC_Init+0x192>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <HAL_ADC_Init+0x194>
 8001486:	2300      	movs	r3, #0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d11c      	bne.n	80014c6 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800148c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800148e:	2b00      	cmp	r3, #0
 8001490:	d010      	beq.n	80014b4 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d107      	bne.n	80014ae <HAL_ADC_Init+0x1ba>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_ADC_Init+0x1ba>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_ADC_Init+0x1bc>
 80014ae:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d108      	bne.n	80014c6 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80014b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	431a      	orrs	r2, r3
 80014c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014c4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7e5b      	ldrb	r3, [r3, #25]
 80014ca:	035b      	lsls	r3, r3, #13
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014d0:	2a01      	cmp	r2, #1
 80014d2:	d002      	beq.n	80014da <HAL_ADC_Init+0x1e6>
 80014d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014d8:	e000      	b.n	80014dc <HAL_ADC_Init+0x1e8>
 80014da:	2200      	movs	r2, #0
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014ec:	4313      	orrs	r3, r2
 80014ee:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d11b      	bne.n	8001532 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7e5b      	ldrb	r3, [r3, #25]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d109      	bne.n	8001516 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	3b01      	subs	r3, #1
 8001508:	045a      	lsls	r2, r3, #17
 800150a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800150c:	4313      	orrs	r3, r2
 800150e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001512:	663b      	str	r3, [r7, #96]	; 0x60
 8001514:	e00d      	b.n	8001532 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800151e:	f043 0220 	orr.w	r2, r3, #32
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f043 0201 	orr.w	r2, r3, #1
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001536:	2b01      	cmp	r3, #1
 8001538:	d007      	beq.n	800154a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001542:	4313      	orrs	r3, r2
 8001544:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001546:	4313      	orrs	r3, r2
 8001548:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b00      	cmp	r3, #0
 8001556:	d114      	bne.n	8001582 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001566:	f023 0302 	bic.w	r3, r3, #2
 800156a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7e1b      	ldrb	r3, [r3, #24]
 8001570:	039a      	lsls	r2, r3, #14
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4313      	orrs	r3, r2
 800157c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800157e:	4313      	orrs	r3, r2
 8001580:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <HAL_ADC_Init+0x320>)
 800158a:	4013      	ands	r3, r2
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001592:	430b      	orrs	r3, r1
 8001594:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d10c      	bne.n	80015b8 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	f023 010f 	bic.w	r1, r3, #15
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	1e5a      	subs	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	631a      	str	r2, [r3, #48]	; 0x30
 80015b6:	e007      	b.n	80015c8 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 020f 	bic.w	r2, r2, #15
 80015c6:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f023 0303 	bic.w	r3, r3, #3
 80015d6:	f043 0201 	orr.w	r2, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
 80015de:	e00a      	b.n	80015f6 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f023 0312 	bic.w	r3, r3, #18
 80015e8:	f043 0210 	orr.w	r2, r3, #16
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80015f0:	2301      	movs	r3, #1
 80015f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80015f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3768      	adds	r7, #104	; 0x68
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000030 	.word	0x20000030
 8001608:	431bde83 	.word	0x431bde83
 800160c:	50000300 	.word	0x50000300
 8001610:	50000100 	.word	0x50000100
 8001614:	fff0c007 	.word	0xfff0c007

08001618 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	2b00      	cmp	r3, #0
 8001634:	f040 80b9 	bne.w	80017aa <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_ADC_Start_DMA+0x2e>
 8001642:	2302      	movs	r3, #2
 8001644:	e0b4      	b.n	80017b0 <HAL_ADC_Start_DMA+0x198>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800164e:	4b5a      	ldr	r3, [pc, #360]	; (80017b8 <HAL_ADC_Start_DMA+0x1a0>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 031f 	and.w	r3, r3, #31
 8001656:	2b00      	cmp	r3, #0
 8001658:	f040 80a0 	bne.w	800179c <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f000 fcff 	bl	8002060 <ADC_Enable>
 8001662:	4603      	mov	r3, r0
 8001664:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f040 8092 	bne.w	8001792 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001682:	4b4d      	ldr	r3, [pc, #308]	; (80017b8 <HAL_ADC_Start_DMA+0x1a0>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	2b00      	cmp	r3, #0
 800168c:	d004      	beq.n	8001698 <HAL_ADC_Start_DMA+0x80>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001696:	d115      	bne.n	80016c4 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d027      	beq.n	8001702 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80016c2:	e01e      	b.n	8001702 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016d8:	d004      	beq.n	80016e4 <HAL_ADC_Start_DMA+0xcc>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a37      	ldr	r2, [pc, #220]	; (80017bc <HAL_ADC_Start_DMA+0x1a4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d10e      	bne.n	8001702 <HAL_ADC_Start_DMA+0xea>
 80016e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800170e:	d106      	bne.n	800171e <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001714:	f023 0206 	bic.w	r2, r3, #6
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	645a      	str	r2, [r3, #68]	; 0x44
 800171c:	e002      	b.n	8001724 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001730:	4a23      	ldr	r2, [pc, #140]	; (80017c0 <HAL_ADC_Start_DMA+0x1a8>)
 8001732:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001738:	4a22      	ldr	r2, [pc, #136]	; (80017c4 <HAL_ADC_Start_DMA+0x1ac>)
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001740:	4a21      	ldr	r2, [pc, #132]	; (80017c8 <HAL_ADC_Start_DMA+0x1b0>)
 8001742:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	221c      	movs	r2, #28
 800174a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0210 	orr.w	r2, r2, #16
 800175a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3340      	adds	r3, #64	; 0x40
 8001776:	4619      	mov	r1, r3
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f000 ff34 	bl	80025e8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0204 	orr.w	r2, r2, #4
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	e00d      	b.n	80017ae <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800179a:	e008      	b.n	80017ae <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80017a8:	e001      	b.n	80017ae <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017aa:	2302      	movs	r3, #2
 80017ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	50000300 	.word	0x50000300
 80017bc:	50000100 	.word	0x50000100
 80017c0:	08001f95 	.word	0x08001f95
 80017c4:	0800200f 	.word	0x0800200f
 80017c8:	0800202b 	.word	0x0800202b

080017cc <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d101      	bne.n	80017e6 <HAL_ADC_Stop_DMA+0x1a>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e04a      	b.n	800187c <HAL_ADC_Stop_DMA+0xb0>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80017ee:	216c      	movs	r1, #108	; 0x6c
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 fcf3 	bl	80021dc <ADC_ConversionStop>
 80017f6:	4603      	mov	r3, r0
 80017f8:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d138      	bne.n	8001872 <HAL_ADC_Stop_DMA+0xa6>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001814:	4618      	mov	r0, r3
 8001816:	f000 ff46 	bl	80026a6 <HAL_DMA_Abort>
 800181a:	4603      	mov	r3, r0
 800181c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_ADC_Stop_DMA+0x64>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0210 	bic.w	r2, r2, #16
 800183e:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 fc68 	bl	800211c <ADC_Disable>
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	e002      	b.n	8001858 <HAL_ADC_Stop_DMA+0x8c>
    }
    else
    {
      ADC_Disable(hadc);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 fc62 	bl	800211c <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d109      	bne.n	8001872 <HAL_ADC_Stop_DMA+0xa6>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	f043 0201 	orr.w	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001884:	b480      	push	{r7}
 8001886:	b09b      	sub	sp, #108	; 0x6c
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x22>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e2a5      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x56e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f040 8289 	bne.w	8001dd0 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d81c      	bhi.n	8001900 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	461a      	mov	r2, r3
 80018da:	231f      	movs	r3, #31
 80018dc:	4093      	lsls	r3, r2
 80018de:	43db      	mvns	r3, r3
 80018e0:	4019      	ands	r1, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa00 f203 	lsl.w	r2, r0, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	631a      	str	r2, [r3, #48]	; 0x30
 80018fe:	e063      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b09      	cmp	r3, #9
 8001906:	d81e      	bhi.n	8001946 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	3b1e      	subs	r3, #30
 800191c:	221f      	movs	r2, #31
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	4019      	ands	r1, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	3b1e      	subs	r3, #30
 8001938:	fa00 f203 	lsl.w	r2, r0, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	635a      	str	r2, [r3, #52]	; 0x34
 8001944:	e040      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b0e      	cmp	r3, #14
 800194c:	d81e      	bhi.n	800198c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	3b3c      	subs	r3, #60	; 0x3c
 8001962:	221f      	movs	r2, #31
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	4019      	ands	r1, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	3b3c      	subs	r3, #60	; 0x3c
 800197e:	fa00 f203 	lsl.w	r2, r0, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	639a      	str	r2, [r3, #56]	; 0x38
 800198a:	e01d      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	3b5a      	subs	r3, #90	; 0x5a
 80019a0:	221f      	movs	r2, #31
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	4019      	ands	r1, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	3b5a      	subs	r3, #90	; 0x5a
 80019bc:	fa00 f203 	lsl.w	r2, r0, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f040 80e5 	bne.w	8001ba2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b09      	cmp	r3, #9
 80019de:	d91c      	bls.n	8001a1a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6999      	ldr	r1, [r3, #24]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	3b1e      	subs	r3, #30
 80019f2:	2207      	movs	r2, #7
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4019      	ands	r1, r3
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	6898      	ldr	r0, [r3, #8]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	3b1e      	subs	r3, #30
 8001a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	619a      	str	r2, [r3, #24]
 8001a18:	e019      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6959      	ldr	r1, [r3, #20]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4019      	ands	r1, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6898      	ldr	r0, [r3, #8]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	fa00 f203 	lsl.w	r2, r0, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	08db      	lsrs	r3, r3, #3
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d84f      	bhi.n	8001b10 <HAL_ADC_ConfigChannel+0x28c>
 8001a70:	a201      	add	r2, pc, #4	; (adr r2, 8001a78 <HAL_ADC_ConfigChannel+0x1f4>)
 8001a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a76:	bf00      	nop
 8001a78:	08001a89 	.word	0x08001a89
 8001a7c:	08001aab 	.word	0x08001aab
 8001a80:	08001acd 	.word	0x08001acd
 8001a84:	08001aef 	.word	0x08001aef
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a8e:	4b9e      	ldr	r3, [pc, #632]	; (8001d08 <HAL_ADC_ConfigChannel+0x484>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	0691      	lsls	r1, r2, #26
 8001a98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001aa6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001aa8:	e07e      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ab0:	4b95      	ldr	r3, [pc, #596]	; (8001d08 <HAL_ADC_ConfigChannel+0x484>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	0691      	lsls	r1, r2, #26
 8001aba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001abc:	430a      	orrs	r2, r1
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ac8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001aca:	e06d      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ad2:	4b8d      	ldr	r3, [pc, #564]	; (8001d08 <HAL_ADC_ConfigChannel+0x484>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	0691      	lsls	r1, r2, #26
 8001adc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001aea:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001aec:	e05c      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001af4:	4b84      	ldr	r3, [pc, #528]	; (8001d08 <HAL_ADC_ConfigChannel+0x484>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	0691      	lsls	r1, r2, #26
 8001afe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b00:	430a      	orrs	r2, r1
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b0c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b0e:	e04b      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	069b      	lsls	r3, r3, #26
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d107      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b32:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	069b      	lsls	r3, r3, #26
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d107      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b56:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	069b      	lsls	r3, r3, #26
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d107      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b7a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	069b      	lsls	r3, r3, #26
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d10a      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b9e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001ba0:	e001      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001ba2:	bf00      	nop
 8001ba4:	e000      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001ba6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d108      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x344>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x344>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <HAL_ADC_ConfigChannel+0x346>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f040 810b 	bne.w	8001de6 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d00f      	beq.n	8001bf8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2201      	movs	r2, #1
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001bf6:	e049      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	409a      	lsls	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b09      	cmp	r3, #9
 8001c18:	d91c      	bls.n	8001c54 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6999      	ldr	r1, [r3, #24]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	3b1b      	subs	r3, #27
 8001c2c:	2207      	movs	r2, #7
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	4019      	ands	r1, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	6898      	ldr	r0, [r3, #8]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	3b1b      	subs	r3, #27
 8001c46:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	619a      	str	r2, [r3, #24]
 8001c52:	e01b      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6959      	ldr	r1, [r3, #20]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	2207      	movs	r2, #7
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	4019      	ands	r1, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6898      	ldr	r0, [r3, #8]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	fa00 f203 	lsl.w	r2, r0, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <HAL_ADC_ConfigChannel+0x488>)
 8001c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b10      	cmp	r3, #16
 8001c96:	d105      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d015      	beq.n	8001cd0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ca8:	2b11      	cmp	r3, #17
 8001caa:	d105      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00b      	beq.n	8001cd0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001cbc:	2b12      	cmp	r3, #18
 8001cbe:	f040 8092 	bne.w	8001de6 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 808b 	bne.w	8001de6 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd8:	d102      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x45c>
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_ADC_ConfigChannel+0x48c>)
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	e002      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x462>
 8001ce0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ce4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d10f      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x490>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d108      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x490>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e007      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x492>
 8001d06:	bf00      	nop
 8001d08:	83fff000 	.word	0x83fff000
 8001d0c:	50000300 	.word	0x50000300
 8001d10:	50000100 	.word	0x50000100
 8001d14:	2300      	movs	r3, #0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d150      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d1a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d107      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x4b8>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x4b8>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x4ba>
 8001d3c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d13c      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d11d      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x502>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d52:	d118      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d60:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_ADC_ConfigChannel+0x57c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <HAL_ADC_ConfigChannel+0x580>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	0c9a      	lsrs	r2, r3, #18
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d76:	e002      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f9      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d84:	e02e      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b11      	cmp	r3, #17
 8001d8c:	d10b      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x522>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d96:	d106      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001da4:	e01e      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b12      	cmp	r3, #18
 8001dac:	d11a      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001db8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dba:	e013      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f043 0220 	orr.w	r2, r3, #32
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001dce:	e00a      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f043 0220 	orr.w	r2, r3, #32
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001de2:	e000      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001de4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001dee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	376c      	adds	r7, #108	; 0x6c
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000030 	.word	0x20000030
 8001e04:	431bde83 	.word	0x431bde83

08001e08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b099      	sub	sp, #100	; 0x64
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e20:	d102      	bne.n	8001e28 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001e22:	4b5a      	ldr	r3, [pc, #360]	; (8001f8c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	e002      	b.n	8001e2e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001e28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e2c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0a2      	b.n	8001f7e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e09b      	b.n	8001f7e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d17f      	bne.n	8001f5c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d179      	bne.n	8001f5c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e68:	4b49      	ldr	r3, [pc, #292]	; (8001f90 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001e6a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d040      	beq.n	8001ef6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e86:	035b      	lsls	r3, r3, #13
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e8e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d108      	bne.n	8001eb0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d15c      	bne.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d107      	bne.n	8001ed2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001ed2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d14b      	bne.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ee0:	f023 030f 	bic.w	r3, r3, #15
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	6811      	ldr	r1, [r2, #0]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	6892      	ldr	r2, [r2, #8]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ef2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ef4:	e03c      	b.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ef6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001efe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f00:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d108      	bne.n	8001f22 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001f22:	2300      	movs	r3, #0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d123      	bne.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d107      	bne.n	8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001f44:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d112      	bne.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f52:	f023 030f 	bic.w	r3, r3, #15
 8001f56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f58:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f5a:	e009      	b.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f043 0220 	orr.w	r2, r3, #32
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001f6e:	e000      	b.n	8001f72 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f70:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3764      	adds	r7, #100	; 0x64
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	50000100 	.word	0x50000100
 8001f90:	50000300 	.word	0x50000300

08001f94 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d126      	bne.n	8001ffc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d115      	bne.n	8001ff4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d111      	bne.n	8001ff4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d105      	bne.n	8001ff4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f043 0201 	orr.w	r2, r3, #1
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f7ff f95f 	bl	80012b8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ffa:	e004      	b.n	8002006 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f7ff f955 	bl	80012cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002048:	f043 0204 	orr.w	r2, r3, #4
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f7ff f945 	bl	80012e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d108      	bne.n	800208c <ADC_Enable+0x2c>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <ADC_Enable+0x2c>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <ADC_Enable+0x2e>
 800208c:	2300      	movs	r3, #0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d13c      	bne.n	800210c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <ADC_Enable+0xb8>)
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00d      	beq.n	80020bc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f043 0210 	orr.w	r2, r3, #16
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	f043 0201 	orr.w	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e028      	b.n	800210e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80020cc:	f7ff f8e8 	bl	80012a0 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020d2:	e014      	b.n	80020fe <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020d4:	f7ff f8e4 	bl	80012a0 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d90d      	bls.n	80020fe <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f043 0210 	orr.w	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f043 0201 	orr.w	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e007      	b.n	800210e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d1e3      	bne.n	80020d4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	8000003f 	.word	0x8000003f

0800211c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b01      	cmp	r3, #1
 8002134:	d108      	bne.n	8002148 <ADC_Disable+0x2c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <ADC_Disable+0x2c>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <ADC_Disable+0x2e>
 8002148:	2300      	movs	r3, #0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d040      	beq.n	80021d0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 030d 	and.w	r3, r3, #13
 8002158:	2b01      	cmp	r3, #1
 800215a:	d10f      	bne.n	800217c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0202 	orr.w	r2, r2, #2
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2203      	movs	r2, #3
 8002172:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002174:	f7ff f894 	bl	80012a0 <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800217a:	e022      	b.n	80021c2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f043 0210 	orr.w	r2, r3, #16
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218c:	f043 0201 	orr.w	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e01c      	b.n	80021d2 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002198:	f7ff f882 	bl	80012a0 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d90d      	bls.n	80021c2 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f043 0210 	orr.w	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e007      	b.n	80021d2 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d0e3      	beq.n	8002198 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8093 	beq.w	8002328 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002210:	d12a      	bne.n	8002268 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002216:	2b01      	cmp	r3, #1
 8002218:	d126      	bne.n	8002268 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800221e:	2b01      	cmp	r3, #1
 8002220:	d122      	bne.n	8002268 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002222:	230c      	movs	r3, #12
 8002224:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002226:	e014      	b.n	8002252 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4a42      	ldr	r2, [pc, #264]	; (8002334 <ADC_ConversionStop+0x158>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d90d      	bls.n	800224c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f043 0210 	orr.w	r2, r3, #16
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e06e      	b.n	800232a <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	3301      	adds	r3, #1
 8002250:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225c:	2b40      	cmp	r3, #64	; 0x40
 800225e:	d1e3      	bne.n	8002228 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2240      	movs	r2, #64	; 0x40
 8002266:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b60      	cmp	r3, #96	; 0x60
 800226c:	d015      	beq.n	800229a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b04      	cmp	r3, #4
 800227a:	d10e      	bne.n	800229a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002286:	2b00      	cmp	r3, #0
 8002288:	d107      	bne.n	800229a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0210 	orr.w	r2, r2, #16
 8002298:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b0c      	cmp	r3, #12
 800229e:	d015      	beq.n	80022cc <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d10e      	bne.n	80022cc <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0220 	orr.w	r2, r2, #32
 80022ca:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	2b60      	cmp	r3, #96	; 0x60
 80022d0:	d004      	beq.n	80022dc <ADC_ConversionStop+0x100>
 80022d2:	2b6c      	cmp	r3, #108	; 0x6c
 80022d4:	d105      	bne.n	80022e2 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80022d6:	230c      	movs	r3, #12
 80022d8:	617b      	str	r3, [r7, #20]
        break;
 80022da:	e005      	b.n	80022e8 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80022dc:	2308      	movs	r3, #8
 80022de:	617b      	str	r3, [r7, #20]
        break;
 80022e0:	e002      	b.n	80022e8 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80022e2:	2304      	movs	r3, #4
 80022e4:	617b      	str	r3, [r7, #20]
        break;
 80022e6:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80022e8:	f7fe ffda 	bl	80012a0 <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80022ee:	e014      	b.n	800231a <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80022f0:	f7fe ffd6 	bl	80012a0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b0b      	cmp	r3, #11
 80022fc:	d90d      	bls.n	800231a <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f043 0210 	orr.w	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e007      	b.n	800232a <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e3      	bne.n	80022f0 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	000993ff 	.word	0x000993ff

08002338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236a:	4a04      	ldr	r2, [pc, #16]	; (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60d3      	str	r3, [r2, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4907      	ldr	r1, [pc, #28]	; (80023d4 <__NVIC_EnableIRQ+0x38>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	; (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	; (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
         );
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a4:	d301      	bcc.n	80024aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00f      	b.n	80024ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <SysTick_Config+0x40>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b2:	210f      	movs	r1, #15
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024b8:	f7ff ff8e 	bl	80023d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <SysTick_Config+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <SysTick_Config+0x40>)
 80024c4:	2207      	movs	r2, #7
 80024c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	e000e010 	.word	0xe000e010

080024d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ff29 	bl	8002338 <__NVIC_SetPriorityGrouping>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002500:	f7ff ff3e 	bl	8002380 <__NVIC_GetPriorityGrouping>
 8002504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f7ff ff8e 	bl	800242c <NVIC_EncodePriority>
 8002510:	4602      	mov	r2, r0
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff5d 	bl	80023d8 <__NVIC_SetPriority>
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff31 	bl	800239c <__NVIC_EnableIRQ>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ffa2 	bl	8002494 <SysTick_Config>
 8002550:	4603      	mov	r3, r0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e037      	b.n	80025e0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002586:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800258a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002594:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f97a 	bl	80028bc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}  
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_DMA_Start_IT+0x20>
 8002604:	2302      	movs	r3, #2
 8002606:	e04a      	b.n	800269e <HAL_DMA_Start_IT+0xb6>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002616:	2b01      	cmp	r3, #1
 8002618:	d13a      	bne.n	8002690 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2202      	movs	r2, #2
 800261e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0201 	bic.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f90d 	bl	800285e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 020e 	orr.w	r2, r2, #14
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	e00f      	b.n	800267e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 020a 	orr.w	r2, r2, #10
 800266c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0204 	bic.w	r2, r2, #4
 800267c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e005      	b.n	800269c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002698:	2302      	movs	r3, #2
 800269a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800269c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d008      	beq.n	80026ca <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2204      	movs	r2, #4
 80026bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e020      	b.n	800270c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 020e 	bic.w	r2, r2, #14
 80026d8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f2:	2101      	movs	r1, #1
 80026f4:	fa01 f202 	lsl.w	r2, r1, r2
 80026f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	2204      	movs	r2, #4
 8002736:	409a      	lsls	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d024      	beq.n	800278a <HAL_DMA_IRQHandler+0x72>
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	d01f      	beq.n	800278a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b00      	cmp	r3, #0
 8002756:	d107      	bne.n	8002768 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0204 	bic.w	r2, r2, #4
 8002766:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	2104      	movs	r1, #4
 8002772:	fa01 f202 	lsl.w	r2, r1, r2
 8002776:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d06a      	beq.n	8002856 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002788:	e065      	b.n	8002856 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	2202      	movs	r2, #2
 8002790:	409a      	lsls	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d02c      	beq.n	80027f4 <HAL_DMA_IRQHandler+0xdc>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d027      	beq.n	80027f4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10b      	bne.n	80027ca <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 020a 	bic.w	r2, r2, #10
 80027c0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	2102      	movs	r1, #2
 80027d4:	fa01 f202 	lsl.w	r2, r1, r2
 80027d8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d035      	beq.n	8002856 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80027f2:	e030      	b.n	8002856 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	2208      	movs	r2, #8
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d028      	beq.n	8002856 <HAL_DMA_IRQHandler+0x13e>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d023      	beq.n	8002856 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 020e 	bic.w	r2, r2, #14
 800281c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	2101      	movs	r1, #1
 8002828:	fa01 f202 	lsl.w	r2, r1, r2
 800282c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	2b00      	cmp	r3, #0
 800284a:	d004      	beq.n	8002856 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4798      	blx	r3
    }
  }
}  
 8002854:	e7ff      	b.n	8002856 <HAL_DMA_IRQHandler+0x13e>
 8002856:	bf00      	nop
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800285e:	b480      	push	{r7}
 8002860:	b085      	sub	sp, #20
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	2101      	movs	r1, #1
 8002876:	fa01 f202 	lsl.w	r2, r1, r2
 800287a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b10      	cmp	r3, #16
 800288a:	d108      	bne.n	800289e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800289c:	e007      	b.n	80028ae <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	60da      	str	r2, [r3, #12]
}
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <DMA_CalcBaseAndBitshift+0x34>)
 80028cc:	4413      	add	r3, r2
 80028ce:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <DMA_CalcBaseAndBitshift+0x38>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	009a      	lsls	r2, r3, #2
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a06      	ldr	r2, [pc, #24]	; (80028f8 <DMA_CalcBaseAndBitshift+0x3c>)
 80028e0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	bffdfff8 	.word	0xbffdfff8
 80028f4:	cccccccd 	.word	0xcccccccd
 80028f8:	40020000 	.word	0x40020000

080028fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800290a:	e14e      	b.n	8002baa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	2101      	movs	r1, #1
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	fa01 f303 	lsl.w	r3, r1, r3
 8002918:	4013      	ands	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8140 	beq.w	8002ba4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d00b      	beq.n	8002944 <HAL_GPIO_Init+0x48>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d007      	beq.n	8002944 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002938:	2b11      	cmp	r3, #17
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b12      	cmp	r3, #18
 8002942:	d130      	bne.n	80029a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800297a:	2201      	movs	r2, #1
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	f003 0201 	and.w	r2, r3, #1
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	2203      	movs	r2, #3
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0xea>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b12      	cmp	r3, #18
 80029e4:	d123      	bne.n	8002a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	08da      	lsrs	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3208      	adds	r2, #8
 80029ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	220f      	movs	r2, #15
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	08da      	lsrs	r2, r3, #3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3208      	adds	r2, #8
 8002a28:	6939      	ldr	r1, [r7, #16]
 8002a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	2203      	movs	r2, #3
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0203 	and.w	r2, r3, #3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 809a 	beq.w	8002ba4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a70:	4b55      	ldr	r3, [pc, #340]	; (8002bc8 <HAL_GPIO_Init+0x2cc>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	4a54      	ldr	r2, [pc, #336]	; (8002bc8 <HAL_GPIO_Init+0x2cc>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	6193      	str	r3, [r2, #24]
 8002a7c:	4b52      	ldr	r3, [pc, #328]	; (8002bc8 <HAL_GPIO_Init+0x2cc>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a88:	4a50      	ldr	r2, [pc, #320]	; (8002bcc <HAL_GPIO_Init+0x2d0>)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	3302      	adds	r3, #2
 8002a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	220f      	movs	r2, #15
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ab2:	d013      	beq.n	8002adc <HAL_GPIO_Init+0x1e0>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a46      	ldr	r2, [pc, #280]	; (8002bd0 <HAL_GPIO_Init+0x2d4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d00d      	beq.n	8002ad8 <HAL_GPIO_Init+0x1dc>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a45      	ldr	r2, [pc, #276]	; (8002bd4 <HAL_GPIO_Init+0x2d8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d007      	beq.n	8002ad4 <HAL_GPIO_Init+0x1d8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a44      	ldr	r2, [pc, #272]	; (8002bd8 <HAL_GPIO_Init+0x2dc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d101      	bne.n	8002ad0 <HAL_GPIO_Init+0x1d4>
 8002acc:	2303      	movs	r3, #3
 8002ace:	e006      	b.n	8002ade <HAL_GPIO_Init+0x1e2>
 8002ad0:	2305      	movs	r3, #5
 8002ad2:	e004      	b.n	8002ade <HAL_GPIO_Init+0x1e2>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e002      	b.n	8002ade <HAL_GPIO_Init+0x1e2>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <HAL_GPIO_Init+0x1e2>
 8002adc:	2300      	movs	r3, #0
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	f002 0203 	and.w	r2, r2, #3
 8002ae4:	0092      	lsls	r2, r2, #2
 8002ae6:	4093      	lsls	r3, r2
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002aee:	4937      	ldr	r1, [pc, #220]	; (8002bcc <HAL_GPIO_Init+0x2d0>)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	3302      	adds	r3, #2
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002afc:	4b37      	ldr	r3, [pc, #220]	; (8002bdc <HAL_GPIO_Init+0x2e0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b20:	4a2e      	ldr	r2, [pc, #184]	; (8002bdc <HAL_GPIO_Init+0x2e0>)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b26:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <HAL_GPIO_Init+0x2e0>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b4a:	4a24      	ldr	r2, [pc, #144]	; (8002bdc <HAL_GPIO_Init+0x2e0>)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b50:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <HAL_GPIO_Init+0x2e0>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b74:	4a19      	ldr	r2, [pc, #100]	; (8002bdc <HAL_GPIO_Init+0x2e0>)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b7a:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <HAL_GPIO_Init+0x2e0>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b9e:	4a0f      	ldr	r2, [pc, #60]	; (8002bdc <HAL_GPIO_Init+0x2e0>)
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f47f aea9 	bne.w	800290c <HAL_GPIO_Init+0x10>
  }
}
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40010000 	.word	0x40010000
 8002bd0:	48000400 	.word	0x48000400
 8002bd4:	48000800 	.word	0x48000800
 8002bd8:	48000c00 	.word	0x48000c00
 8002bdc:	40010400 	.word	0x40010400

08002be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]
 8002bec:	4613      	mov	r3, r2
 8002bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bf0:	787b      	ldrb	r3, [r7, #1]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bfc:	e002      	b.n	8002c04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bfe:	887a      	ldrh	r2, [r7, #2]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c22:	887a      	ldrh	r2, [r7, #2]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4013      	ands	r3, r2
 8002c28:	041a      	lsls	r2, r3, #16
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	43d9      	mvns	r1, r3
 8002c2e:	887b      	ldrh	r3, [r7, #2]
 8002c30:	400b      	ands	r3, r1
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	619a      	str	r2, [r3, #24]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0ba      	b.n	8002dcc <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d02e      	beq.n	8002cf8 <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a4d      	ldr	r2, [pc, #308]	; (8002dd4 <HAL_HRTIM_Init+0x190>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d10b      	bne.n	8002cbc <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002ca4:	4b4c      	ldr	r3, [pc, #304]	; (8002dd8 <HAL_HRTIM_Init+0x194>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	4a4b      	ldr	r2, [pc, #300]	; (8002dd8 <HAL_HRTIM_Init+0x194>)
 8002caa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cae:	6193      	str	r3, [r2, #24]
 8002cb0:	4b49      	ldr	r3, [pc, #292]	; (8002dd8 <HAL_HRTIM_Init+0x194>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002cca:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ce0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7fe f8f9 	bl	8000ef0 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d012      	beq.n	8002d30 <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d18:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8002d40:	2300      	movs	r3, #0
 8002d42:	75fb      	strb	r3, [r7, #23]
 8002d44:	e03e      	b.n	8002dc4 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8002d46:	7dfa      	ldrb	r2, [r7, #23]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	3318      	adds	r3, #24
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8002d5a:	7dfa      	ldrb	r2, [r7, #23]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	331c      	adds	r3, #28
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8002d6e:	7dfa      	ldrb	r2, [r7, #23]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3320      	adds	r3, #32
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8002d82:	7dfa      	ldrb	r2, [r7, #23]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	3324      	adds	r3, #36	; 0x24
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8002d96:	7dfa      	ldrb	r2, [r7, #23]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	1a9b      	subs	r3, r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	3328      	adds	r3, #40	; 0x28
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8002daa:	7dfa      	ldrb	r2, [r7, #23]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	3330      	adds	r3, #48	; 0x30
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d9bd      	bls.n	8002d46 <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40017400 	.word	0x40017400
 8002dd8:	40021000 	.word	0x40021000

08002ddc <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d101      	bne.n	8002df8 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
 8002df6:	e015      	b.n	8002e24 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	d104      	bne.n	8002e10 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 fb26 	bl	800345a <HRTIM_MasterBase_Config>
 8002e0e:	e004      	b.n	8002e1a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 fb4f 	bl	80034b8 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d101      	bne.n	8002e48 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
 8002e46:	e05f      	b.n	8002f08 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e058      	b.n	8002f08 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2202      	movs	r2, #2
 8002e62:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d104      	bne.n	8002e76 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 fb62 	bl	8003538 <HRTIM_MasterWaveform_Config>
 8002e74:	e004      	b.n	8002e80 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 fbc2 	bl	8003604 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6819      	ldr	r1, [r3, #0]
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4403      	add	r3, r0
 8002e92:	3320      	adds	r3, #32
 8002e94:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6859      	ldr	r1, [r3, #4]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4403      	add	r3, r0
 8002ea8:	3324      	adds	r3, #36	; 0x24
 8002eaa:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6899      	ldr	r1, [r3, #8]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4403      	add	r3, r0
 8002ebe:	3328      	adds	r3, #40	; 0x28
 8002ec0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68d9      	ldr	r1, [r3, #12]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4403      	add	r3, r0
 8002ed4:	332c      	adds	r3, #44	; 0x2c
 8002ed6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6919      	ldr	r1, [r3, #16]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4403      	add	r3, r0
 8002eea:	3330      	adds	r3, #48	; 0x30
 8002eec:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fd7d 	bl	80039f0 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d101      	bne.n	8002f2c <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
     return HAL_BUSY;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e067      	b.n	8002ffc <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_HRTIM_DeadTimeConfig+0x2a>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e060      	b.n	8002ffc <HAL_HRTIM_DeadTimeConfig+0xec>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2202      	movs	r2, #2
 8002f46:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002f52:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	041a      	lsls	r2, r3, #16
 8002f92:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <HAL_HRTIM_DeadTimeConfig+0xf8>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	01db      	lsls	r3, r3, #7
 8002fce:	4413      	add	r3, r2
 8002fd0:	33b8      	adds	r3, #184	; 0xb8
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	; (800300c <HAL_HRTIM_DeadTimeConfig+0xfc>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	6811      	ldr	r1, [r2, #0]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	01db      	lsls	r3, r3, #7
 8002fe4:	440b      	add	r3, r1
 8002fe6:	33b8      	adds	r3, #184	; 0xb8
 8002fe8:	601a      	str	r2, [r3, #0]
                 HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
                 HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	371c      	adds	r7, #28
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	01ff0000 	.word	0x01ff0000
 800300c:	3c002000 	.word	0x3c002000

08003010 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d101      	bne.n	800302e <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 800302a:	2302      	movs	r3, #2
 800302c:	e157      	b.n	80032de <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8003038:	2302      	movs	r3, #2
 800303a:	e150      	b.n	80032de <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b05      	cmp	r3, #5
 8003050:	d140      	bne.n	80030d4 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3b01      	subs	r3, #1
 8003056:	2b07      	cmp	r3, #7
 8003058:	d82a      	bhi.n	80030b0 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800305a:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	08003081 	.word	0x08003081
 8003064:	0800308d 	.word	0x0800308d
 8003068:	080030b1 	.word	0x080030b1
 800306c:	08003099 	.word	0x08003099
 8003070:	080030b1 	.word	0x080030b1
 8003074:	080030b1 	.word	0x080030b1
 8003078:	080030b1 	.word	0x080030b1
 800307c:	080030a5 	.word	0x080030a5
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	61da      	str	r2, [r3, #28]
        break;
 800308a:	e01a      	b.n	80030c2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8003096:	e014      	b.n	80030c2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80030a2:	e00e      	b.n	80030c2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80030ae:	e008      	b.n	80030c2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2207      	movs	r2, #7
 80030b4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 80030c0:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b07      	cmp	r3, #7
 80030cc:	f040 80fe 	bne.w	80032cc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e104      	b.n	80032de <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	2b07      	cmp	r3, #7
 80030da:	f200 80e3 	bhi.w	80032a4 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	08003105 	.word	0x08003105
 80030e8:	08003119 	.word	0x08003119
 80030ec:	080032a5 	.word	0x080032a5
 80030f0:	080031d5 	.word	0x080031d5
 80030f4:	080032a5 	.word	0x080032a5
 80030f8:	080032a5 	.word	0x080032a5
 80030fc:	080032a5 	.word	0x080032a5
 8003100:	080031e9 	.word	0x080031e9
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6819      	ldr	r1, [r3, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	01db      	lsls	r3, r3, #7
 8003110:	440b      	add	r3, r1
 8003112:	339c      	adds	r3, #156	; 0x9c
 8003114:	601a      	str	r2, [r3, #0]
        break;
 8003116:	e0d1      	b.n	80032bc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6819      	ldr	r1, [r3, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	01db      	lsls	r3, r3, #7
 8003124:	440b      	add	r3, r1
 8003126:	33a4      	adds	r3, #164	; 0xa4
 8003128:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d03f      	beq.n	80031b2 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3301      	adds	r3, #1
 800313a:	01db      	lsls	r3, r3, #7
 800313c:	4413      	add	r3, r2
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	6811      	ldr	r1, [r2, #0]
 8003144:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	3301      	adds	r3, #1
 800314c:	01db      	lsls	r3, r3, #7
 800314e:	440b      	add	r3, r1
 8003150:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	3301      	adds	r3, #1
 800315a:	01db      	lsls	r3, r3, #7
 800315c:	4413      	add	r3, r2
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	68f9      	ldr	r1, [r7, #12]
 8003166:	6809      	ldr	r1, [r1, #0]
 8003168:	431a      	orrs	r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	3301      	adds	r3, #1
 800316e:	01db      	lsls	r3, r3, #7
 8003170:	440b      	add	r3, r1
 8003172:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317c:	d109      	bne.n	8003192 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6819      	ldr	r1, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	01db      	lsls	r3, r3, #7
 800318a:	440b      	add	r3, r1
 800318c:	339c      	adds	r3, #156	; 0x9c
 800318e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8003190:	e091      	b.n	80032b6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800319a:	f040 808c 	bne.w	80032b6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	01db      	lsls	r3, r3, #7
 80031aa:	440b      	add	r3, r1
 80031ac:	33a8      	adds	r3, #168	; 0xa8
 80031ae:	601a      	str	r2, [r3, #0]
         break;
 80031b0:	e081      	b.n	80032b6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	3301      	adds	r3, #1
 80031ba:	01db      	lsls	r3, r3, #7
 80031bc:	4413      	add	r3, r2
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	6811      	ldr	r1, [r2, #0]
 80031c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	3301      	adds	r3, #1
 80031cc:	01db      	lsls	r3, r3, #7
 80031ce:	440b      	add	r3, r1
 80031d0:	601a      	str	r2, [r3, #0]
         break;
 80031d2:	e070      	b.n	80032b6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6819      	ldr	r1, [r3, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	01db      	lsls	r3, r3, #7
 80031e0:	440b      	add	r3, r1
 80031e2:	33a8      	adds	r3, #168	; 0xa8
 80031e4:	601a      	str	r2, [r3, #0]
        break;
 80031e6:	e069      	b.n	80032bc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6819      	ldr	r1, [r3, #0]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	01db      	lsls	r3, r3, #7
 80031f4:	440b      	add	r3, r1
 80031f6:	33ac      	adds	r3, #172	; 0xac
 80031f8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d03f      	beq.n	8003282 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3301      	adds	r3, #1
 800320a:	01db      	lsls	r3, r3, #7
 800320c:	4413      	add	r3, r2
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	6811      	ldr	r1, [r2, #0]
 8003214:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	3301      	adds	r3, #1
 800321c:	01db      	lsls	r3, r3, #7
 800321e:	440b      	add	r3, r1
 8003220:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	3301      	adds	r3, #1
 800322a:	01db      	lsls	r3, r3, #7
 800322c:	4413      	add	r3, r2
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	68f9      	ldr	r1, [r7, #12]
 8003238:	6809      	ldr	r1, [r1, #0]
 800323a:	431a      	orrs	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	3301      	adds	r3, #1
 8003240:	01db      	lsls	r3, r3, #7
 8003242:	440b      	add	r3, r1
 8003244:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324e:	d109      	bne.n	8003264 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6819      	ldr	r1, [r3, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	01db      	lsls	r3, r3, #7
 800325c:	440b      	add	r3, r1
 800325e:	339c      	adds	r3, #156	; 0x9c
 8003260:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8003262:	e02a      	b.n	80032ba <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800326c:	d125      	bne.n	80032ba <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6819      	ldr	r1, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	01db      	lsls	r3, r3, #7
 800327a:	440b      	add	r3, r1
 800327c:	33a8      	adds	r3, #168	; 0xa8
 800327e:	601a      	str	r2, [r3, #0]
         break;
 8003280:	e01b      	b.n	80032ba <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	3301      	adds	r3, #1
 800328a:	01db      	lsls	r3, r3, #7
 800328c:	4413      	add	r3, r2
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	6811      	ldr	r1, [r2, #0]
 8003294:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	3301      	adds	r3, #1
 800329c:	01db      	lsls	r3, r3, #7
 800329e:	440b      	add	r3, r1
 80032a0:	601a      	str	r2, [r3, #0]
         break;
 80032a2:	e00a      	b.n	80032ba <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2207      	movs	r2, #7
 80032a8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80032b4:	e002      	b.n	80032bc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80032b6:	bf00      	nop
 80032b8:	e000      	b.n	80032bc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80032ba:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b07      	cmp	r3, #7
 80032c6:	d101      	bne.n	80032cc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e008      	b.n	80032de <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop

080032ec <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d101      	bne.n	800330a <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8003306:	2302      	movs	r3, #2
 8003308:	e01d      	b.n	8003346 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8003314:	2302      	movs	r3, #2
 8003316:	e016      	b.n	8003346 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 faa8 	bl	8003884 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_HRTIM_WaveformOutputStart+0x18>
 8003362:	2302      	movs	r3, #2
 8003364:	e01a      	b.n	800339c <HAL_HRTIM_WaveformOutputStart+0x4e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2202      	movs	r2, #2
 8003372:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_HRTIM_WaveformCountStart+0x18>
 80033bc:	2302      	movs	r3, #2
 80033be:	e018      	b.n	80033f2 <HAL_HRTIM_WaveformCountStart+0x4a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6819      	ldr	r1, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <HAL_HRTIM_UpdateEnable>:
  *                   @arg HRTIM_TIMERUPDATE_E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_UpdateEnable(HRTIM_HandleTypeDef *hhrtim,
                                          uint32_t Timers)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMERUPDATE(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_HRTIM_UpdateEnable+0x18>
 8003412:	2302      	movs	r3, #2
 8003414:	e01b      	b.n	800344e <HAL_HRTIM_UpdateEnable+0x50>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2202      	movs	r2, #2
 8003422:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable timer(s) registers update */
  hhrtim->Instance->sCommonRegs.CR1 &= ~(Timers);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f8d3 1380 	ldr.w	r1, [r3, #896]	; 0x380
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	43da      	mvns	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	400a      	ands	r2, r1
 8003438:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
  }
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800345a:	b480      	push	{r7}
 800345c:	b085      	sub	sp, #20
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0307 	bic.w	r3, r3, #7
 8003472:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f023 0318 	bic.w	r3, r3, #24
 8003484:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	6852      	ldr	r2, [r2, #4]
 80034aa:	619a      	str	r2, [r3, #24]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	3301      	adds	r3, #1
 80034cc:	01db      	lsls	r3, r3, #7
 80034ce:	4413      	add	r3, r2
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f023 0307 	bic.w	r3, r3, #7
 80034da:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f023 0318 	bic.w	r3, r3, #24
 80034ec:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	3301      	adds	r3, #1
 8003500:	01db      	lsls	r3, r3, #7
 8003502:	4413      	add	r3, r2
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6819      	ldr	r1, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	01db      	lsls	r3, r3, #7
 8003514:	440b      	add	r3, r1
 8003516:	3394      	adds	r3, #148	; 0x94
 8003518:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6819      	ldr	r1, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	01db      	lsls	r3, r3, #7
 8003526:	440b      	add	r3, r1
 8003528:	3398      	adds	r3, #152	; 0x98
 800352a:	601a      	str	r2, [r3, #0]
}
 800352c:	bf00      	nop
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003552:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0320 	bic.w	r3, r3, #32
 800355a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800356c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800357e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003590:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80035a2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80035b4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80035c8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035da:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80035f8:	bf00      	nop
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003604:	b480      	push	{r7}
 8003606:	b08b      	sub	sp, #44	; 0x2c
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	3301      	adds	r3, #1
 8003618:	01db      	lsls	r3, r3, #7
 800361a:	4413      	add	r3, r2
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	6811      	ldr	r1, [r2, #0]
 8003622:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	3301      	adds	r3, #1
 800362a:	01db      	lsls	r3, r3, #7
 800362c:	440b      	add	r3, r1
 800362e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	3301      	adds	r3, #1
 8003638:	01db      	lsls	r3, r3, #7
 800363a:	4413      	add	r3, r2
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	01db      	lsls	r3, r3, #7
 8003648:	4413      	add	r3, r2
 800364a:	33e8      	adds	r3, #232	; 0xe8
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	01db      	lsls	r3, r3, #7
 8003658:	4413      	add	r3, r2
 800365a:	33e4      	adds	r3, #228	; 0xe4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003668:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	f023 0320 	bic.w	r3, r3, #32
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003678:	4313      	orrs	r3, r2
 800367a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368a:	4313      	orrs	r3, r2
 800368c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369c:	4313      	orrs	r3, r2
 800369e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ae:	4313      	orrs	r3, r2
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c0:	4313      	orrs	r3, r2
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d2:	4313      	orrs	r3, r2
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e6:	d103      	bne.n	80036f0 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fe:	4313      	orrs	r3, r2
 8003700:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003710:	4313      	orrs	r3, r2
 8003712:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003722:	4313      	orrs	r3, r2
 8003724:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f023 031f 	bic.w	r3, r3, #31
 800372c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4313      	orrs	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003742:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003752:	2b00      	cmp	r3, #0
 8003754:	d108      	bne.n	8003768 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800375c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	6a3a      	ldr	r2, [r7, #32]
 8003764:	4313      	orrs	r3, r2
 8003766:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8003770:	d004      	beq.n	800377c <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800377a:	d103      	bne.n	8003784 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003780:	2b40      	cmp	r3, #64	; 0x40
 8003782:	d108      	bne.n	8003796 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 800378a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	6a3a      	ldr	r2, [r7, #32]
 8003792:	4313      	orrs	r3, r2
 8003794:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d843      	bhi.n	800382a <HRTIM_TimingUnitWaveform_Config+0x226>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037bd 	.word	0x080037bd
 80037ac:	080037d3 	.word	0x080037d3
 80037b0:	080037e9 	.word	0x080037e9
 80037b4:	080037ff 	.word	0x080037ff
 80037b8:	08003815 	.word	0x08003815
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80037c2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61fb      	str	r3, [r7, #28]
      break;
 80037d0:	e02c      	b.n	800382c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61fb      	str	r3, [r7, #28]
      break;
 80037e6:	e021      	b.n	800382c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80037ee:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61fb      	str	r3, [r7, #28]
      break;
 80037fc:	e016      	b.n	800382c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003804:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	4313      	orrs	r3, r2
 8003810:	61fb      	str	r3, [r7, #28]
      break;
 8003812:	e00b      	b.n	800382c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800381a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	015b      	lsls	r3, r3, #5
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	4313      	orrs	r3, r2
 8003826:	61fb      	str	r3, [r7, #28]
      break;
 8003828:	e000      	b.n	800382c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 800382a:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	3301      	adds	r3, #1
 8003834:	01db      	lsls	r3, r3, #7
 8003836:	4413      	add	r3, r2
 8003838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	01db      	lsls	r3, r3, #7
 8003844:	4413      	add	r3, r2
 8003846:	33e8      	adds	r3, #232	; 0xe8
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	01db      	lsls	r3, r3, #7
 8003854:	4413      	add	r3, r2
 8003856:	33e4      	adds	r3, #228	; 0xe4
 8003858:	6a3a      	ldr	r2, [r7, #32]
 800385a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	01db      	lsls	r3, r3, #7
 8003864:	4413      	add	r3, r2
 8003866:	33d4      	adds	r3, #212	; 0xd4
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69fa      	ldr	r2, [r7, #28]
 8003872:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8003876:	bf00      	nop
 8003878:	372c      	adds	r7, #44	; 0x2c
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop

08003884 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8003884:	b480      	push	{r7}
 8003886:	b089      	sub	sp, #36	; 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	01db      	lsls	r3, r3, #7
 800389e:	4413      	add	r3, r2
 80038a0:	33e4      	adds	r3, #228	; 0xe4
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	01db      	lsls	r3, r3, #7
 80038ae:	4413      	add	r3, r2
 80038b0:	33b8      	adds	r3, #184	; 0xb8
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	617b      	str	r3, [r7, #20]

  switch (Output)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d01d      	beq.n	80038f8 <HRTIM_OutputConfig+0x74>
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d80b      	bhi.n	80038d8 <HRTIM_OutputConfig+0x54>
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d02c      	beq.n	800391e <HRTIM_OutputConfig+0x9a>
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d802      	bhi.n	80038ce <HRTIM_OutputConfig+0x4a>
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d015      	beq.n	80038f8 <HRTIM_OutputConfig+0x74>
      shift = 16U;
      break;
    }

  default:
    break;
 80038cc:	e03c      	b.n	8003948 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d012      	beq.n	80038f8 <HRTIM_OutputConfig+0x74>
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d023      	beq.n	800391e <HRTIM_OutputConfig+0x9a>
    break;
 80038d6:	e037      	b.n	8003948 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 80038d8:	2b80      	cmp	r3, #128	; 0x80
 80038da:	d020      	beq.n	800391e <HRTIM_OutputConfig+0x9a>
 80038dc:	2b80      	cmp	r3, #128	; 0x80
 80038de:	d804      	bhi.n	80038ea <HRTIM_OutputConfig+0x66>
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d01c      	beq.n	800391e <HRTIM_OutputConfig+0x9a>
 80038e4:	2b40      	cmp	r3, #64	; 0x40
 80038e6:	d007      	beq.n	80038f8 <HRTIM_OutputConfig+0x74>
    break;
 80038e8:	e02e      	b.n	8003948 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 80038ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ee:	d003      	beq.n	80038f8 <HRTIM_OutputConfig+0x74>
 80038f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f4:	d013      	beq.n	800391e <HRTIM_OutputConfig+0x9a>
    break;
 80038f6:	e027      	b.n	8003948 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6819      	ldr	r1, [r3, #0]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	01db      	lsls	r3, r3, #7
 8003904:	440b      	add	r3, r1
 8003906:	33bc      	adds	r3, #188	; 0xbc
 8003908:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6819      	ldr	r1, [r3, #0]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	01db      	lsls	r3, r3, #7
 8003916:	440b      	add	r3, r1
 8003918:	33c0      	adds	r3, #192	; 0xc0
 800391a:	601a      	str	r2, [r3, #0]
      break;
 800391c:	e014      	b.n	8003948 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6819      	ldr	r1, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	01db      	lsls	r3, r3, #7
 800392a:	440b      	add	r3, r1
 800392c:	33c4      	adds	r3, #196	; 0xc4
 800392e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6819      	ldr	r1, [r3, #0]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	01db      	lsls	r3, r3, #7
 800393c:	440b      	add	r3, r1
 800393e:	33c8      	adds	r3, #200	; 0xc8
 8003940:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8003942:	2310      	movs	r3, #16
 8003944:	61bb      	str	r3, [r7, #24]
      break;
 8003946:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8003948:	22fe      	movs	r2, #254	; 0xfe
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8003950:	43db      	mvns	r3, r3
 8003952:	69fa      	ldr	r2, [r7, #28]
 8003954:	4013      	ands	r3, r2
 8003956:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	4313      	orrs	r3, r2
 8003966:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	4313      	orrs	r3, r2
 8003976:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	4313      	orrs	r3, r2
 8003986:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	69fa      	ldr	r2, [r7, #28]
 8003994:	4313      	orrs	r3, r2
 8003996:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	699a      	ldr	r2, [r3, #24]
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d111      	bne.n	80039d4 <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10c      	bne.n	80039d4 <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d107      	bne.n	80039d4 <HRTIM_OutputConfig+0x150>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	69da      	ldr	r2, [r3, #28]
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	01db      	lsls	r3, r3, #7
 80039dc:	4413      	add	r3, r2
 80039de:	33e4      	adds	r3, #228	; 0xe4
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	601a      	str	r2, [r3, #0]
}
 80039e4:	bf00      	nop
 80039e6:	3724      	adds	r7, #36	; 0x24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b05      	cmp	r3, #5
 80039fe:	d851      	bhi.n	8003aa4 <HRTIM_ForceRegistersUpdate+0xb4>
 8003a00:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <HRTIM_ForceRegistersUpdate+0x18>)
 8003a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a06:	bf00      	nop
 8003a08:	08003a37 	.word	0x08003a37
 8003a0c:	08003a4d 	.word	0x08003a4d
 8003a10:	08003a63 	.word	0x08003a63
 8003a14:	08003a79 	.word	0x08003a79
 8003a18:	08003a8f 	.word	0x08003a8f
 8003a1c:	08003a21 	.word	0x08003a21
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0201 	orr.w	r2, r2, #1
 8003a30:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003a34:	e037      	b.n	8003aa6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0202 	orr.w	r2, r2, #2
 8003a46:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003a4a:	e02c      	b.n	8003aa6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0204 	orr.w	r2, r2, #4
 8003a5c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003a60:	e021      	b.n	8003aa6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0208 	orr.w	r2, r2, #8
 8003a72:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003a76:	e016      	b.n	8003aa6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0210 	orr.w	r2, r2, #16
 8003a88:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003a8c:	e00b      	b.n	8003aa6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0220 	orr.w	r2, r2, #32
 8003a9e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003aa2:	e000      	b.n	8003aa6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8003aa4:	bf00      	nop
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop

08003ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	1d3b      	adds	r3, r7, #4
 8003abe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ac0:	1d3b      	adds	r3, r7, #4
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d102      	bne.n	8003ace <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f000 bef4 	b.w	80048b6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ace:	1d3b      	adds	r3, r7, #4
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 816a 	beq.w	8003db2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ade:	4bb3      	ldr	r3, [pc, #716]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d00c      	beq.n	8003b04 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003aea:	4bb0      	ldr	r3, [pc, #704]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d159      	bne.n	8003baa <HAL_RCC_OscConfig+0xf6>
 8003af6:	4bad      	ldr	r3, [pc, #692]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b02:	d152      	bne.n	8003baa <HAL_RCC_OscConfig+0xf6>
 8003b04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b08:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003b10:	fa93 f3a3 	rbit	r3, r3
 8003b14:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b18:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1c:	fab3 f383 	clz	r3, r3
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d102      	bne.n	8003b36 <HAL_RCC_OscConfig+0x82>
 8003b30:	4b9e      	ldr	r3, [pc, #632]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	e015      	b.n	8003b62 <HAL_RCC_OscConfig+0xae>
 8003b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b3a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003b4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b4e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003b52:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003b56:	fa93 f3a3 	rbit	r3, r3
 8003b5a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003b5e:	4b93      	ldr	r3, [pc, #588]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b66:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003b6a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003b6e:	fa92 f2a2 	rbit	r2, r2
 8003b72:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003b76:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003b7a:	fab2 f282 	clz	r2, r2
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	f042 0220 	orr.w	r2, r2, #32
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	f002 021f 	and.w	r2, r2, #31
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 810c 	beq.w	8003db0 <HAL_RCC_OscConfig+0x2fc>
 8003b98:	1d3b      	adds	r3, r7, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f040 8106 	bne.w	8003db0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f000 be86 	b.w	80048b6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003baa:	1d3b      	adds	r3, r7, #4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb4:	d106      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x110>
 8003bb6:	4b7d      	ldr	r3, [pc, #500]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a7c      	ldr	r2, [pc, #496]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e030      	b.n	8003c26 <HAL_RCC_OscConfig+0x172>
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x134>
 8003bce:	4b77      	ldr	r3, [pc, #476]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a76      	ldr	r2, [pc, #472]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	4b74      	ldr	r3, [pc, #464]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a73      	ldr	r2, [pc, #460]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e01e      	b.n	8003c26 <HAL_RCC_OscConfig+0x172>
 8003be8:	1d3b      	adds	r3, r7, #4
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf2:	d10c      	bne.n	8003c0e <HAL_RCC_OscConfig+0x15a>
 8003bf4:	4b6d      	ldr	r3, [pc, #436]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a6c      	ldr	r2, [pc, #432]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003bfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	4b6a      	ldr	r3, [pc, #424]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a69      	ldr	r2, [pc, #420]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	e00b      	b.n	8003c26 <HAL_RCC_OscConfig+0x172>
 8003c0e:	4b67      	ldr	r3, [pc, #412]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a66      	ldr	r2, [pc, #408]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	4b64      	ldr	r3, [pc, #400]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a63      	ldr	r2, [pc, #396]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c24:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c26:	4b61      	ldr	r3, [pc, #388]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	f023 020f 	bic.w	r2, r3, #15
 8003c2e:	1d3b      	adds	r3, r7, #4
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	495d      	ldr	r1, [pc, #372]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c3a:	1d3b      	adds	r3, r7, #4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d059      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c44:	f7fd fb2c 	bl	80012a0 <HAL_GetTick>
 8003c48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4c:	e00a      	b.n	8003c64 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c4e:	f7fd fb27 	bl	80012a0 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b64      	cmp	r3, #100	; 0x64
 8003c5c:	d902      	bls.n	8003c64 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	f000 be29 	b.w	80048b6 <HAL_RCC_OscConfig+0xe02>
 8003c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c68:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003c78:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7c:	fab3 f383 	clz	r3, r3
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d102      	bne.n	8003c96 <HAL_RCC_OscConfig+0x1e2>
 8003c90:	4b46      	ldr	r3, [pc, #280]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	e015      	b.n	8003cc2 <HAL_RCC_OscConfig+0x20e>
 8003c96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c9a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003caa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003cb2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003cbe:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cc6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003cca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003cce:	fa92 f2a2 	rbit	r2, r2
 8003cd2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003cd6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003cda:	fab2 f282 	clz	r2, r2
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	f042 0220 	orr.w	r2, r2, #32
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	f002 021f 	and.w	r2, r2, #31
 8003cea:	2101      	movs	r1, #1
 8003cec:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ab      	beq.n	8003c4e <HAL_RCC_OscConfig+0x19a>
 8003cf6:	e05c      	b.n	8003db2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fd fad2 	bl	80012a0 <HAL_GetTick>
 8003cfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d00:	e00a      	b.n	8003d18 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d02:	f7fd facd 	bl	80012a0 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d902      	bls.n	8003d18 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	f000 bdcf 	b.w	80048b6 <HAL_RCC_OscConfig+0xe02>
 8003d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d1c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003d24:	fa93 f3a3 	rbit	r3, r3
 8003d28:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003d2c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d30:	fab3 f383 	clz	r3, r3
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d102      	bne.n	8003d4a <HAL_RCC_OscConfig+0x296>
 8003d44:	4b19      	ldr	r3, [pc, #100]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	e015      	b.n	8003d76 <HAL_RCC_OscConfig+0x2c2>
 8003d4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d4e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003d5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d62:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003d66:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003d72:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d7a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003d7e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003d82:	fa92 f2a2 	rbit	r2, r2
 8003d86:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003d8a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003d8e:	fab2 f282 	clz	r2, r2
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	f042 0220 	orr.w	r2, r2, #32
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	f002 021f 	and.w	r2, r2, #31
 8003d9e:	2101      	movs	r1, #1
 8003da0:	fa01 f202 	lsl.w	r2, r1, r2
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1ab      	bne.n	8003d02 <HAL_RCC_OscConfig+0x24e>
 8003daa:	e002      	b.n	8003db2 <HAL_RCC_OscConfig+0x2fe>
 8003dac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003db2:	1d3b      	adds	r3, r7, #4
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 816f 	beq.w	80040a0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003dc2:	4bd0      	ldr	r3, [pc, #832]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003dce:	4bcd      	ldr	r3, [pc, #820]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d16c      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x400>
 8003dda:	4bca      	ldr	r3, [pc, #808]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d166      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x400>
 8003de6:	2302      	movs	r3, #2
 8003de8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003df0:	fa93 f3a3 	rbit	r3, r3
 8003df4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003df8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfc:	fab3 f383 	clz	r3, r3
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d102      	bne.n	8003e16 <HAL_RCC_OscConfig+0x362>
 8003e10:	4bbc      	ldr	r3, [pc, #752]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	e013      	b.n	8003e3e <HAL_RCC_OscConfig+0x38a>
 8003e16:	2302      	movs	r3, #2
 8003e18:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003e20:	fa93 f3a3 	rbit	r3, r3
 8003e24:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003e28:	2302      	movs	r3, #2
 8003e2a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003e2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e32:	fa93 f3a3 	rbit	r3, r3
 8003e36:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003e3a:	4bb2      	ldr	r3, [pc, #712]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003e44:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003e48:	fa92 f2a2 	rbit	r2, r2
 8003e4c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003e50:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003e54:	fab2 f282 	clz	r2, r2
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	f042 0220 	orr.w	r2, r2, #32
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	f002 021f 	and.w	r2, r2, #31
 8003e64:	2101      	movs	r1, #1
 8003e66:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <HAL_RCC_OscConfig+0x3cc>
 8003e70:	1d3b      	adds	r3, r7, #4
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d002      	beq.n	8003e80 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f000 bd1b 	b.w	80048b6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e80:	4ba0      	ldr	r3, [pc, #640]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e88:	1d3b      	adds	r3, r7, #4
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	21f8      	movs	r1, #248	; 0xf8
 8003e90:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003e98:	fa91 f1a1 	rbit	r1, r1
 8003e9c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003ea0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003ea4:	fab1 f181 	clz	r1, r1
 8003ea8:	b2c9      	uxtb	r1, r1
 8003eaa:	408b      	lsls	r3, r1
 8003eac:	4995      	ldr	r1, [pc, #596]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb2:	e0f5      	b.n	80040a0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eb4:	1d3b      	adds	r3, r7, #4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 8085 	beq.w	8003fca <HAL_RCC_OscConfig+0x516>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003ed2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed6:	fab3 f383 	clz	r3, r3
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ee0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2301      	movs	r3, #1
 8003eea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eec:	f7fd f9d8 	bl	80012a0 <HAL_GetTick>
 8003ef0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef4:	e00a      	b.n	8003f0c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ef6:	f7fd f9d3 	bl	80012a0 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d902      	bls.n	8003f0c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	f000 bcd5 	b.w	80048b6 <HAL_RCC_OscConfig+0xe02>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f12:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003f16:	fa93 f3a3 	rbit	r3, r3
 8003f1a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003f1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f22:	fab3 f383 	clz	r3, r3
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d102      	bne.n	8003f3c <HAL_RCC_OscConfig+0x488>
 8003f36:	4b73      	ldr	r3, [pc, #460]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	e013      	b.n	8003f64 <HAL_RCC_OscConfig+0x4b0>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003f4e:	2302      	movs	r3, #2
 8003f50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003f54:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003f58:	fa93 f3a3 	rbit	r3, r3
 8003f5c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003f60:	4b68      	ldr	r3, [pc, #416]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	2202      	movs	r2, #2
 8003f66:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003f6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003f6e:	fa92 f2a2 	rbit	r2, r2
 8003f72:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003f76:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003f7a:	fab2 f282 	clz	r2, r2
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	f042 0220 	orr.w	r2, r2, #32
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	f002 021f 	and.w	r2, r2, #31
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0af      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f96:	4b5b      	ldr	r3, [pc, #364]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f9e:	1d3b      	adds	r3, r7, #4
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	21f8      	movs	r1, #248	; 0xf8
 8003fa6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003faa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003fae:	fa91 f1a1 	rbit	r1, r1
 8003fb2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003fb6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003fba:	fab1 f181 	clz	r1, r1
 8003fbe:	b2c9      	uxtb	r1, r1
 8003fc0:	408b      	lsls	r3, r1
 8003fc2:	4950      	ldr	r1, [pc, #320]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	600b      	str	r3, [r1, #0]
 8003fc8:	e06a      	b.n	80040a0 <HAL_RCC_OscConfig+0x5ec>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003fdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe0:	fab3 f383 	clz	r3, r3
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff6:	f7fd f953 	bl	80012a0 <HAL_GetTick>
 8003ffa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ffe:	e00a      	b.n	8004016 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004000:	f7fd f94e 	bl	80012a0 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d902      	bls.n	8004016 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	f000 bc50 	b.w	80048b6 <HAL_RCC_OscConfig+0xe02>
 8004016:	2302      	movs	r3, #2
 8004018:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004020:	fa93 f3a3 	rbit	r3, r3
 8004024:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402c:	fab3 f383 	clz	r3, r3
 8004030:	b2db      	uxtb	r3, r3
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b01      	cmp	r3, #1
 800403e:	d102      	bne.n	8004046 <HAL_RCC_OscConfig+0x592>
 8004040:	4b30      	ldr	r3, [pc, #192]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	e013      	b.n	800406e <HAL_RCC_OscConfig+0x5ba>
 8004046:	2302      	movs	r3, #2
 8004048:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004050:	fa93 f3a3 	rbit	r3, r3
 8004054:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004058:	2302      	movs	r3, #2
 800405a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800405e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004062:	fa93 f3a3 	rbit	r3, r3
 8004066:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800406a:	4b26      	ldr	r3, [pc, #152]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	2202      	movs	r2, #2
 8004070:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004074:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004078:	fa92 f2a2 	rbit	r2, r2
 800407c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004080:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004084:	fab2 f282 	clz	r2, r2
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	f042 0220 	orr.w	r2, r2, #32
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	f002 021f 	and.w	r2, r2, #31
 8004094:	2101      	movs	r1, #1
 8004096:	fa01 f202 	lsl.w	r2, r1, r2
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1af      	bne.n	8004000 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80da 	beq.w	8004264 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040b0:	1d3b      	adds	r3, r7, #4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d069      	beq.n	800418e <HAL_RCC_OscConfig+0x6da>
 80040ba:	2301      	movs	r3, #1
 80040bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040c4:	fa93 f3a3 	rbit	r3, r3
 80040c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80040cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040d0:	fab3 f383 	clz	r3, r3
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	461a      	mov	r2, r3
 80040d8:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <HAL_RCC_OscConfig+0x654>)
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	461a      	mov	r2, r3
 80040e0:	2301      	movs	r3, #1
 80040e2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e4:	f7fd f8dc 	bl	80012a0 <HAL_GetTick>
 80040e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ec:	e00e      	b.n	800410c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ee:	f7fd f8d7 	bl	80012a0 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d906      	bls.n	800410c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e3d9      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
 8004108:	10908120 	.word	0x10908120
 800410c:	2302      	movs	r3, #2
 800410e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800411e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004122:	2202      	movs	r2, #2
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	fa93 f2a3 	rbit	r2, r3
 8004130:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800413a:	2202      	movs	r2, #2
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	fa93 f2a3 	rbit	r2, r3
 8004148:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800414c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414e:	4ba5      	ldr	r3, [pc, #660]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004152:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004156:	2102      	movs	r1, #2
 8004158:	6019      	str	r1, [r3, #0]
 800415a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	fa93 f1a3 	rbit	r1, r3
 8004164:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004168:	6019      	str	r1, [r3, #0]
  return result;
 800416a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	fab3 f383 	clz	r3, r3
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2101      	movs	r1, #1
 8004182:	fa01 f303 	lsl.w	r3, r1, r3
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0b0      	beq.n	80040ee <HAL_RCC_OscConfig+0x63a>
 800418c:	e06a      	b.n	8004264 <HAL_RCC_OscConfig+0x7b0>
 800418e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004192:	2201      	movs	r2, #1
 8004194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004196:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	fa93 f2a3 	rbit	r2, r3
 80041a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80041a4:	601a      	str	r2, [r3, #0]
  return result;
 80041a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80041aa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ac:	fab3 f383 	clz	r3, r3
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	4b8c      	ldr	r3, [pc, #560]	; (80043e8 <HAL_RCC_OscConfig+0x934>)
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	461a      	mov	r2, r3
 80041bc:	2300      	movs	r3, #0
 80041be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c0:	f7fd f86e 	bl	80012a0 <HAL_GetTick>
 80041c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c8:	e009      	b.n	80041de <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ca:	f7fd f869 	bl	80012a0 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e36b      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
 80041de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80041e2:	2202      	movs	r2, #2
 80041e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	fa93 f2a3 	rbit	r2, r3
 80041f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80041fa:	2202      	movs	r2, #2
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	fa93 f2a3 	rbit	r2, r3
 8004208:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004212:	2202      	movs	r2, #2
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	fa93 f2a3 	rbit	r2, r3
 8004220:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004224:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004226:	4b6f      	ldr	r3, [pc, #444]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800422a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800422e:	2102      	movs	r1, #2
 8004230:	6019      	str	r1, [r3, #0]
 8004232:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	fa93 f1a3 	rbit	r1, r3
 800423c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004240:	6019      	str	r1, [r3, #0]
  return result;
 8004242:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	fab3 f383 	clz	r3, r3
 800424c:	b2db      	uxtb	r3, r3
 800424e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	2101      	movs	r1, #1
 800425a:	fa01 f303 	lsl.w	r3, r1, r3
 800425e:	4013      	ands	r3, r2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1b2      	bne.n	80041ca <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004264:	1d3b      	adds	r3, r7, #4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 8158 	beq.w	8004524 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004274:	2300      	movs	r3, #0
 8004276:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800427a:	4b5a      	ldr	r3, [pc, #360]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d112      	bne.n	80042ac <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004286:	4b57      	ldr	r3, [pc, #348]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	4a56      	ldr	r2, [pc, #344]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 800428c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004290:	61d3      	str	r3, [r2, #28]
 8004292:	4b54      	ldr	r3, [pc, #336]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800429a:	f107 0308 	add.w	r3, r7, #8
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	f107 0308 	add.w	r3, r7, #8
 80042a4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ac:	4b4f      	ldr	r3, [pc, #316]	; (80043ec <HAL_RCC_OscConfig+0x938>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d11a      	bne.n	80042ee <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b8:	4b4c      	ldr	r3, [pc, #304]	; (80043ec <HAL_RCC_OscConfig+0x938>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a4b      	ldr	r2, [pc, #300]	; (80043ec <HAL_RCC_OscConfig+0x938>)
 80042be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c4:	f7fc ffec 	bl	80012a0 <HAL_GetTick>
 80042c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042cc:	e009      	b.n	80042e2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ce:	f7fc ffe7 	bl	80012a0 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b64      	cmp	r3, #100	; 0x64
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e2e9      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e2:	4b42      	ldr	r3, [pc, #264]	; (80043ec <HAL_RCC_OscConfig+0x938>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0ef      	beq.n	80042ce <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ee:	1d3b      	adds	r3, r7, #4
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d106      	bne.n	8004306 <HAL_RCC_OscConfig+0x852>
 80042f8:	4b3a      	ldr	r3, [pc, #232]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	4a39      	ldr	r2, [pc, #228]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	6213      	str	r3, [r2, #32]
 8004304:	e02f      	b.n	8004366 <HAL_RCC_OscConfig+0x8b2>
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10c      	bne.n	800432a <HAL_RCC_OscConfig+0x876>
 8004310:	4b34      	ldr	r3, [pc, #208]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	4a33      	ldr	r2, [pc, #204]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	6213      	str	r3, [r2, #32]
 800431c:	4b31      	ldr	r3, [pc, #196]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	4a30      	ldr	r2, [pc, #192]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004322:	f023 0304 	bic.w	r3, r3, #4
 8004326:	6213      	str	r3, [r2, #32]
 8004328:	e01d      	b.n	8004366 <HAL_RCC_OscConfig+0x8b2>
 800432a:	1d3b      	adds	r3, r7, #4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b05      	cmp	r3, #5
 8004332:	d10c      	bne.n	800434e <HAL_RCC_OscConfig+0x89a>
 8004334:	4b2b      	ldr	r3, [pc, #172]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	4a2a      	ldr	r2, [pc, #168]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 800433a:	f043 0304 	orr.w	r3, r3, #4
 800433e:	6213      	str	r3, [r2, #32]
 8004340:	4b28      	ldr	r3, [pc, #160]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	4a27      	ldr	r2, [pc, #156]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	6213      	str	r3, [r2, #32]
 800434c:	e00b      	b.n	8004366 <HAL_RCC_OscConfig+0x8b2>
 800434e:	4b25      	ldr	r3, [pc, #148]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	4a24      	ldr	r2, [pc, #144]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	6213      	str	r3, [r2, #32]
 800435a:	4b22      	ldr	r3, [pc, #136]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	4a21      	ldr	r2, [pc, #132]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004360:	f023 0304 	bic.w	r3, r3, #4
 8004364:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004366:	1d3b      	adds	r3, r7, #4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d06b      	beq.n	8004448 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004370:	f7fc ff96 	bl	80012a0 <HAL_GetTick>
 8004374:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004378:	e00b      	b.n	8004392 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800437a:	f7fc ff91 	bl	80012a0 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	; 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e291      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
 8004392:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004396:	2202      	movs	r2, #2
 8004398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	fa93 f2a3 	rbit	r2, r3
 80043a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80043ae:	2202      	movs	r2, #2
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	fa93 f2a3 	rbit	r2, r3
 80043bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80043c0:	601a      	str	r2, [r3, #0]
  return result;
 80043c2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80043c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c8:	fab3 f383 	clz	r3, r3
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f043 0302 	orr.w	r3, r3, #2
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d109      	bne.n	80043f0 <HAL_RCC_OscConfig+0x93c>
 80043dc:	4b01      	ldr	r3, [pc, #4]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	e014      	b.n	800440c <HAL_RCC_OscConfig+0x958>
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000
 80043e8:	10908120 	.word	0x10908120
 80043ec:	40007000 	.word	0x40007000
 80043f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80043f4:	2202      	movs	r2, #2
 80043f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	fa93 f2a3 	rbit	r2, r3
 8004402:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	4bbb      	ldr	r3, [pc, #748]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004410:	2102      	movs	r1, #2
 8004412:	6011      	str	r1, [r2, #0]
 8004414:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	fa92 f1a2 	rbit	r1, r2
 800441e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004422:	6011      	str	r1, [r2, #0]
  return result;
 8004424:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004428:	6812      	ldr	r2, [r2, #0]
 800442a:	fab2 f282 	clz	r2, r2
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	f002 021f 	and.w	r2, r2, #31
 800443a:	2101      	movs	r1, #1
 800443c:	fa01 f202 	lsl.w	r2, r1, r2
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d099      	beq.n	800437a <HAL_RCC_OscConfig+0x8c6>
 8004446:	e063      	b.n	8004510 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004448:	f7fc ff2a 	bl	80012a0 <HAL_GetTick>
 800444c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004450:	e00b      	b.n	800446a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004452:	f7fc ff25 	bl	80012a0 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e225      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
 800446a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800446e:	2202      	movs	r2, #2
 8004470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004472:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	fa93 f2a3 	rbit	r2, r3
 800447c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004486:	2202      	movs	r2, #2
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	fa93 f2a3 	rbit	r2, r3
 8004494:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004498:	601a      	str	r2, [r3, #0]
  return result;
 800449a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800449e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a0:	fab3 f383 	clz	r3, r3
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	f043 0302 	orr.w	r3, r3, #2
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d102      	bne.n	80044ba <HAL_RCC_OscConfig+0xa06>
 80044b4:	4b90      	ldr	r3, [pc, #576]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	e00d      	b.n	80044d6 <HAL_RCC_OscConfig+0xa22>
 80044ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80044be:	2202      	movs	r2, #2
 80044c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	fa93 f2a3 	rbit	r2, r3
 80044cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	4b89      	ldr	r3, [pc, #548]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80044da:	2102      	movs	r1, #2
 80044dc:	6011      	str	r1, [r2, #0]
 80044de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	fa92 f1a2 	rbit	r1, r2
 80044e8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80044ec:	6011      	str	r1, [r2, #0]
  return result;
 80044ee:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80044f2:	6812      	ldr	r2, [r2, #0]
 80044f4:	fab2 f282 	clz	r2, r2
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	f002 021f 	and.w	r2, r2, #31
 8004504:	2101      	movs	r1, #1
 8004506:	fa01 f202 	lsl.w	r2, r1, r2
 800450a:	4013      	ands	r3, r2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1a0      	bne.n	8004452 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004510:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004514:	2b01      	cmp	r3, #1
 8004516:	d105      	bne.n	8004524 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004518:	4b77      	ldr	r3, [pc, #476]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	4a76      	ldr	r2, [pc, #472]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 800451e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004522:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004524:	1d3b      	adds	r3, r7, #4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 81c2 	beq.w	80048b4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004530:	4b71      	ldr	r3, [pc, #452]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 030c 	and.w	r3, r3, #12
 8004538:	2b08      	cmp	r3, #8
 800453a:	f000 819c 	beq.w	8004876 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800453e:	1d3b      	adds	r3, r7, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	2b02      	cmp	r3, #2
 8004546:	f040 8114 	bne.w	8004772 <HAL_RCC_OscConfig+0xcbe>
 800454a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800454e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004554:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	fa93 f2a3 	rbit	r2, r3
 800455e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004562:	601a      	str	r2, [r3, #0]
  return result;
 8004564:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004568:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456a:	fab3 f383 	clz	r3, r3
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004574:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	461a      	mov	r2, r3
 800457c:	2300      	movs	r3, #0
 800457e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7fc fe8e 	bl	80012a0 <HAL_GetTick>
 8004584:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004588:	e009      	b.n	800459e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458a:	f7fc fe89 	bl	80012a0 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e18b      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
 800459e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80045a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	fa93 f2a3 	rbit	r2, r3
 80045b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80045b6:	601a      	str	r2, [r3, #0]
  return result;
 80045b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80045bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045be:	fab3 f383 	clz	r3, r3
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d102      	bne.n	80045d8 <HAL_RCC_OscConfig+0xb24>
 80045d2:	4b49      	ldr	r3, [pc, #292]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	e01b      	b.n	8004610 <HAL_RCC_OscConfig+0xb5c>
 80045d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80045dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	fa93 f2a3 	rbit	r2, r3
 80045ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80045f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	fa93 f2a3 	rbit	r2, r3
 8004606:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	4b3a      	ldr	r3, [pc, #232]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004614:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004618:	6011      	str	r1, [r2, #0]
 800461a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	fa92 f1a2 	rbit	r1, r2
 8004624:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004628:	6011      	str	r1, [r2, #0]
  return result;
 800462a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	fab2 f282 	clz	r2, r2
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	f042 0220 	orr.w	r2, r2, #32
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	f002 021f 	and.w	r2, r2, #31
 8004640:	2101      	movs	r1, #1
 8004642:	fa01 f202 	lsl.w	r2, r1, r2
 8004646:	4013      	ands	r3, r2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d19e      	bne.n	800458a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800464c:	4b2a      	ldr	r3, [pc, #168]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004654:	1d3b      	adds	r3, r7, #4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800465a:	1d3b      	adds	r3, r7, #4
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	430b      	orrs	r3, r1
 8004662:	4925      	ldr	r1, [pc, #148]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 8004664:	4313      	orrs	r3, r2
 8004666:	604b      	str	r3, [r1, #4]
 8004668:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800466c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004672:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	fa93 f2a3 	rbit	r2, r3
 800467c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004680:	601a      	str	r2, [r3, #0]
  return result;
 8004682:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004686:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004688:	fab3 f383 	clz	r3, r3
 800468c:	b2db      	uxtb	r3, r3
 800468e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004692:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	461a      	mov	r2, r3
 800469a:	2301      	movs	r3, #1
 800469c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469e:	f7fc fdff 	bl	80012a0 <HAL_GetTick>
 80046a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046a6:	e009      	b.n	80046bc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a8:	f7fc fdfa 	bl	80012a0 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e0fc      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
 80046bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80046c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	fa93 f2a3 	rbit	r2, r3
 80046d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80046d4:	601a      	str	r2, [r3, #0]
  return result;
 80046d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80046da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046dc:	fab3 f383 	clz	r3, r3
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d105      	bne.n	80046fc <HAL_RCC_OscConfig+0xc48>
 80046f0:	4b01      	ldr	r3, [pc, #4]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	e01e      	b.n	8004734 <HAL_RCC_OscConfig+0xc80>
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004700:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004704:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004706:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	fa93 f2a3 	rbit	r2, r3
 8004710:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800471a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	fa93 f2a3 	rbit	r2, r3
 800472a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	4b63      	ldr	r3, [pc, #396]	; (80048c0 <HAL_RCC_OscConfig+0xe0c>)
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004738:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800473c:	6011      	str	r1, [r2, #0]
 800473e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	fa92 f1a2 	rbit	r1, r2
 8004748:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800474c:	6011      	str	r1, [r2, #0]
  return result;
 800474e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	fab2 f282 	clz	r2, r2
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	f042 0220 	orr.w	r2, r2, #32
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	f002 021f 	and.w	r2, r2, #31
 8004764:	2101      	movs	r1, #1
 8004766:	fa01 f202 	lsl.w	r2, r1, r2
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d09b      	beq.n	80046a8 <HAL_RCC_OscConfig+0xbf4>
 8004770:	e0a0      	b.n	80048b4 <HAL_RCC_OscConfig+0xe00>
 8004772:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004776:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800477a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	fa93 f2a3 	rbit	r2, r3
 8004786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800478a:	601a      	str	r2, [r3, #0]
  return result;
 800478c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004790:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004792:	fab3 f383 	clz	r3, r3
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800479c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	461a      	mov	r2, r3
 80047a4:	2300      	movs	r3, #0
 80047a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a8:	f7fc fd7a 	bl	80012a0 <HAL_GetTick>
 80047ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b0:	e009      	b.n	80047c6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b2:	f7fc fd75 	bl	80012a0 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e077      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
 80047c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	fa93 f2a3 	rbit	r2, r3
 80047da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047de:	601a      	str	r2, [r3, #0]
  return result;
 80047e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047e6:	fab3 f383 	clz	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d102      	bne.n	8004800 <HAL_RCC_OscConfig+0xd4c>
 80047fa:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <HAL_RCC_OscConfig+0xe0c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	e01b      	b.n	8004838 <HAL_RCC_OscConfig+0xd84>
 8004800:	f107 0320 	add.w	r3, r7, #32
 8004804:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480a:	f107 0320 	add.w	r3, r7, #32
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	fa93 f2a3 	rbit	r2, r3
 8004814:	f107 031c 	add.w	r3, r7, #28
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	f107 0318 	add.w	r3, r7, #24
 800481e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	f107 0318 	add.w	r3, r7, #24
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	fa93 f2a3 	rbit	r2, r3
 800482e:	f107 0314 	add.w	r3, r7, #20
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	4b22      	ldr	r3, [pc, #136]	; (80048c0 <HAL_RCC_OscConfig+0xe0c>)
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	f107 0210 	add.w	r2, r7, #16
 800483c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004840:	6011      	str	r1, [r2, #0]
 8004842:	f107 0210 	add.w	r2, r7, #16
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	fa92 f1a2 	rbit	r1, r2
 800484c:	f107 020c 	add.w	r2, r7, #12
 8004850:	6011      	str	r1, [r2, #0]
  return result;
 8004852:	f107 020c 	add.w	r2, r7, #12
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	fab2 f282 	clz	r2, r2
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	f042 0220 	orr.w	r2, r2, #32
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	f002 021f 	and.w	r2, r2, #31
 8004868:	2101      	movs	r1, #1
 800486a:	fa01 f202 	lsl.w	r2, r1, r2
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d19e      	bne.n	80047b2 <HAL_RCC_OscConfig+0xcfe>
 8004874:	e01e      	b.n	80048b4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004876:	1d3b      	adds	r3, r7, #4
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e018      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004884:	4b0e      	ldr	r3, [pc, #56]	; (80048c0 <HAL_RCC_OscConfig+0xe0c>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800488c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004890:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004894:	1d3b      	adds	r3, r7, #4
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	429a      	cmp	r2, r3
 800489c:	d108      	bne.n	80048b0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800489e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80048a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048a6:	1d3b      	adds	r3, r7, #4
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40021000 	.word	0x40021000

080048c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b09e      	sub	sp, #120	; 0x78
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e162      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048dc:	4b90      	ldr	r3, [pc, #576]	; (8004b20 <HAL_RCC_ClockConfig+0x25c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d910      	bls.n	800490c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ea:	4b8d      	ldr	r3, [pc, #564]	; (8004b20 <HAL_RCC_ClockConfig+0x25c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f023 0207 	bic.w	r2, r3, #7
 80048f2:	498b      	ldr	r1, [pc, #556]	; (8004b20 <HAL_RCC_ClockConfig+0x25c>)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fa:	4b89      	ldr	r3, [pc, #548]	; (8004b20 <HAL_RCC_ClockConfig+0x25c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d001      	beq.n	800490c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e14a      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004918:	4b82      	ldr	r3, [pc, #520]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	497f      	ldr	r1, [pc, #508]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004926:	4313      	orrs	r3, r2
 8004928:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80dc 	beq.w	8004af0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d13c      	bne.n	80049ba <HAL_RCC_ClockConfig+0xf6>
 8004940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004944:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004948:	fa93 f3a3 	rbit	r3, r3
 800494c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800494e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004950:	fab3 f383 	clz	r3, r3
 8004954:	b2db      	uxtb	r3, r3
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	d102      	bne.n	800496a <HAL_RCC_ClockConfig+0xa6>
 8004964:	4b6f      	ldr	r3, [pc, #444]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	e00f      	b.n	800498a <HAL_RCC_ClockConfig+0xc6>
 800496a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800496e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004970:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	667b      	str	r3, [r7, #100]	; 0x64
 8004978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800497c:	663b      	str	r3, [r7, #96]	; 0x60
 800497e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004980:	fa93 f3a3 	rbit	r3, r3
 8004984:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004986:	4b67      	ldr	r3, [pc, #412]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800498e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004990:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004992:	fa92 f2a2 	rbit	r2, r2
 8004996:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004998:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800499a:	fab2 f282 	clz	r2, r2
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	f042 0220 	orr.w	r2, r2, #32
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	f002 021f 	and.w	r2, r2, #31
 80049aa:	2101      	movs	r1, #1
 80049ac:	fa01 f202 	lsl.w	r2, r1, r2
 80049b0:	4013      	ands	r3, r2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d17b      	bne.n	8004aae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e0f3      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d13c      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x178>
 80049c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ca:	fa93 f3a3 	rbit	r3, r3
 80049ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80049d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d2:	fab3 f383 	clz	r3, r3
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d102      	bne.n	80049ec <HAL_RCC_ClockConfig+0x128>
 80049e6:	4b4f      	ldr	r3, [pc, #316]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	e00f      	b.n	8004a0c <HAL_RCC_ClockConfig+0x148>
 80049ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f4:	fa93 f3a3 	rbit	r3, r3
 80049f8:	647b      	str	r3, [r7, #68]	; 0x44
 80049fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a02:	fa93 f3a3 	rbit	r3, r3
 8004a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a08:	4b46      	ldr	r3, [pc, #280]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a10:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a14:	fa92 f2a2 	rbit	r2, r2
 8004a18:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a1c:	fab2 f282 	clz	r2, r2
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	f042 0220 	orr.w	r2, r2, #32
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	f002 021f 	and.w	r2, r2, #31
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d13a      	bne.n	8004aae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0b2      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x2de>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	fa93 f3a3 	rbit	r3, r3
 8004a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4a:	fab3 f383 	clz	r3, r3
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d102      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x1a0>
 8004a5e:	4b31      	ldr	r3, [pc, #196]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	e00d      	b.n	8004a80 <HAL_RCC_ClockConfig+0x1bc>
 8004a64:	2302      	movs	r3, #2
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	fa93 f3a3 	rbit	r3, r3
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a70:	2302      	movs	r3, #2
 8004a72:	623b      	str	r3, [r7, #32]
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	fa93 f3a3 	rbit	r3, r3
 8004a7a:	61fb      	str	r3, [r7, #28]
 8004a7c:	4b29      	ldr	r3, [pc, #164]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	2202      	movs	r2, #2
 8004a82:	61ba      	str	r2, [r7, #24]
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	fa92 f2a2 	rbit	r2, r2
 8004a8a:	617a      	str	r2, [r7, #20]
  return result;
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	fab2 f282 	clz	r2, r2
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	f042 0220 	orr.w	r2, r2, #32
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	f002 021f 	and.w	r2, r2, #31
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e079      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aae:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f023 0203 	bic.w	r2, r3, #3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	491a      	ldr	r1, [pc, #104]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ac0:	f7fc fbee 	bl	80012a0 <HAL_GetTick>
 8004ac4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac8:	f7fc fbea 	bl	80012a0 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e061      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ade:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 020c 	and.w	r2, r3, #12
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d1eb      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <HAL_RCC_ClockConfig+0x25c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d214      	bcs.n	8004b28 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afe:	4b08      	ldr	r3, [pc, #32]	; (8004b20 <HAL_RCC_ClockConfig+0x25c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 0207 	bic.w	r2, r3, #7
 8004b06:	4906      	ldr	r1, [pc, #24]	; (8004b20 <HAL_RCC_ClockConfig+0x25c>)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0e:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <HAL_RCC_ClockConfig+0x25c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e040      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x2de>
 8004b20:	40022000 	.word	0x40022000
 8004b24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b34:	4b1d      	ldr	r3, [pc, #116]	; (8004bac <HAL_RCC_ClockConfig+0x2e8>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	491a      	ldr	r1, [pc, #104]	; (8004bac <HAL_RCC_ClockConfig+0x2e8>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b52:	4b16      	ldr	r3, [pc, #88]	; (8004bac <HAL_RCC_ClockConfig+0x2e8>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4912      	ldr	r1, [pc, #72]	; (8004bac <HAL_RCC_ClockConfig+0x2e8>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b66:	f000 f829 	bl	8004bbc <HAL_RCC_GetSysClockFreq>
 8004b6a:	4601      	mov	r1, r0
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <HAL_RCC_ClockConfig+0x2e8>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b74:	22f0      	movs	r2, #240	; 0xf0
 8004b76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	fa92 f2a2 	rbit	r2, r2
 8004b7e:	60fa      	str	r2, [r7, #12]
  return result;
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	fab2 f282 	clz	r2, r2
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	40d3      	lsrs	r3, r2
 8004b8a:	4a09      	ldr	r2, [pc, #36]	; (8004bb0 <HAL_RCC_ClockConfig+0x2ec>)
 8004b8c:	5cd3      	ldrb	r3, [r2, r3]
 8004b8e:	fa21 f303 	lsr.w	r3, r1, r3
 8004b92:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <HAL_RCC_ClockConfig+0x2f0>)
 8004b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004b96:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <HAL_RCC_ClockConfig+0x2f4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fc fb3c 	bl	8001218 <HAL_InitTick>
  
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3778      	adds	r7, #120	; 0x78
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	080058d4 	.word	0x080058d4
 8004bb4:	20000030 	.word	0x20000030
 8004bb8:	20000034 	.word	0x20000034

08004bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b08b      	sub	sp, #44	; 0x2c
 8004bc0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004bd6:	4b29      	ldr	r3, [pc, #164]	; (8004c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d002      	beq.n	8004bec <HAL_RCC_GetSysClockFreq+0x30>
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d003      	beq.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x36>
 8004bea:	e03c      	b.n	8004c66 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bec:	4b24      	ldr	r3, [pc, #144]	; (8004c80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004bee:	623b      	str	r3, [r7, #32]
      break;
 8004bf0:	e03c      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004bf8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004bfc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	fa92 f2a2 	rbit	r2, r2
 8004c04:	607a      	str	r2, [r7, #4]
  return result;
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	fab2 f282 	clz	r2, r2
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	40d3      	lsrs	r3, r2
 8004c10:	4a1c      	ldr	r2, [pc, #112]	; (8004c84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c12:	5cd3      	ldrb	r3, [r2, r3]
 8004c14:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004c16:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	220f      	movs	r2, #15
 8004c20:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	fa92 f2a2 	rbit	r2, r2
 8004c28:	60fa      	str	r2, [r7, #12]
  return result;
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	fab2 f282 	clz	r2, r2
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	40d3      	lsrs	r3, r2
 8004c34:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c36:	5cd3      	ldrb	r3, [r2, r3]
 8004c38:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d008      	beq.n	8004c56 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c44:	4a0e      	ldr	r2, [pc, #56]	; (8004c80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
 8004c54:	e004      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	4a0c      	ldr	r2, [pc, #48]	; (8004c8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	623b      	str	r3, [r7, #32]
      break;
 8004c64:	e002      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c66:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c68:	623b      	str	r3, [r7, #32]
      break;
 8004c6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	372c      	adds	r7, #44	; 0x2c
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	007a1200 	.word	0x007a1200
 8004c84:	080058ec 	.word	0x080058ec
 8004c88:	080058fc 	.word	0x080058fc
 8004c8c:	003d0900 	.word	0x003d0900

08004c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c94:	4b03      	ldr	r3, [pc, #12]	; (8004ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c96:	681b      	ldr	r3, [r3, #0]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20000030 	.word	0x20000030

08004ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004cae:	f7ff ffef 	bl	8004c90 <HAL_RCC_GetHCLKFreq>
 8004cb2:	4601      	mov	r1, r0
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cbc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004cc0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	fa92 f2a2 	rbit	r2, r2
 8004cc8:	603a      	str	r2, [r7, #0]
  return result;
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	fab2 f282 	clz	r2, r2
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	40d3      	lsrs	r3, r2
 8004cd4:	4a04      	ldr	r2, [pc, #16]	; (8004ce8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004cd6:	5cd3      	ldrb	r3, [r2, r3]
 8004cd8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	080058e4 	.word	0x080058e4

08004cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004cf2:	f7ff ffcd 	bl	8004c90 <HAL_RCC_GetHCLKFreq>
 8004cf6:	4601      	mov	r1, r0
 8004cf8:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004d00:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004d04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	fa92 f2a2 	rbit	r2, r2
 8004d0c:	603a      	str	r2, [r7, #0]
  return result;
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	fab2 f282 	clz	r2, r2
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	40d3      	lsrs	r3, r2
 8004d18:	4a04      	ldr	r2, [pc, #16]	; (8004d2c <HAL_RCC_GetPCLK2Freq+0x40>)
 8004d1a:	5cd3      	ldrb	r3, [r2, r3]
 8004d1c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	080058e4 	.word	0x080058e4

08004d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b092      	sub	sp, #72	; 0x48
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80d0 	beq.w	8004eee <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d54:	4b8e      	ldr	r3, [pc, #568]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10e      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d60:	4b8b      	ldr	r3, [pc, #556]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	4a8a      	ldr	r2, [pc, #552]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	61d3      	str	r3, [r2, #28]
 8004d6c:	4b88      	ldr	r3, [pc, #544]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d74:	60bb      	str	r3, [r7, #8]
 8004d76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7e:	4b85      	ldr	r3, [pc, #532]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d118      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d8a:	4b82      	ldr	r3, [pc, #520]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a81      	ldr	r2, [pc, #516]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d96:	f7fc fa83 	bl	80012a0 <HAL_GetTick>
 8004d9a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d9c:	e008      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d9e:	f7fc fa7f 	bl	80012a0 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b64      	cmp	r3, #100	; 0x64
 8004daa:	d901      	bls.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e0ea      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db0:	4b78      	ldr	r3, [pc, #480]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0f0      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dbc:	4b74      	ldr	r3, [pc, #464]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d07d      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d076      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dda:	4b6d      	ldr	r3, [pc, #436]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004de8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	fa93 f3a3 	rbit	r3, r3
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004df4:	fab3 f383 	clz	r3, r3
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	4b66      	ldr	r3, [pc, #408]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	461a      	mov	r2, r3
 8004e04:	2301      	movs	r3, #1
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	fa93 f3a3 	rbit	r3, r3
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e18:	fab3 f383 	clz	r3, r3
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	461a      	mov	r2, r3
 8004e20:	4b5d      	ldr	r3, [pc, #372]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	461a      	mov	r2, r3
 8004e28:	2300      	movs	r3, #0
 8004e2a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e2c:	4a58      	ldr	r2, [pc, #352]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e30:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d045      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3c:	f7fc fa30 	bl	80012a0 <HAL_GetTick>
 8004e40:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e42:	e00a      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e44:	f7fc fa2c 	bl	80012a0 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e095      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	fa93 f3a3 	rbit	r3, r3
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
 8004e66:	2302      	movs	r3, #2
 8004e68:	623b      	str	r3, [r7, #32]
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	fa93 f3a3 	rbit	r3, r3
 8004e70:	61fb      	str	r3, [r7, #28]
  return result;
 8004e72:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e74:	fab3 f383 	clz	r3, r3
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	f043 0302 	orr.w	r3, r3, #2
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d102      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004e88:	4b41      	ldr	r3, [pc, #260]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	e007      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	fa93 f3a3 	rbit	r3, r3
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	4b3d      	ldr	r3, [pc, #244]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	613a      	str	r2, [r7, #16]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	fa92 f2a2 	rbit	r2, r2
 8004ea8:	60fa      	str	r2, [r7, #12]
  return result;
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	fab2 f282 	clz	r2, r2
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	f002 021f 	and.w	r2, r2, #31
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0bd      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004ec8:	4b31      	ldr	r3, [pc, #196]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	492e      	ldr	r1, [pc, #184]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004eda:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d105      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee2:	4b2b      	ldr	r3, [pc, #172]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	4a2a      	ldr	r2, [pc, #168]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eec:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d008      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004efa:	4b25      	ldr	r3, [pc, #148]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	f023 0203 	bic.w	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	4922      	ldr	r1, [pc, #136]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0320 	and.w	r3, r3, #32
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d008      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f18:	4b1d      	ldr	r3, [pc, #116]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	f023 0210 	bic.w	r2, r3, #16
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	491a      	ldr	r1, [pc, #104]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d008      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f36:	4b16      	ldr	r3, [pc, #88]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	4913      	ldr	r1, [pc, #76]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f54:	4b0e      	ldr	r3, [pc, #56]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	490b      	ldr	r1, [pc, #44]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d008      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004f72:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	4904      	ldr	r1, [pc, #16]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3748      	adds	r7, #72	; 0x48
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40007000 	.word	0x40007000
 8004f98:	10908100 	.word	0x10908100

08004f9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e07c      	b.n	80050a8 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7fb ffe9 	bl	8000fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fee:	d902      	bls.n	8004ff6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	e002      	b.n	8004ffc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ffa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005004:	d007      	beq.n	8005016 <HAL_SPI_Init+0x7a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800500e:	d002      	beq.n	8005016 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10b      	bne.n	8005036 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005026:	d903      	bls.n	8005030 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
 800502e:	e002      	b.n	8005036 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	ea42 0103 	orr.w	r1, r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	0c1b      	lsrs	r3, r3, #16
 8005076:	f003 0204 	and.w	r2, r3, #4
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005084:	431a      	orrs	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	ea42 0103 	orr.w	r1, r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	430a      	orrs	r2, r1
 8005096:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e040      	b.n	8005144 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fb ffc6 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2224      	movs	r2, #36	; 0x24
 80050dc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0201 	bic.w	r2, r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f82c 	bl	800514c <UART_SetConfig>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e022      	b.n	8005144 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f9a2 	bl	8005450 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800511a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800512a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fa29 	bl	8005594 <UART_CheckIdleState>
 8005142:	4603      	mov	r3, r0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005154:	2300      	movs	r3, #0
 8005156:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	4ba2      	ldr	r3, [pc, #648]	; (8005404 <UART_SetConfig+0x2b8>)
 800517c:	4013      	ands	r3, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	6939      	ldr	r1, [r7, #16]
 8005184:	430b      	orrs	r3, r1
 8005186:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	430a      	orrs	r2, r1
 80051c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a90      	ldr	r2, [pc, #576]	; (8005408 <UART_SetConfig+0x2bc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d121      	bne.n	8005210 <UART_SetConfig+0xc4>
 80051cc:	4b8f      	ldr	r3, [pc, #572]	; (800540c <UART_SetConfig+0x2c0>)
 80051ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d817      	bhi.n	8005208 <UART_SetConfig+0xbc>
 80051d8:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <UART_SetConfig+0x94>)
 80051da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051de:	bf00      	nop
 80051e0:	080051f1 	.word	0x080051f1
 80051e4:	080051fd 	.word	0x080051fd
 80051e8:	08005203 	.word	0x08005203
 80051ec:	080051f7 	.word	0x080051f7
 80051f0:	2300      	movs	r3, #0
 80051f2:	77fb      	strb	r3, [r7, #31]
 80051f4:	e01e      	b.n	8005234 <UART_SetConfig+0xe8>
 80051f6:	2302      	movs	r3, #2
 80051f8:	77fb      	strb	r3, [r7, #31]
 80051fa:	e01b      	b.n	8005234 <UART_SetConfig+0xe8>
 80051fc:	2304      	movs	r3, #4
 80051fe:	77fb      	strb	r3, [r7, #31]
 8005200:	e018      	b.n	8005234 <UART_SetConfig+0xe8>
 8005202:	2308      	movs	r3, #8
 8005204:	77fb      	strb	r3, [r7, #31]
 8005206:	e015      	b.n	8005234 <UART_SetConfig+0xe8>
 8005208:	2310      	movs	r3, #16
 800520a:	77fb      	strb	r3, [r7, #31]
 800520c:	bf00      	nop
 800520e:	e011      	b.n	8005234 <UART_SetConfig+0xe8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a7e      	ldr	r2, [pc, #504]	; (8005410 <UART_SetConfig+0x2c4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d102      	bne.n	8005220 <UART_SetConfig+0xd4>
 800521a:	2300      	movs	r3, #0
 800521c:	77fb      	strb	r3, [r7, #31]
 800521e:	e009      	b.n	8005234 <UART_SetConfig+0xe8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a7b      	ldr	r2, [pc, #492]	; (8005414 <UART_SetConfig+0x2c8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d102      	bne.n	8005230 <UART_SetConfig+0xe4>
 800522a:	2300      	movs	r3, #0
 800522c:	77fb      	strb	r3, [r7, #31]
 800522e:	e001      	b.n	8005234 <UART_SetConfig+0xe8>
 8005230:	2310      	movs	r3, #16
 8005232:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800523c:	f040 8082 	bne.w	8005344 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8005240:	7ffb      	ldrb	r3, [r7, #31]
 8005242:	2b08      	cmp	r3, #8
 8005244:	d85e      	bhi.n	8005304 <UART_SetConfig+0x1b8>
 8005246:	a201      	add	r2, pc, #4	; (adr r2, 800524c <UART_SetConfig+0x100>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	08005271 	.word	0x08005271
 8005250:	08005291 	.word	0x08005291
 8005254:	080052b1 	.word	0x080052b1
 8005258:	08005305 	.word	0x08005305
 800525c:	080052cd 	.word	0x080052cd
 8005260:	08005305 	.word	0x08005305
 8005264:	08005305 	.word	0x08005305
 8005268:	08005305 	.word	0x08005305
 800526c:	080052ed 	.word	0x080052ed
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005270:	f7ff fd1a 	bl	8004ca8 <HAL_RCC_GetPCLK1Freq>
 8005274:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	005a      	lsls	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	085b      	lsrs	r3, r3, #1
 8005280:	441a      	add	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	fbb2 f3f3 	udiv	r3, r2, r3
 800528a:	b29b      	uxth	r3, r3
 800528c:	61bb      	str	r3, [r7, #24]
        break;
 800528e:	e03c      	b.n	800530a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005290:	f7ff fd2c 	bl	8004cec <HAL_RCC_GetPCLK2Freq>
 8005294:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	005a      	lsls	r2, r3, #1
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	085b      	lsrs	r3, r3, #1
 80052a0:	441a      	add	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	61bb      	str	r3, [r7, #24]
        break;
 80052ae:	e02c      	b.n	800530a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	085b      	lsrs	r3, r3, #1
 80052b6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80052ba:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6852      	ldr	r2, [r2, #4]
 80052c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	61bb      	str	r3, [r7, #24]
        break;
 80052ca:	e01e      	b.n	800530a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052cc:	f7ff fc76 	bl	8004bbc <HAL_RCC_GetSysClockFreq>
 80052d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	005a      	lsls	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	085b      	lsrs	r3, r3, #1
 80052dc:	441a      	add	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	61bb      	str	r3, [r7, #24]
        break;
 80052ea:	e00e      	b.n	800530a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	085b      	lsrs	r3, r3, #1
 80052f2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fe:	b29b      	uxth	r3, r3
 8005300:	61bb      	str	r3, [r7, #24]
        break;
 8005302:	e002      	b.n	800530a <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	75fb      	strb	r3, [r7, #23]
        break;
 8005308:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2b0f      	cmp	r3, #15
 800530e:	d916      	bls.n	800533e <UART_SetConfig+0x1f2>
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005316:	d212      	bcs.n	800533e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	b29b      	uxth	r3, r3
 800531c:	f023 030f 	bic.w	r3, r3, #15
 8005320:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	085b      	lsrs	r3, r3, #1
 8005326:	b29b      	uxth	r3, r3
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	b29a      	uxth	r2, r3
 800532e:	897b      	ldrh	r3, [r7, #10]
 8005330:	4313      	orrs	r3, r2
 8005332:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	897a      	ldrh	r2, [r7, #10]
 800533a:	60da      	str	r2, [r3, #12]
 800533c:	e07d      	b.n	800543a <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	75fb      	strb	r3, [r7, #23]
 8005342:	e07a      	b.n	800543a <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8005344:	7ffb      	ldrb	r3, [r7, #31]
 8005346:	2b08      	cmp	r3, #8
 8005348:	d866      	bhi.n	8005418 <UART_SetConfig+0x2cc>
 800534a:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <UART_SetConfig+0x204>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005375 	.word	0x08005375
 8005354:	08005393 	.word	0x08005393
 8005358:	080053b1 	.word	0x080053b1
 800535c:	08005419 	.word	0x08005419
 8005360:	080053cd 	.word	0x080053cd
 8005364:	08005419 	.word	0x08005419
 8005368:	08005419 	.word	0x08005419
 800536c:	08005419 	.word	0x08005419
 8005370:	080053eb 	.word	0x080053eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005374:	f7ff fc98 	bl	8004ca8 <HAL_RCC_GetPCLK1Freq>
 8005378:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	085a      	lsrs	r2, r3, #1
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	441a      	add	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	b29b      	uxth	r3, r3
 800538e:	61bb      	str	r3, [r7, #24]
        break;
 8005390:	e045      	b.n	800541e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005392:	f7ff fcab 	bl	8004cec <HAL_RCC_GetPCLK2Freq>
 8005396:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	085a      	lsrs	r2, r3, #1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	441a      	add	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	61bb      	str	r3, [r7, #24]
        break;
 80053ae:	e036      	b.n	800541e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80053ba:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6852      	ldr	r2, [r2, #4]
 80053c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	61bb      	str	r3, [r7, #24]
        break;
 80053ca:	e028      	b.n	800541e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053cc:	f7ff fbf6 	bl	8004bbc <HAL_RCC_GetSysClockFreq>
 80053d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	085a      	lsrs	r2, r3, #1
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	441a      	add	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	61bb      	str	r3, [r7, #24]
        break;
 80053e8:	e019      	b.n	800541e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	085b      	lsrs	r3, r3, #1
 80053f0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	61bb      	str	r3, [r7, #24]
        break;
 8005400:	e00d      	b.n	800541e <UART_SetConfig+0x2d2>
 8005402:	bf00      	nop
 8005404:	efff69f3 	.word	0xefff69f3
 8005408:	40013800 	.word	0x40013800
 800540c:	40021000 	.word	0x40021000
 8005410:	40004400 	.word	0x40004400
 8005414:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	75fb      	strb	r3, [r7, #23]
        break;
 800541c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	2b0f      	cmp	r3, #15
 8005422:	d908      	bls.n	8005436 <UART_SetConfig+0x2ea>
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800542a:	d204      	bcs.n	8005436 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	60da      	str	r2, [r3, #12]
 8005434:	e001      	b.n	800543a <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005446:	7dfb      	ldrb	r3, [r7, #23]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3720      	adds	r7, #32
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01a      	beq.n	8005566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800554e:	d10a      	bne.n	8005566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	605a      	str	r2, [r3, #4]
  }
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af02      	add	r7, sp, #8
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80055a2:	f7fb fe7d 	bl	80012a0 <HAL_GetTick>
 80055a6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d10e      	bne.n	80055d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f82a 	bl	800561e <UART_WaitOnFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e020      	b.n	8005616 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d10e      	bne.n	8005600 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f814 	bl	800561e <UART_WaitOnFlagUntilTimeout>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e00a      	b.n	8005616 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	603b      	str	r3, [r7, #0]
 800562a:	4613      	mov	r3, r2
 800562c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800562e:	e05d      	b.n	80056ec <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005636:	d059      	beq.n	80056ec <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005638:	f7fb fe32 	bl	80012a0 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	429a      	cmp	r2, r3
 8005646:	d302      	bcc.n	800564e <UART_WaitOnFlagUntilTimeout+0x30>
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d11b      	bne.n	8005686 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800565c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0201 	bic.w	r2, r2, #1
 800566c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2220      	movs	r2, #32
 8005678:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e042      	b.n	800570c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d02b      	beq.n	80056ec <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800569e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a2:	d123      	bne.n	80056ec <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056ac:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0201 	bic.w	r2, r2, #1
 80056cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e00f      	b.n	800570c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69da      	ldr	r2, [r3, #28]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	4013      	ands	r3, r2
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	bf0c      	ite	eq
 80056fc:	2301      	moveq	r3, #1
 80056fe:	2300      	movne	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	461a      	mov	r2, r3
 8005704:	79fb      	ldrb	r3, [r7, #7]
 8005706:	429a      	cmp	r2, r3
 8005708:	d092      	beq.n	8005630 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <arm_pid_init_f32>:
 8005714:	edd0 6a08 	vldr	s13, [r0, #32]
 8005718:	edd0 7a06 	vldr	s15, [r0, #24]
 800571c:	ed90 7a07 	vldr	s14, [r0, #28]
 8005720:	edc0 6a02 	vstr	s13, [r0, #8]
 8005724:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005728:	ee36 6aa6 	vadd.f32	s12, s13, s13
 800572c:	eef1 7a67 	vneg.f32	s15, s15
 8005730:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005734:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005738:	ed80 7a00 	vstr	s14, [r0]
 800573c:	edc0 7a01 	vstr	s15, [r0, #4]
 8005740:	b119      	cbz	r1, 800574a <arm_pid_init_f32+0x36>
 8005742:	2300      	movs	r3, #0
 8005744:	60c3      	str	r3, [r0, #12]
 8005746:	6103      	str	r3, [r0, #16]
 8005748:	6143      	str	r3, [r0, #20]
 800574a:	4770      	bx	lr

0800574c <arm_sub_f32>:
 800574c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800574e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8005752:	d033      	beq.n	80057bc <arm_sub_f32+0x70>
 8005754:	f100 0610 	add.w	r6, r0, #16
 8005758:	f101 0510 	add.w	r5, r1, #16
 800575c:	f102 0410 	add.w	r4, r2, #16
 8005760:	4677      	mov	r7, lr
 8005762:	ed16 6a03 	vldr	s12, [r6, #-12]
 8005766:	ed15 4a03 	vldr	s8, [r5, #-12]
 800576a:	ed56 6a02 	vldr	s13, [r6, #-8]
 800576e:	ed55 4a02 	vldr	s9, [r5, #-8]
 8005772:	ed16 7a01 	vldr	s14, [r6, #-4]
 8005776:	ed15 5a01 	vldr	s10, [r5, #-4]
 800577a:	ed56 7a04 	vldr	s15, [r6, #-16]
 800577e:	ed55 5a04 	vldr	s11, [r5, #-16]
 8005782:	ee36 6a44 	vsub.f32	s12, s12, s8
 8005786:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800578a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800578e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005792:	3f01      	subs	r7, #1
 8005794:	ed04 6a03 	vstr	s12, [r4, #-12]
 8005798:	ed44 6a02 	vstr	s13, [r4, #-8]
 800579c:	ed04 7a01 	vstr	s14, [r4, #-4]
 80057a0:	ed44 7a04 	vstr	s15, [r4, #-16]
 80057a4:	f106 0610 	add.w	r6, r6, #16
 80057a8:	f105 0510 	add.w	r5, r5, #16
 80057ac:	f104 0410 	add.w	r4, r4, #16
 80057b0:	d1d7      	bne.n	8005762 <arm_sub_f32+0x16>
 80057b2:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80057b6:	4420      	add	r0, r4
 80057b8:	4421      	add	r1, r4
 80057ba:	4422      	add	r2, r4
 80057bc:	f013 0303 	ands.w	r3, r3, #3
 80057c0:	d009      	beq.n	80057d6 <arm_sub_f32+0x8a>
 80057c2:	ecf0 7a01 	vldmia	r0!, {s15}
 80057c6:	ecb1 7a01 	vldmia	r1!, {s14}
 80057ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057ce:	3b01      	subs	r3, #1
 80057d0:	ece2 7a01 	vstmia	r2!, {s15}
 80057d4:	d1f5      	bne.n	80057c2 <arm_sub_f32+0x76>
 80057d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057d8 <arm_mult_f32>:
 80057d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057da:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 80057de:	d033      	beq.n	8005848 <arm_mult_f32+0x70>
 80057e0:	f100 0610 	add.w	r6, r0, #16
 80057e4:	f101 0510 	add.w	r5, r1, #16
 80057e8:	f102 0410 	add.w	r4, r2, #16
 80057ec:	4677      	mov	r7, lr
 80057ee:	ed16 6a04 	vldr	s12, [r6, #-16]
 80057f2:	ed55 4a04 	vldr	s9, [r5, #-16]
 80057f6:	ed56 6a02 	vldr	s13, [r6, #-8]
 80057fa:	ed15 5a02 	vldr	s10, [r5, #-8]
 80057fe:	ed16 7a03 	vldr	s14, [r6, #-12]
 8005802:	ed55 5a03 	vldr	s11, [r5, #-12]
 8005806:	ed56 7a01 	vldr	s15, [r6, #-4]
 800580a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800580e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8005812:	ed04 6a04 	vstr	s12, [r4, #-16]
 8005816:	ed15 6a01 	vldr	s12, [r5, #-4]
 800581a:	ed44 6a02 	vstr	s13, [r4, #-8]
 800581e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005822:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005826:	3f01      	subs	r7, #1
 8005828:	ed04 7a03 	vstr	s14, [r4, #-12]
 800582c:	ed44 7a01 	vstr	s15, [r4, #-4]
 8005830:	f106 0610 	add.w	r6, r6, #16
 8005834:	f105 0510 	add.w	r5, r5, #16
 8005838:	f104 0410 	add.w	r4, r4, #16
 800583c:	d1d7      	bne.n	80057ee <arm_mult_f32+0x16>
 800583e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8005842:	4420      	add	r0, r4
 8005844:	4421      	add	r1, r4
 8005846:	4422      	add	r2, r4
 8005848:	f013 0303 	ands.w	r3, r3, #3
 800584c:	d009      	beq.n	8005862 <arm_mult_f32+0x8a>
 800584e:	ecf0 7a01 	vldmia	r0!, {s15}
 8005852:	ecb1 7a01 	vldmia	r1!, {s14}
 8005856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800585a:	3b01      	subs	r3, #1
 800585c:	ece2 7a01 	vstmia	r2!, {s15}
 8005860:	d1f5      	bne.n	800584e <arm_mult_f32+0x76>
 8005862:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005864 <__libc_init_array>:
 8005864:	b570      	push	{r4, r5, r6, lr}
 8005866:	4e0d      	ldr	r6, [pc, #52]	; (800589c <__libc_init_array+0x38>)
 8005868:	4c0d      	ldr	r4, [pc, #52]	; (80058a0 <__libc_init_array+0x3c>)
 800586a:	1ba4      	subs	r4, r4, r6
 800586c:	10a4      	asrs	r4, r4, #2
 800586e:	2500      	movs	r5, #0
 8005870:	42a5      	cmp	r5, r4
 8005872:	d109      	bne.n	8005888 <__libc_init_array+0x24>
 8005874:	4e0b      	ldr	r6, [pc, #44]	; (80058a4 <__libc_init_array+0x40>)
 8005876:	4c0c      	ldr	r4, [pc, #48]	; (80058a8 <__libc_init_array+0x44>)
 8005878:	f000 f820 	bl	80058bc <_init>
 800587c:	1ba4      	subs	r4, r4, r6
 800587e:	10a4      	asrs	r4, r4, #2
 8005880:	2500      	movs	r5, #0
 8005882:	42a5      	cmp	r5, r4
 8005884:	d105      	bne.n	8005892 <__libc_init_array+0x2e>
 8005886:	bd70      	pop	{r4, r5, r6, pc}
 8005888:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800588c:	4798      	blx	r3
 800588e:	3501      	adds	r5, #1
 8005890:	e7ee      	b.n	8005870 <__libc_init_array+0xc>
 8005892:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005896:	4798      	blx	r3
 8005898:	3501      	adds	r5, #1
 800589a:	e7f2      	b.n	8005882 <__libc_init_array+0x1e>
 800589c:	0800590c 	.word	0x0800590c
 80058a0:	0800590c 	.word	0x0800590c
 80058a4:	0800590c 	.word	0x0800590c
 80058a8:	08005910 	.word	0x08005910

080058ac <memset>:
 80058ac:	4402      	add	r2, r0
 80058ae:	4603      	mov	r3, r0
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d100      	bne.n	80058b6 <memset+0xa>
 80058b4:	4770      	bx	lr
 80058b6:	f803 1b01 	strb.w	r1, [r3], #1
 80058ba:	e7f9      	b.n	80058b0 <memset+0x4>

080058bc <_init>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr

080058c8 <_fini>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	bf00      	nop
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr
