
Interleaved_Boost.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ffc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006184  08006184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061bc  080061bc  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  080061bc  080061bc  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061bc  080061bc  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061bc  080061bc  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080061c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  2000003c  08006200  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08006200  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e7d  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002037  00000000  00000000  00030ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f90  00000000  00000000  00032f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e68  00000000  00000000  00033eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e47a  00000000  00000000  00034d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c4fb  00000000  00000000  00053192  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bd411  00000000  00000000  0005f68d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000e9  00000000  00000000  0011ca9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042e0  00000000  00000000  0011cb88  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000044e  00000000  00000000  00120e68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800616c 	.word	0x0800616c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	0800616c 	.word	0x0800616c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	0000      	movs	r0, r0
	...

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0e:	f001 f845 	bl	8001a9c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a12:	f000 f9a5 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a16:	f000 fd25 	bl	8001464 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a1a:	f000 fcfd 	bl	8001418 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a1e:	f000 fccb 	bl	80013b8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a22:	f000 f9fb 	bl	8000e1c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000a26:	f000 fa93 	bl	8000f50 <MX_ADC2_Init>
  MX_HRTIM1_Init();
 8000a2a:	f000 fb0b 	bl	8001044 <MX_HRTIM1_Init>
  MX_SPI1_Init();
 8000a2e:	f000 fc85 	bl	800133c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  GainADC1[0] =0.009766;
 8000a32:	4ba9      	ldr	r3, [pc, #676]	; (8000cd8 <main+0x2d0>)
 8000a34:	4aa9      	ldr	r2, [pc, #676]	; (8000cdc <main+0x2d4>)
 8000a36:	601a      	str	r2, [r3, #0]
  GainADC1[1] =0.009766;
 8000a38:	4ba7      	ldr	r3, [pc, #668]	; (8000cd8 <main+0x2d0>)
 8000a3a:	4aa8      	ldr	r2, [pc, #672]	; (8000cdc <main+0x2d4>)
 8000a3c:	605a      	str	r2, [r3, #4]
  GainADC1[2] =-0.009766*2.794;
 8000a3e:	4ba6      	ldr	r3, [pc, #664]	; (8000cd8 <main+0x2d0>)
 8000a40:	4aa7      	ldr	r2, [pc, #668]	; (8000ce0 <main+0x2d8>)
 8000a42:	609a      	str	r2, [r3, #8]
  GainADC1[3] =0.1*0.543;
 8000a44:	4ba4      	ldr	r3, [pc, #656]	; (8000cd8 <main+0x2d0>)
 8000a46:	4aa7      	ldr	r2, [pc, #668]	; (8000ce4 <main+0x2dc>)
 8000a48:	60da      	str	r2, [r3, #12]

  GainADC2[0] =-0.05156*1.2931;
 8000a4a:	4ba7      	ldr	r3, [pc, #668]	; (8000ce8 <main+0x2e0>)
 8000a4c:	4aa7      	ldr	r2, [pc, #668]	; (8000cec <main+0x2e4>)
 8000a4e:	601a      	str	r2, [r3, #0]
  GainADC2[1] =-0.05156*1.2931;		//1.2931 is the experimental gain multiplier found during calibration. Theoritical values must be checked.
 8000a50:	4ba5      	ldr	r3, [pc, #660]	; (8000ce8 <main+0x2e0>)
 8000a52:	4aa6      	ldr	r2, [pc, #664]	; (8000cec <main+0x2e4>)
 8000a54:	605a      	str	r2, [r3, #4]
  GainADC2[2] =0.09668;
 8000a56:	4ba4      	ldr	r3, [pc, #656]	; (8000ce8 <main+0x2e0>)
 8000a58:	4aa5      	ldr	r2, [pc, #660]	; (8000cf0 <main+0x2e8>)
 8000a5a:	609a      	str	r2, [r3, #8]



  PID_test.Kp=Kpgain;
 8000a5c:	4ba5      	ldr	r3, [pc, #660]	; (8000cf4 <main+0x2ec>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4aa5      	ldr	r2, [pc, #660]	; (8000cf8 <main+0x2f0>)
 8000a62:	6193      	str	r3, [r2, #24]
  PID_test.Ki=Kigain;
 8000a64:	4ba5      	ldr	r3, [pc, #660]	; (8000cfc <main+0x2f4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4aa3      	ldr	r2, [pc, #652]	; (8000cf8 <main+0x2f0>)
 8000a6a:	61d3      	str	r3, [r2, #28]
  PID_test.Kd=Kdgain;
 8000a6c:	4ba4      	ldr	r3, [pc, #656]	; (8000d00 <main+0x2f8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4aa1      	ldr	r2, [pc, #644]	; (8000cf8 <main+0x2f0>)
 8000a72:	6213      	str	r3, [r2, #32]
  arm_pid_init_f32(&PID_test,1);
 8000a74:	2101      	movs	r1, #1
 8000a76:	48a0      	ldr	r0, [pc, #640]	; (8000cf8 <main+0x2f0>)
 8000a78:	f005 faa4 	bl	8005fc4 <arm_pid_init_f32>
  HAL_HRTIM_WaveformCountStart(&hhrtim1 , HRTIM_TIMERID_MASTER | HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_B); //Launch simultaneously HRTIM Master timer, Timer A, and Timer B
 8000a7c:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8000a80:	48a0      	ldr	r0, [pc, #640]	; (8000d04 <main+0x2fc>)
 8000a82:	f003 f8e9 	bl	8003c58 <HAL_HRTIM_WaveformCountStart>
  HAL_HRTIM_WaveformOutputStart(&hhrtim1 , HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TB1 | HRTIM_OUTPUT_TB2); //Once timers launched, output are released simultaneously.
 8000a86:	210f      	movs	r1, #15
 8000a88:	489e      	ldr	r0, [pc, #632]	; (8000d04 <main+0x2fc>)
 8000a8a:	f003 f8b8 	bl	8003bfe <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_UpdateEnable(&hhrtim1, HRTIM_TIMERUPDATE_A | HRTIM_TIMERUPDATE_B);
 8000a8e:	2106      	movs	r1, #6
 8000a90:	489c      	ldr	r0, [pc, #624]	; (8000d04 <main+0x2fc>)
 8000a92:	f003 f90c 	bl	8003cae <HAL_HRTIM_UpdateEnable>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);  			//IMPORTANT GROUND TO NEUTRAL CONNECTION MUST BE ENABLED IN BOOST MODE !
 8000a96:	2101      	movs	r1, #1
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f002 fd10 	bl	80034c0 <HAL_GPIO_TogglePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, valuesADC1, 4);
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	4999      	ldr	r1, [pc, #612]	; (8000d08 <main+0x300>)
 8000aa4:	4899      	ldr	r0, [pc, #612]	; (8000d0c <main+0x304>)
 8000aa6:	f001 fa0f 	bl	8001ec8 <HAL_ADC_Start_DMA>
	  HAL_ADC_Stop_DMA(&hadc1);
 8000aaa:	4898      	ldr	r0, [pc, #608]	; (8000d0c <main+0x304>)
 8000aac:	f001 fae6 	bl	800207c <HAL_ADC_Stop_DMA>
	  HAL_ADC_Start_DMA(&hadc2, valuesADC2, 3);
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	4997      	ldr	r1, [pc, #604]	; (8000d10 <main+0x308>)
 8000ab4:	4897      	ldr	r0, [pc, #604]	; (8000d14 <main+0x30c>)
 8000ab6:	f001 fa07 	bl	8001ec8 <HAL_ADC_Start_DMA>
	  HAL_ADC_Stop_DMA(&hadc2);
 8000aba:	4896      	ldr	r0, [pc, #600]	; (8000d14 <main+0x30c>)
 8000abc:	f001 fade 	bl	800207c <HAL_ADC_Stop_DMA>
	  convertADC1[0] = (float32_t)valuesADC1[0];
 8000ac0:	4b91      	ldr	r3, [pc, #580]	; (8000d08 <main+0x300>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	ee07 3a90 	vmov	s15, r3
 8000ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000acc:	4b92      	ldr	r3, [pc, #584]	; (8000d18 <main+0x310>)
 8000ace:	edc3 7a00 	vstr	s15, [r3]
	  convertADC1[1] = (float32_t)valuesADC1[1];
 8000ad2:	4b8d      	ldr	r3, [pc, #564]	; (8000d08 <main+0x300>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	ee07 3a90 	vmov	s15, r3
 8000ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ade:	4b8e      	ldr	r3, [pc, #568]	; (8000d18 <main+0x310>)
 8000ae0:	edc3 7a01 	vstr	s15, [r3, #4]
	  convertADC1[2] = (float32_t)valuesADC1[2];
 8000ae4:	4b88      	ldr	r3, [pc, #544]	; (8000d08 <main+0x300>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	ee07 3a90 	vmov	s15, r3
 8000aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000af0:	4b89      	ldr	r3, [pc, #548]	; (8000d18 <main+0x310>)
 8000af2:	edc3 7a02 	vstr	s15, [r3, #8]
	  convertADC1[3] = (float32_t)valuesADC1[3];
 8000af6:	4b84      	ldr	r3, [pc, #528]	; (8000d08 <main+0x300>)
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	ee07 3a90 	vmov	s15, r3
 8000afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b02:	4b85      	ldr	r3, [pc, #532]	; (8000d18 <main+0x310>)
 8000b04:	edc3 7a03 	vstr	s15, [r3, #12]
	  convertADC2[0] = (float32_t)valuesADC2[0];
 8000b08:	4b81      	ldr	r3, [pc, #516]	; (8000d10 <main+0x308>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	ee07 3a90 	vmov	s15, r3
 8000b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b14:	4b81      	ldr	r3, [pc, #516]	; (8000d1c <main+0x314>)
 8000b16:	edc3 7a00 	vstr	s15, [r3]
	  convertADC2[1] = (float32_t)valuesADC2[1];
 8000b1a:	4b7d      	ldr	r3, [pc, #500]	; (8000d10 <main+0x308>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	ee07 3a90 	vmov	s15, r3
 8000b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b26:	4b7d      	ldr	r3, [pc, #500]	; (8000d1c <main+0x314>)
 8000b28:	edc3 7a01 	vstr	s15, [r3, #4]
	  convertADC2[2] = (float32_t)valuesADC2[2];
 8000b2c:	4b78      	ldr	r3, [pc, #480]	; (8000d10 <main+0x308>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	ee07 3a90 	vmov	s15, r3
 8000b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b38:	4b78      	ldr	r3, [pc, #480]	; (8000d1c <main+0x314>)
 8000b3a:	edc3 7a02 	vstr	s15, [r3, #8]
	  arm_sub_f32(convertADC1, offsetADC1, raw_offsetADC1, 4);
 8000b3e:	2304      	movs	r3, #4
 8000b40:	4a77      	ldr	r2, [pc, #476]	; (8000d20 <main+0x318>)
 8000b42:	4978      	ldr	r1, [pc, #480]	; (8000d24 <main+0x31c>)
 8000b44:	4874      	ldr	r0, [pc, #464]	; (8000d18 <main+0x310>)
 8000b46:	f005 fa59 	bl	8005ffc <arm_sub_f32>
	  arm_sub_f32(convertADC2, offsetADC2, raw_offsetADC2, 3);
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	4a76      	ldr	r2, [pc, #472]	; (8000d28 <main+0x320>)
 8000b4e:	4977      	ldr	r1, [pc, #476]	; (8000d2c <main+0x324>)
 8000b50:	4872      	ldr	r0, [pc, #456]	; (8000d1c <main+0x314>)
 8000b52:	f005 fa53 	bl	8005ffc <arm_sub_f32>
	  arm_mult_f32(raw_offsetADC1, GainADC1, ValuesADC1, 4);
 8000b56:	2304      	movs	r3, #4
 8000b58:	4a75      	ldr	r2, [pc, #468]	; (8000d30 <main+0x328>)
 8000b5a:	495f      	ldr	r1, [pc, #380]	; (8000cd8 <main+0x2d0>)
 8000b5c:	4870      	ldr	r0, [pc, #448]	; (8000d20 <main+0x318>)
 8000b5e:	f005 fa93 	bl	8006088 <arm_mult_f32>
	  arm_mult_f32(raw_offsetADC2, GainADC2, ValuesADC2, 3);
 8000b62:	2303      	movs	r3, #3
 8000b64:	4a73      	ldr	r2, [pc, #460]	; (8000d34 <main+0x32c>)
 8000b66:	4960      	ldr	r1, [pc, #384]	; (8000ce8 <main+0x2e0>)
 8000b68:	486f      	ldr	r0, [pc, #444]	; (8000d28 <main+0x320>)
 8000b6a:	f005 fa8d 	bl	8006088 <arm_mult_f32>
	  arm_sub_f32(&ref, &ValuesADC2[2], &error_pid,1);			//CALCULATING THE ERROR BASED ON THE REFERENCE
 8000b6e:	2301      	movs	r3, #1
 8000b70:	4a71      	ldr	r2, [pc, #452]	; (8000d38 <main+0x330>)
 8000b72:	4972      	ldr	r1, [pc, #456]	; (8000d3c <main+0x334>)
 8000b74:	4872      	ldr	r0, [pc, #456]	; (8000d40 <main+0x338>)
 8000b76:	f005 fa41 	bl	8005ffc <arm_sub_f32>
	  rslt_pid = arm_pid_f32(&PID_test, 0.01*error_pid);		//PID CALCULATIONS
 8000b7a:	4b6f      	ldr	r3, [pc, #444]	; (8000d38 <main+0x330>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fc86 	bl	8000490 <__aeabi_f2d>
 8000b84:	a352      	add	r3, pc, #328	; (adr r3, 8000cd0 <main+0x2c8>)
 8000b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b8a:	f7ff fcd9 	bl	8000540 <__aeabi_dmul>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	460c      	mov	r4, r1
 8000b92:	4618      	mov	r0, r3
 8000b94:	4621      	mov	r1, r4
 8000b96:	f7ff fee5 	bl	8000964 <__aeabi_d2f>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	4b56      	ldr	r3, [pc, #344]	; (8000cf8 <main+0x2f0>)
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	60ba      	str	r2, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	ed93 7a00 	vldr	s14, [r3]
 8000ba8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bac:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	edd3 6a01 	vldr	s13, [r3, #4]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	edd3 6a02 	vldr	s13, [r3, #8]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	edd3 7a04 	vldr	s15, [r3, #16]
 8000bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be2:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	68da      	ldr	r2, [r3, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a51      	ldr	r2, [pc, #324]	; (8000d44 <main+0x33c>)
 8000bfe:	6013      	str	r3, [r2, #0]
	  pwm = PWM_RESOLUTION*rslt_pid;							//PID OUTPUT CONDITIONNING
 8000c00:	4b50      	ldr	r3, [pc, #320]	; (8000d44 <main+0x33c>)
 8000c02:	edd3 7a00 	vldr	s15, [r3]
 8000c06:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8000d48 <main+0x340>
 8000c0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c0e:	4b4f      	ldr	r3, [pc, #316]	; (8000d4c <main+0x344>)
 8000c10:	edc3 7a00 	vstr	s15, [r3]

	  if (pwm > HIGH_DUTY)										//SATURATION CONDITIONS TO AVOID DIVERGENCE.
 8000c14:	4b4d      	ldr	r3, [pc, #308]	; (8000d4c <main+0x344>)
 8000c16:	edd3 7a00 	vldr	s15, [r3]
 8000c1a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8000d50 <main+0x348>
 8000c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c26:	dd14      	ble.n	8000c52 <main+0x24a>
	  {
		  dutyA = HIGH_DUTY;
 8000c28:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <main+0x34c>)
 8000c2a:	f44f 7290 	mov.w	r2, #288	; 0x120
 8000c2e:	801a      	strh	r2, [r3, #0]
		  dutyB = HIGH_DUTY;
 8000c30:	4b49      	ldr	r3, [pc, #292]	; (8000d58 <main+0x350>)
 8000c32:	f44f 7290 	mov.w	r2, #288	; 0x120
 8000c36:	801a      	strh	r2, [r3, #0]
		  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0X0, HRTIM_COMPAREUNIT_1, dutyA);
 8000c38:	4b46      	ldr	r3, [pc, #280]	; (8000d54 <main+0x34c>)
 8000c3a:	881a      	ldrh	r2, [r3, #0]
 8000c3c:	4b31      	ldr	r3, [pc, #196]	; (8000d04 <main+0x2fc>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0X1, HRTIM_COMPAREUNIT_1, dutyB);
 8000c44:	4b44      	ldr	r3, [pc, #272]	; (8000d58 <main+0x350>)
 8000c46:	881a      	ldrh	r2, [r3, #0]
 8000c48:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <main+0x2fc>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8000c50:	e726      	b.n	8000aa0 <main+0x98>
	  }
	  else if (pwm < LOW_DUTY)
 8000c52:	4b3e      	ldr	r3, [pc, #248]	; (8000d4c <main+0x344>)
 8000c54:	edd3 7a00 	vldr	s15, [r3]
 8000c58:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000d5c <main+0x354>
 8000c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c64:	d512      	bpl.n	8000c8c <main+0x284>
	  {
		  dutyA = LOW_DUTY;
 8000c66:	4b3b      	ldr	r3, [pc, #236]	; (8000d54 <main+0x34c>)
 8000c68:	2220      	movs	r2, #32
 8000c6a:	801a      	strh	r2, [r3, #0]
		  dutyB = LOW_DUTY;
 8000c6c:	4b3a      	ldr	r3, [pc, #232]	; (8000d58 <main+0x350>)
 8000c6e:	2220      	movs	r2, #32
 8000c70:	801a      	strh	r2, [r3, #0]
		  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0X0, HRTIM_COMPAREUNIT_1, dutyA);
 8000c72:	4b38      	ldr	r3, [pc, #224]	; (8000d54 <main+0x34c>)
 8000c74:	881a      	ldrh	r2, [r3, #0]
 8000c76:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <main+0x2fc>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0X1, HRTIM_COMPAREUNIT_1, dutyB);
 8000c7e:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <main+0x350>)
 8000c80:	881a      	ldrh	r2, [r3, #0]
 8000c82:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <main+0x2fc>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8000c8a:	e709      	b.n	8000aa0 <main+0x98>
	  }
	  else
	  {
		  dutyA = (uint16_t)pwm;
 8000c8c:	4b2f      	ldr	r3, [pc, #188]	; (8000d4c <main+0x344>)
 8000c8e:	edd3 7a00 	vldr	s15, [r3]
 8000c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c96:	ee17 3a90 	vmov	r3, s15
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <main+0x34c>)
 8000c9e:	801a      	strh	r2, [r3, #0]
		  dutyB = (uint16_t)pwm;
 8000ca0:	4b2a      	ldr	r3, [pc, #168]	; (8000d4c <main+0x344>)
 8000ca2:	edd3 7a00 	vldr	s15, [r3]
 8000ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000caa:	ee17 3a90 	vmov	r3, s15
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	4b29      	ldr	r3, [pc, #164]	; (8000d58 <main+0x350>)
 8000cb2:	801a      	strh	r2, [r3, #0]
		  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0X0, HRTIM_COMPAREUNIT_1, dutyA);
 8000cb4:	4b27      	ldr	r3, [pc, #156]	; (8000d54 <main+0x34c>)
 8000cb6:	881a      	ldrh	r2, [r3, #0]
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <main+0x2fc>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0X1, HRTIM_COMPAREUNIT_1, dutyB);
 8000cc0:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <main+0x350>)
 8000cc2:	881a      	ldrh	r2, [r3, #0]
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <main+0x2fc>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	  HAL_ADC_Start_DMA(&hadc1, valuesADC1, 4);
 8000ccc:	e6e8      	b.n	8000aa0 <main+0x98>
 8000cce:	bf00      	nop
 8000cd0:	47ae147b 	.word	0x47ae147b
 8000cd4:	3f847ae1 	.word	0x3f847ae1
 8000cd8:	200000c0 	.word	0x200000c0
 8000cdc:	3c200193 	.word	0x3c200193
 8000ce0:	bcdf8751 	.word	0xbcdf8751
 8000ce4:	3d5e69ad 	.word	0x3d5e69ad
 8000ce8:	200003c4 	.word	0x200003c4
 8000cec:	bd888b74 	.word	0xbd888b74
 8000cf0:	3dc6002a 	.word	0x3dc6002a
 8000cf4:	20000004 	.word	0x20000004
 8000cf8:	200003dc 	.word	0x200003dc
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000058 	.word	0x20000058
 8000d04:	20000140 	.word	0x20000140
 8000d08:	200000d0 	.word	0x200000d0
 8000d0c:	200000f0 	.word	0x200000f0
 8000d10:	20000064 	.word	0x20000064
 8000d14:	20000070 	.word	0x20000070
 8000d18:	200003b4 	.word	0x200003b4
 8000d1c:	20000280 	.word	0x20000280
 8000d20:	20000270 	.word	0x20000270
 8000d24:	2000000c 	.word	0x2000000c
 8000d28:	2000021c 	.word	0x2000021c
 8000d2c:	2000001c 	.word	0x2000001c
 8000d30:	200000e0 	.word	0x200000e0
 8000d34:	200003d0 	.word	0x200003d0
 8000d38:	20000060 	.word	0x20000060
 8000d3c:	200003d8 	.word	0x200003d8
 8000d40:	20000000 	.word	0x20000000
 8000d44:	2000026c 	.word	0x2000026c
 8000d48:	43a00000 	.word	0x43a00000
 8000d4c:	2000002c 	.word	0x2000002c
 8000d50:	43900000 	.word	0x43900000
 8000d54:	20000028 	.word	0x20000028
 8000d58:	2000002a 	.word	0x2000002a
 8000d5c:	42000000 	.word	0x42000000

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b096      	sub	sp, #88	; 0x58
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d6a:	2228      	movs	r2, #40	; 0x28
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f005 f9f4 	bl	800615c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d84:	463b      	mov	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]
 8000d92:	615a      	str	r2, [r3, #20]
 8000d94:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d96:	2302      	movs	r3, #2
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9e:	2310      	movs	r3, #16
 8000da0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da2:	2302      	movs	r3, #2
 8000da4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000da6:	2300      	movs	r3, #0
 8000da8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000daa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000dae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000db4:	4618      	mov	r0, r3
 8000db6:	f003 fad5 	bl	8004364 <HAL_RCC_OscConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000dc0:	f000 fbb8 	bl	8001534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	2102      	movs	r1, #2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f004 f9c7 	bl	8005174 <HAL_RCC_ClockConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000dec:	f000 fba2 	bl	8001534 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_ADC12;
 8000df0:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000df4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_HCLK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e00:	463b      	mov	r3, r7
 8000e02:	4618      	mov	r0, r3
 8000e04:	f004 fbec 	bl	80055e0 <HAL_RCCEx_PeriphCLKConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000e0e:	f000 fb91 	bl	8001534 <Error_Handler>
  }
}
 8000e12:	bf00      	nop
 8000e14:	3758      	adds	r7, #88	; 0x58
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
 8000e3c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e3e:	4b43      	ldr	r3, [pc, #268]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000e40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e46:	4b41      	ldr	r3, [pc, #260]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e4c:	4b3f      	ldr	r3, [pc, #252]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e52:	4b3e      	ldr	r3, [pc, #248]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e58:	4b3c      	ldr	r3, [pc, #240]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e5e:	4b3b      	ldr	r3, [pc, #236]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e66:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e6c:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e72:	4b36      	ldr	r3, [pc, #216]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000e78:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e7e:	4b33      	ldr	r3, [pc, #204]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e86:	4b31      	ldr	r3, [pc, #196]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000e88:	2204      	movs	r2, #4
 8000e8a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e8c:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e92:	4b2e      	ldr	r3, [pc, #184]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e98:	482c      	ldr	r0, [pc, #176]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000e9a:	f000 fe83 	bl	8001ba4 <HAL_ADC_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ea4:	f000 fb46 	bl	8001534 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4826      	ldr	r0, [pc, #152]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000eb4:	f001 fc00 	bl	80026b8 <HAL_ADCEx_MultiModeConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000ebe:	f000 fb39 	bl	8001534 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ec2:	2306      	movs	r3, #6
 8000ec4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	4619      	mov	r1, r3
 8000ede:	481b      	ldr	r0, [pc, #108]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000ee0:	f001 f928 	bl	8002134 <HAL_ADC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000eea:	f000 fb23 	bl	8001534 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000eee:	2307      	movs	r3, #7
 8000ef0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000efc:	f001 f91a 	bl	8002134 <HAL_ADC_ConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000f06:	f000 fb15 	bl	8001534 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	480d      	ldr	r0, [pc, #52]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000f18:	f001 f90c 	bl	8002134 <HAL_ADC_ConfigChannel>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000f22:	f000 fb07 	bl	8001534 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f26:	2309      	movs	r3, #9
 8000f28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4806      	ldr	r0, [pc, #24]	; (8000f4c <MX_ADC1_Init+0x130>)
 8000f34:	f001 f8fe 	bl	8002134 <HAL_ADC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8000f3e:	f000 faf9 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000f0 	.word	0x200000f0

08000f50 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f56:	463b      	mov	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
 8000f64:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f66:	4b35      	ldr	r3, [pc, #212]	; (800103c <MX_ADC2_Init+0xec>)
 8000f68:	4a35      	ldr	r2, [pc, #212]	; (8001040 <MX_ADC2_Init+0xf0>)
 8000f6a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f6c:	4b33      	ldr	r3, [pc, #204]	; (800103c <MX_ADC2_Init+0xec>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f72:	4b32      	ldr	r3, [pc, #200]	; (800103c <MX_ADC2_Init+0xec>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f78:	4b30      	ldr	r3, [pc, #192]	; (800103c <MX_ADC2_Init+0xec>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f7e:	4b2f      	ldr	r3, [pc, #188]	; (800103c <MX_ADC2_Init+0xec>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f84:	4b2d      	ldr	r3, [pc, #180]	; (800103c <MX_ADC2_Init+0xec>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f8c:	4b2b      	ldr	r3, [pc, #172]	; (800103c <MX_ADC2_Init+0xec>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f92:	4b2a      	ldr	r3, [pc, #168]	; (800103c <MX_ADC2_Init+0xec>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f98:	4b28      	ldr	r3, [pc, #160]	; (800103c <MX_ADC2_Init+0xec>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 8000f9e:	4b27      	ldr	r3, [pc, #156]	; (800103c <MX_ADC2_Init+0xec>)
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <MX_ADC2_Init+0xec>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <MX_ADC2_Init+0xec>)
 8000fae:	2204      	movs	r2, #4
 8000fb0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <MX_ADC2_Init+0xec>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fb8:	4b20      	ldr	r3, [pc, #128]	; (800103c <MX_ADC2_Init+0xec>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fbe:	481f      	ldr	r0, [pc, #124]	; (800103c <MX_ADC2_Init+0xec>)
 8000fc0:	f000 fdf0 	bl	8001ba4 <HAL_ADC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000fca:	f000 fab3 	bl	8001534 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4814      	ldr	r0, [pc, #80]	; (800103c <MX_ADC2_Init+0xec>)
 8000fec:	f001 f8a2 	bl	8002134 <HAL_ADC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000ff6:	f000 fa9d 	bl	8001534 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	4619      	mov	r1, r3
 8001006:	480d      	ldr	r0, [pc, #52]	; (800103c <MX_ADC2_Init+0xec>)
 8001008:	f001 f894 	bl	8002134 <HAL_ADC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8001012:	f000 fa8f 	bl	8001534 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001016:	230b      	movs	r3, #11
 8001018:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800101a:	2303      	movs	r3, #3
 800101c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <MX_ADC2_Init+0xec>)
 8001024:	f001 f886 	bl	8002134 <HAL_ADC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 800102e:	f000 fa81 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000070 	.word	0x20000070
 8001040:	50000100 	.word	0x50000100

08001044 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b0ae      	sub	sp, #184	; 0xb8
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800104a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001058:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800105c:	2254      	movs	r2, #84	; 0x54
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f005 f87b 	bl	800615c <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8001066:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 8001072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001076:	2224      	movs	r2, #36	; 0x24
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f005 f86e 	bl	800615c <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2220      	movs	r2, #32
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f005 f868 	bl	800615c <memset>
  /* USER CODE BEGIN HRTIM1_Init 1 */

 //Define the duty cycle variable duty must be below comprised between 0 and 320 in the actual configuration.

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 800108c:	4ba8      	ldr	r3, [pc, #672]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 800108e:	4aa9      	ldr	r2, [pc, #676]	; (8001334 <MX_HRTIM1_Init+0x2f0>)
 8001090:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001092:	4ba7      	ldr	r3, [pc, #668]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001098:	4ba5      	ldr	r3, [pc, #660]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 800109e:	48a4      	ldr	r0, [pc, #656]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 80010a0:	f002 fa28 	bl	80034f4 <HAL_HRTIM_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_HRTIM1_Init+0x6a>
  {
    Error_Handler();
 80010aa:	f000 fa43 	bl	8001534 <Error_Handler>
  }
  pTimeBaseCfg.Period = 320;
 80010ae:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 80010bc:	2305      	movs	r3, #5
 80010be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80010c2:	2308      	movs	r3, #8
 80010c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 80010c8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80010cc:	461a      	mov	r2, r3
 80010ce:	2105      	movs	r1, #5
 80010d0:	4897      	ldr	r0, [pc, #604]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 80010d2:	f002 fadb 	bl	800368c <HAL_HRTIM_TimeBaseConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_HRTIM1_Init+0x9c>
  {
    Error_Handler();
 80010dc:	f000 fa2a 	bl	8001534 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.DMASrcAddress = 0x0000;
 80010e8:	2300      	movs	r3, #0
 80010ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.DMADstAddress = 0x0000;
 80010ec:	2300      	movs	r3, #0
 80010ee:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DMASize = 0x1;
 80010f0:	2301      	movs	r3, #1
 80010f2:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80010f4:	2300      	movs	r3, #0
 80010f6:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80010f8:	2300      	movs	r3, #0
 80010fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80010fc:	2300      	movs	r3, #0
 80010fe:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001100:	2300      	movs	r3, #0
 8001102:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001104:	2300      	movs	r3, #0
 8001106:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001108:	2300      	movs	r3, #0
 800110a:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8001118:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800111c:	461a      	mov	r2, r3
 800111e:	2105      	movs	r1, #5
 8001120:	4883      	ldr	r0, [pc, #524]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 8001122:	f002 fadb 	bl	80036dc <HAL_HRTIM_WaveformTimerConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_HRTIM1_Init+0xec>
  {
    Error_Handler();
 800112c:	f000 fa02 	bl	8001534 <Error_Handler>
  }
  pCompareCfg.CompareValue = 160;
 8001130:	23a0      	movs	r3, #160	; 0xa0
 8001132:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001134:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001138:	2202      	movs	r2, #2
 800113a:	2105      	movs	r1, #5
 800113c:	487c      	ldr	r0, [pc, #496]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 800113e:	f002 fbbf 	bl	80038c0 <HAL_HRTIM_WaveformCompareConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_HRTIM1_Init+0x108>
  {
    Error_Handler();
 8001148:	f000 f9f4 	bl	8001534 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 800114c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001150:	461a      	mov	r2, r3
 8001152:	2100      	movs	r1, #0
 8001154:	4876      	ldr	r0, [pc, #472]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 8001156:	f002 fa99 	bl	800368c <HAL_HRTIM_TimeBaseConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_HRTIM1_Init+0x120>
  {
    Error_Handler();
 8001160:	f000 f9e8 	bl	8001534 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8001164:	2300      	movs	r3, #0
 8001166:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001168:	2300      	movs	r3, #0
 800116a:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.DMASrcAddress = 0x0;
 800116c:	2300      	movs	r3, #0
 800116e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.DMADstAddress = 0x0;
 8001170:	2300      	movs	r3, #0
 8001172:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DMASize = 0x1;
 8001174:	2301      	movs	r3, #1
 8001176:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8001178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800117c:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 800117e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001182:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001186:	2300      	movs	r3, #0
 8001188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8001198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800119c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_PER;
 80011ac:	2310      	movs	r3, #16
 80011ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80011b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011bc:	461a      	mov	r2, r3
 80011be:	2100      	movs	r1, #0
 80011c0:	485b      	ldr	r0, [pc, #364]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 80011c2:	f002 fa8b 	bl	80036dc <HAL_HRTIM_WaveformTimerConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_HRTIM1_Init+0x18c>
  {
    Error_Handler();
 80011cc:	f000 f9b2 	bl	8001534 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.DMADstAddress = 0x0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DMASize = 0x1;
 80011d8:	2301      	movs	r3, #1
 80011da:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_CMP2;
 80011dc:	2340      	movs	r3, #64	; 0x40
 80011de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80011e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011e6:	461a      	mov	r2, r3
 80011e8:	2101      	movs	r1, #1
 80011ea:	4851      	ldr	r0, [pc, #324]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 80011ec:	f002 fa76 	bl	80036dc <HAL_HRTIM_WaveformTimerConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_HRTIM1_Init+0x1b6>
  {
    Error_Handler();
 80011f6:	f000 f99d 	bl	8001534 <Error_Handler>
  }
  pCompareCfg.CompareValue = dutyA;
 80011fa:	4b4f      	ldr	r3, [pc, #316]	; (8001338 <MX_HRTIM1_Init+0x2f4>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001200:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001204:	2201      	movs	r2, #1
 8001206:	2100      	movs	r1, #0
 8001208:	4849      	ldr	r0, [pc, #292]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 800120a:	f002 fb59 	bl	80038c0 <HAL_HRTIM_WaveformCompareConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_HRTIM1_Init+0x1d4>
  {
    Error_Handler();
 8001214:	f000 f98e 	bl	8001534 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  pDeadTimeCfg.RisingValue = 10;
 800121c:	230a      	movs	r3, #10
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 8001224:	2300      	movs	r3, #0
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8001228:	2300      	movs	r3, #0
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
  pDeadTimeCfg.FallingValue = 10;
 800122c:	230a      	movs	r3, #10
 800122e:	63bb      	str	r3, [r7, #56]	; 0x38
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 8001230:	2300      	movs	r3, #0
 8001232:	63fb      	str	r3, [r7, #60]	; 0x3c
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 8001234:	2300      	movs	r3, #0
 8001236:	643b      	str	r3, [r7, #64]	; 0x40
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8001238:	2300      	movs	r3, #0
 800123a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	461a      	mov	r2, r3
 8001242:	2100      	movs	r1, #0
 8001244:	483a      	ldr	r0, [pc, #232]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 8001246:	f002 fabb 	bl	80037c0 <HAL_HRTIM_DeadTimeConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_HRTIM1_Init+0x210>
  {
    Error_Handler();
 8001250:	f000 f970 	bl	8001534 <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pDeadTimeCfg) != HAL_OK)
 8001254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001258:	461a      	mov	r2, r3
 800125a:	2101      	movs	r1, #1
 800125c:	4834      	ldr	r0, [pc, #208]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 800125e:	f002 faaf 	bl	80037c0 <HAL_HRTIM_DeadTimeConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_HRTIM1_Init+0x228>
  {
    Error_Handler();
 8001268:	f000 f964 	bl	8001534 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8001270:	2308      	movs	r3, #8
 8001272:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMPER;
 8001274:	2304      	movs	r3, #4
 8001276:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2201      	movs	r2, #1
 8001290:	2100      	movs	r1, #0
 8001292:	4827      	ldr	r0, [pc, #156]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 8001294:	f002 fc82 	bl	8003b9c <HAL_HRTIM_WaveformOutputConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_HRTIM1_Init+0x25e>
  {
    Error_Handler();
 800129e:	f000 f949 	bl	8001534 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2204      	movs	r2, #4
 80012a6:	2101      	movs	r1, #1
 80012a8:	4821      	ldr	r0, [pc, #132]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 80012aa:	f002 fc77 	bl	8003b9c <HAL_HRTIM_WaveformOutputConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_HRTIM1_Init+0x274>
  {
    Error_Handler();
 80012b4:	f000 f93e 	bl	8001534 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 80012bc:	2308      	movs	r3, #8
 80012be:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2202      	movs	r2, #2
 80012c4:	2100      	movs	r1, #0
 80012c6:	481a      	ldr	r0, [pc, #104]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 80012c8:	f002 fc68 	bl	8003b9c <HAL_HRTIM_WaveformOutputConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_HRTIM1_Init+0x292>
  {
    Error_Handler();
 80012d2:	f000 f92f 	bl	8001534 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2208      	movs	r2, #8
 80012da:	2101      	movs	r1, #1
 80012dc:	4814      	ldr	r0, [pc, #80]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 80012de:	f002 fc5d 	bl	8003b9c <HAL_HRTIM_WaveformOutputConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_HRTIM1_Init+0x2a8>
  {
    Error_Handler();
 80012e8:	f000 f924 	bl	8001534 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 80012ec:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012f0:	461a      	mov	r2, r3
 80012f2:	2101      	movs	r1, #1
 80012f4:	480e      	ldr	r0, [pc, #56]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 80012f6:	f002 f9c9 	bl	800368c <HAL_HRTIM_TimeBaseConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_HRTIM1_Init+0x2c0>
  {
    Error_Handler();
 8001300:	f000 f918 	bl	8001534 <Error_Handler>
  }
  pCompareCfg.CompareValue = 80;
 8001304:	2350      	movs	r3, #80	; 0x50
 8001306:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001308:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800130c:	2201      	movs	r2, #1
 800130e:	2101      	movs	r1, #1
 8001310:	4807      	ldr	r0, [pc, #28]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 8001312:	f002 fad5 	bl	80038c0 <HAL_HRTIM_WaveformCompareConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_HRTIM1_Init+0x2dc>
  {
    Error_Handler();
 800131c:	f000 f90a 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <MX_HRTIM1_Init+0x2ec>)
 8001322:	f000 fa5d 	bl	80017e0 <HAL_HRTIM_MspPostInit>

}
 8001326:	bf00      	nop
 8001328:	37b8      	adds	r7, #184	; 0xb8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000140 	.word	0x20000140
 8001334:	40017400 	.word	0x40017400
 8001338:	20000028 	.word	0x20000028

0800133c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001342:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <MX_SPI1_Init+0x78>)
 8001344:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001348:	f44f 7282 	mov.w	r2, #260	; 0x104
 800134c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001350:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001354:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001358:	f44f 7240 	mov.w	r2, #768	; 0x300
 800135c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_SPI1_Init+0x74>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001372:	2218      	movs	r2, #24
 8001374:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_SPI1_Init+0x74>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001384:	2200      	movs	r2, #0
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_SPI1_Init+0x74>)
 800138a:	2207      	movs	r2, #7
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001396:	2208      	movs	r2, #8
 8001398:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_SPI1_Init+0x74>)
 800139c:	f004 fa56 	bl	800584c <HAL_SPI_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013a6:	f000 f8c5 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000028c 	.word	0x2000028c
 80013b4:	40013000 	.word	0x40013000

080013b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_USART2_UART_Init+0x58>)
 80013be:	4a15      	ldr	r2, [pc, #84]	; (8001414 <MX_USART2_UART_Init+0x5c>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <MX_USART2_UART_Init+0x58>)
 80013c4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80013c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_USART2_UART_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_USART2_UART_Init+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_USART2_UART_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_USART2_UART_Init+0x58>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <MX_USART2_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_USART2_UART_Init+0x58>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <MX_USART2_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_USART2_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_USART2_UART_Init+0x58>)
 80013fc:	f004 fab0 	bl	8005960 <HAL_UART_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001406:	f000 f895 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200002f0 	.word	0x200002f0
 8001414:	40004400 	.word	0x40004400

08001418 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <MX_DMA_Init+0x48>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <MX_DMA_Init+0x48>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6153      	str	r3, [r2, #20]
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <MX_DMA_Init+0x48>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	200b      	movs	r0, #11
 800143c:	f001 fcaf 	bl	8002d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001440:	200b      	movs	r0, #11
 8001442:	f001 fcc8 	bl	8002dd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	200c      	movs	r0, #12
 800144c:	f001 fca7 	bl	8002d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001450:	200c      	movs	r0, #12
 8001452:	f001 fcc0 	bl	8002dd6 <HAL_NVIC_EnableIRQ>

}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000

08001464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <MX_GPIO_Init+0xc4>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	4a2a      	ldr	r2, [pc, #168]	; (8001528 <MX_GPIO_Init+0xc4>)
 8001480:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001484:	6153      	str	r3, [r2, #20]
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <MX_GPIO_Init+0xc4>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <MX_GPIO_Init+0xc4>)
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	4a24      	ldr	r2, [pc, #144]	; (8001528 <MX_GPIO_Init+0xc4>)
 8001498:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800149c:	6153      	str	r3, [r2, #20]
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <MX_GPIO_Init+0xc4>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <MX_GPIO_Init+0xc4>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	4a1e      	ldr	r2, [pc, #120]	; (8001528 <MX_GPIO_Init+0xc4>)
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	6153      	str	r3, [r2, #20]
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <MX_GPIO_Init+0xc4>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <MX_GPIO_Init+0xc4>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	4a18      	ldr	r2, [pc, #96]	; (8001528 <MX_GPIO_Init+0xc4>)
 80014c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014cc:	6153      	str	r3, [r2, #20]
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <MX_GPIO_Init+0xc4>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2101      	movs	r1, #1
 80014de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e2:	f001 ffd5 	bl	8003490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_GPIO_Init+0xc8>)
 80014ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	480d      	ldr	r0, [pc, #52]	; (8001530 <MX_GPIO_Init+0xcc>)
 80014fc:	f001 fe56 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001500:	2301      	movs	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151a:	f001 fe47 	bl	80031ac <HAL_GPIO_Init>

}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	10210000 	.word	0x10210000
 8001530:	48000800 	.word	0x48000800

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_MspInit+0x44>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <HAL_MspInit+0x44>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6193      	str	r3, [r2, #24]
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_MspInit+0x44>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_MspInit+0x44>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a08      	ldr	r2, [pc, #32]	; (8001588 <HAL_MspInit+0x44>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	61d3      	str	r3, [r2, #28]
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_MspInit+0x44>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800157a:	2007      	movs	r0, #7
 800157c:	f001 fc04 	bl	8002d88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40021000 	.word	0x40021000

0800158c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08e      	sub	sp, #56	; 0x38
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ac:	d155      	bne.n	800165a <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80015ae:	4b73      	ldr	r3, [pc, #460]	; (800177c <HAL_ADC_MspInit+0x1f0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	3301      	adds	r3, #1
 80015b4:	4a71      	ldr	r2, [pc, #452]	; (800177c <HAL_ADC_MspInit+0x1f0>)
 80015b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80015b8:	4b70      	ldr	r3, [pc, #448]	; (800177c <HAL_ADC_MspInit+0x1f0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d10b      	bne.n	80015d8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80015c0:	4b6f      	ldr	r3, [pc, #444]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	4a6e      	ldr	r2, [pc, #440]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 80015c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ca:	6153      	str	r3, [r2, #20]
 80015cc:	4b6c      	ldr	r3, [pc, #432]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	623b      	str	r3, [r7, #32]
 80015d6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d8:	4b69      	ldr	r3, [pc, #420]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	4a68      	ldr	r2, [pc, #416]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 80015de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015e2:	6153      	str	r3, [r2, #20]
 80015e4:	4b66      	ldr	r3, [pc, #408]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = I_1Low_Pin|I_2Low_Pin|I_High_Pin|Tp_Pin;
 80015f0:	230f      	movs	r3, #15
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f4:	2303      	movs	r3, #3
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	4619      	mov	r1, r3
 8001602:	4860      	ldr	r0, [pc, #384]	; (8001784 <HAL_ADC_MspInit+0x1f8>)
 8001604:	f001 fdd2 	bl	80031ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001608:	4b5f      	ldr	r3, [pc, #380]	; (8001788 <HAL_ADC_MspInit+0x1fc>)
 800160a:	4a60      	ldr	r2, [pc, #384]	; (800178c <HAL_ADC_MspInit+0x200>)
 800160c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160e:	4b5e      	ldr	r3, [pc, #376]	; (8001788 <HAL_ADC_MspInit+0x1fc>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001614:	4b5c      	ldr	r3, [pc, #368]	; (8001788 <HAL_ADC_MspInit+0x1fc>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800161a:	4b5b      	ldr	r3, [pc, #364]	; (8001788 <HAL_ADC_MspInit+0x1fc>)
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001620:	4b59      	ldr	r3, [pc, #356]	; (8001788 <HAL_ADC_MspInit+0x1fc>)
 8001622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001626:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001628:	4b57      	ldr	r3, [pc, #348]	; (8001788 <HAL_ADC_MspInit+0x1fc>)
 800162a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800162e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001630:	4b55      	ldr	r3, [pc, #340]	; (8001788 <HAL_ADC_MspInit+0x1fc>)
 8001632:	2220      	movs	r2, #32
 8001634:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001636:	4b54      	ldr	r3, [pc, #336]	; (8001788 <HAL_ADC_MspInit+0x1fc>)
 8001638:	2200      	movs	r2, #0
 800163a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800163c:	4852      	ldr	r0, [pc, #328]	; (8001788 <HAL_ADC_MspInit+0x1fc>)
 800163e:	f001 fbe4 	bl	8002e0a <HAL_DMA_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001648:	f7ff ff74 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a4e      	ldr	r2, [pc, #312]	; (8001788 <HAL_ADC_MspInit+0x1fc>)
 8001650:	639a      	str	r2, [r3, #56]	; 0x38
 8001652:	4a4d      	ldr	r2, [pc, #308]	; (8001788 <HAL_ADC_MspInit+0x1fc>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001658:	e08b      	b.n	8001772 <HAL_ADC_MspInit+0x1e6>
  else if(hadc->Instance==ADC2)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a4c      	ldr	r2, [pc, #304]	; (8001790 <HAL_ADC_MspInit+0x204>)
 8001660:	4293      	cmp	r3, r2
 8001662:	f040 8086 	bne.w	8001772 <HAL_ADC_MspInit+0x1e6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001666:	4b45      	ldr	r3, [pc, #276]	; (800177c <HAL_ADC_MspInit+0x1f0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	4a43      	ldr	r2, [pc, #268]	; (800177c <HAL_ADC_MspInit+0x1f0>)
 800166e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001670:	4b42      	ldr	r3, [pc, #264]	; (800177c <HAL_ADC_MspInit+0x1f0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d10b      	bne.n	8001690 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001678:	4b41      	ldr	r3, [pc, #260]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	4a40      	ldr	r2, [pc, #256]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 800167e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001682:	6153      	str	r3, [r2, #20]
 8001684:	4b3e      	ldr	r3, [pc, #248]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	4a3a      	ldr	r2, [pc, #232]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 8001696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169a:	6153      	str	r3, [r2, #20]
 800169c:	4b38      	ldr	r3, [pc, #224]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a8:	4b35      	ldr	r3, [pc, #212]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	4a34      	ldr	r2, [pc, #208]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 80016ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016b2:	6153      	str	r3, [r2, #20]
 80016b4:	4b32      	ldr	r3, [pc, #200]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c0:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	4a2e      	ldr	r2, [pc, #184]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 80016c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ca:	6153      	str	r3, [r2, #20]
 80016cc:	4b2c      	ldr	r3, [pc, #176]	; (8001780 <HAL_ADC_MspInit+0x1f4>)
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_1LowP_Pin|V_1LowN_Pin|V_2LowP_Pin|V_2LowN_Pin;
 80016d8:	23f0      	movs	r3, #240	; 0xf0
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016dc:	2303      	movs	r3, #3
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e8:	4619      	mov	r1, r3
 80016ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ee:	f001 fd5d 	bl	80031ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = V_HighP_Pin;
 80016f2:	2320      	movs	r3, #32
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f6:	2303      	movs	r3, #3
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(V_HighP_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001702:	4619      	mov	r1, r3
 8001704:	481f      	ldr	r0, [pc, #124]	; (8001784 <HAL_ADC_MspInit+0x1f8>)
 8001706:	f001 fd51 	bl	80031ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = V_HighN_Pin;
 800170a:	2304      	movs	r3, #4
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800170e:	2303      	movs	r3, #3
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(V_HighN_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171a:	4619      	mov	r1, r3
 800171c:	481d      	ldr	r0, [pc, #116]	; (8001794 <HAL_ADC_MspInit+0x208>)
 800171e:	f001 fd45 	bl	80031ac <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001722:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <HAL_ADC_MspInit+0x20c>)
 8001724:	4a1d      	ldr	r2, [pc, #116]	; (800179c <HAL_ADC_MspInit+0x210>)
 8001726:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <HAL_ADC_MspInit+0x20c>)
 800172a:	2200      	movs	r2, #0
 800172c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <HAL_ADC_MspInit+0x20c>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_ADC_MspInit+0x20c>)
 8001736:	2280      	movs	r2, #128	; 0x80
 8001738:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_ADC_MspInit+0x20c>)
 800173c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001740:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_ADC_MspInit+0x20c>)
 8001744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001748:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <HAL_ADC_MspInit+0x20c>)
 800174c:	2220      	movs	r2, #32
 800174e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_ADC_MspInit+0x20c>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001756:	4810      	ldr	r0, [pc, #64]	; (8001798 <HAL_ADC_MspInit+0x20c>)
 8001758:	f001 fb57 	bl	8002e0a <HAL_DMA_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_ADC_MspInit+0x1da>
      Error_Handler();
 8001762:	f7ff fee7 	bl	8001534 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <HAL_ADC_MspInit+0x20c>)
 800176a:	639a      	str	r2, [r3, #56]	; 0x38
 800176c:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <HAL_ADC_MspInit+0x20c>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001772:	bf00      	nop
 8001774:	3738      	adds	r7, #56	; 0x38
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2000005c 	.word	0x2000005c
 8001780:	40021000 	.word	0x40021000
 8001784:	48000800 	.word	0x48000800
 8001788:	20000228 	.word	0x20000228
 800178c:	40020008 	.word	0x40020008
 8001790:	50000100 	.word	0x50000100
 8001794:	48000400 	.word	0x48000400
 8001798:	20000370 	.word	0x20000370
 800179c:	4002001c 	.word	0x4002001c

080017a0 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <HAL_HRTIM_MspInit+0x38>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d10b      	bne.n	80017ca <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_HRTIM_MspInit+0x3c>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	4a09      	ldr	r2, [pc, #36]	; (80017dc <HAL_HRTIM_MspInit+0x3c>)
 80017b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017bc:	6193      	str	r3, [r2, #24]
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <HAL_HRTIM_MspInit+0x3c>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40017400 	.word	0x40017400
 80017dc:	40021000 	.word	0x40021000

080017e0 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a12      	ldr	r2, [pc, #72]	; (8001848 <HAL_HRTIM_MspPostInit+0x68>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d11d      	bne.n	800183e <HAL_HRTIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_HRTIM_MspPostInit+0x6c>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	4a11      	ldr	r2, [pc, #68]	; (800184c <HAL_HRTIM_MspPostInit+0x6c>)
 8001808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180c:	6153      	str	r3, [r2, #20]
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_HRTIM_MspPostInit+0x6c>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2
    */
    GPIO_InitStruct.Pin = H1_Pin|L1_Pin|H2_Pin|L2_Pin;
 800181a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800181e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 800182c:	230d      	movs	r3, #13
 800182e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	4619      	mov	r1, r3
 8001836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183a:	f001 fcb7 	bl	80031ac <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40017400 	.word	0x40017400
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a26      	ldr	r2, [pc, #152]	; (8001908 <HAL_SPI_MspInit+0xb8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d145      	bne.n	80018fe <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001872:	4b26      	ldr	r3, [pc, #152]	; (800190c <HAL_SPI_MspInit+0xbc>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	4a25      	ldr	r2, [pc, #148]	; (800190c <HAL_SPI_MspInit+0xbc>)
 8001878:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800187c:	6193      	str	r3, [r2, #24]
 800187e:	4b23      	ldr	r3, [pc, #140]	; (800190c <HAL_SPI_MspInit+0xbc>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_SPI_MspInit+0xbc>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	4a1f      	ldr	r2, [pc, #124]	; (800190c <HAL_SPI_MspInit+0xbc>)
 8001890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001894:	6153      	str	r3, [r2, #20]
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <HAL_SPI_MspInit+0xbc>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <HAL_SPI_MspInit+0xbc>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	4a19      	ldr	r2, [pc, #100]	; (800190c <HAL_SPI_MspInit+0xbc>)
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ac:	6153      	str	r3, [r2, #20]
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_SPI_MspInit+0xbc>)
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018cc:	2305      	movs	r3, #5
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018da:	f001 fc67 	bl	80031ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80018de:	2328      	movs	r3, #40	; 0x28
 80018e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ea:	2303      	movs	r3, #3
 80018ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018ee:	2305      	movs	r3, #5
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	; (8001910 <HAL_SPI_MspInit+0xc0>)
 80018fa:	f001 fc57 	bl	80031ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018fe:	bf00      	nop
 8001900:	3728      	adds	r7, #40	; 0x28
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40013000 	.word	0x40013000
 800190c:	40021000 	.word	0x40021000
 8001910:	48000400 	.word	0x48000400

08001914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a17      	ldr	r2, [pc, #92]	; (8001990 <HAL_UART_MspInit+0x7c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d128      	bne.n	8001988 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <HAL_UART_MspInit+0x80>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4a16      	ldr	r2, [pc, #88]	; (8001994 <HAL_UART_MspInit+0x80>)
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	61d3      	str	r3, [r2, #28]
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <HAL_UART_MspInit+0x80>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_UART_MspInit+0x80>)
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	4a10      	ldr	r2, [pc, #64]	; (8001994 <HAL_UART_MspInit+0x80>)
 8001954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001958:	6153      	str	r3, [r2, #20]
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <HAL_UART_MspInit+0x80>)
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001966:	230c      	movs	r3, #12
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001976:	2307      	movs	r3, #7
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001984:	f001 fc12 	bl	80031ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001988:	bf00      	nop
 800198a:	3728      	adds	r7, #40	; 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40004400 	.word	0x40004400
 8001994:	40021000 	.word	0x40021000

08001998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <MemManage_Handler+0x4>

080019b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <UsageFault_Handler+0x4>

080019be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ec:	f000 f89c 	bl	8001b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <DMA1_Channel1_IRQHandler+0x10>)
 80019fa:	f001 fae5 	bl	8002fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000228 	.word	0x20000228

08001a08 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <DMA1_Channel2_IRQHandler+0x10>)
 8001a0e:	f001 fadb 	bl	8002fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000370 	.word	0x20000370

08001a1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <SystemInit+0x28>)
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a26:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <SystemInit+0x28>)
 8001a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SystemInit+0x28>)
 8001a32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a36:	609a      	str	r2, [r3, #8]
#endif
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a80 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a4e:	e003      	b.n	8001a58 <LoopCopyDataInit>

08001a50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a56:	3104      	adds	r1, #4

08001a58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a58:	480b      	ldr	r0, [pc, #44]	; (8001a88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a60:	d3f6      	bcc.n	8001a50 <CopyDataInit>
	ldr	r2, =_sbss
 8001a62:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a64:	e002      	b.n	8001a6c <LoopFillZerobss>

08001a66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a68:	f842 3b04 	str.w	r3, [r2], #4

08001a6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <LoopForever+0x16>)
	cmp	r2, r3
 8001a6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a70:	d3f9      	bcc.n	8001a66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a72:	f7ff ffd3 	bl	8001a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a76:	f004 fb4d 	bl	8006114 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a7a:	f7fe ffc5 	bl	8000a08 <main>

08001a7e <LoopForever>:

LoopForever:
    b LoopForever
 8001a7e:	e7fe      	b.n	8001a7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a80:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001a84:	080061c4 	.word	0x080061c4
	ldr	r0, =_sdata
 8001a88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a8c:	2000003c 	.word	0x2000003c
	ldr	r2, =_sbss
 8001a90:	2000003c 	.word	0x2000003c
	ldr	r3, = _ebss
 8001a94:	20000404 	.word	0x20000404

08001a98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <ADC1_2_IRQHandler>
	...

08001a9c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_Init+0x28>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <HAL_Init+0x28>)
 8001aa6:	f043 0310 	orr.w	r3, r3, #16
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aac:	2003      	movs	r0, #3
 8001aae:	f001 f96b 	bl	8002d88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f000 f808 	bl	8001ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab8:	f7ff fd44 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40022000 	.word	0x40022000

08001ac8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_InitTick+0x54>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_InitTick+0x58>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 f983 	bl	8002df2 <HAL_SYSTICK_Config>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00e      	b.n	8001b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b0f      	cmp	r3, #15
 8001afa:	d80a      	bhi.n	8001b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001afc:	2200      	movs	r2, #0
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b04:	f001 f94b 	bl	8002d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b08:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <HAL_InitTick+0x5c>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e000      	b.n	8001b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000030 	.word	0x20000030
 8001b20:	20000038 	.word	0x20000038
 8001b24:	20000034 	.word	0x20000034

08001b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_IncTick+0x20>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_IncTick+0x24>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <HAL_IncTick+0x24>)
 8001b3a:	6013      	str	r3, [r2, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000038 	.word	0x20000038
 8001b4c:	20000400 	.word	0x20000400

08001b50 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_GetTick+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000400 	.word	0x20000400

08001b68 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b09a      	sub	sp, #104	; 0x68
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e172      	b.n	8001eaa <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d176      	bne.n	8001cc4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d152      	bne.n	8001c84 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff fcc7 	bl	800158c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d13b      	bne.n	8001c84 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 fedd 	bl	80029cc <ADC_Disable>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d12f      	bne.n	8001c84 <HAL_ADC_Init+0xe0>
 8001c24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d12b      	bne.n	8001c84 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c34:	f023 0302 	bic.w	r3, r3, #2
 8001c38:	f043 0202 	orr.w	r2, r3, #2
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c4e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c5e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c60:	4b94      	ldr	r3, [pc, #592]	; (8001eb4 <HAL_ADC_Init+0x310>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a94      	ldr	r2, [pc, #592]	; (8001eb8 <HAL_ADC_Init+0x314>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0c9a      	lsrs	r2, r3, #18
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c76:	e002      	b.n	8001c7e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f9      	bne.n	8001c78 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ca0:	d110      	bne.n	8001cc4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f023 0312 	bic.w	r3, r3, #18
 8001caa:	f043 0210 	orr.w	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f040 80df 	bne.w	8001e90 <HAL_ADC_Init+0x2ec>
 8001cd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 80da 	bne.w	8001e90 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 80d2 	bne.w	8001e90 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cf4:	f043 0202 	orr.w	r2, r3, #2
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cfc:	4b6f      	ldr	r3, [pc, #444]	; (8001ebc <HAL_ADC_Init+0x318>)
 8001cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d08:	d102      	bne.n	8001d10 <HAL_ADC_Init+0x16c>
 8001d0a:	4b6d      	ldr	r3, [pc, #436]	; (8001ec0 <HAL_ADC_Init+0x31c>)
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	e002      	b.n	8001d16 <HAL_ADC_Init+0x172>
 8001d10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d14:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d108      	bne.n	8001d36 <HAL_ADC_Init+0x192>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_Init+0x192>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_ADC_Init+0x194>
 8001d36:	2300      	movs	r3, #0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d11c      	bne.n	8001d76 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d010      	beq.n	8001d64 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <HAL_ADC_Init+0x1ba>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_Init+0x1ba>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_ADC_Init+0x1bc>
 8001d5e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d108      	bne.n	8001d76 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	431a      	orrs	r2, r3
 8001d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d74:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7e5b      	ldrb	r3, [r3, #25]
 8001d7a:	035b      	lsls	r3, r3, #13
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d80:	2a01      	cmp	r2, #1
 8001d82:	d002      	beq.n	8001d8a <HAL_ADC_Init+0x1e6>
 8001d84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d88:	e000      	b.n	8001d8c <HAL_ADC_Init+0x1e8>
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d11b      	bne.n	8001de2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7e5b      	ldrb	r3, [r3, #25]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	3b01      	subs	r3, #1
 8001db8:	045a      	lsls	r2, r3, #17
 8001dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc2:	663b      	str	r3, [r7, #96]	; 0x60
 8001dc4:	e00d      	b.n	8001de2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001dce:	f043 0220 	orr.w	r2, r3, #32
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f043 0201 	orr.w	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d007      	beq.n	8001dfa <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	4313      	orrs	r3, r2
 8001df4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001df6:	4313      	orrs	r3, r2
 8001df8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d114      	bne.n	8001e32 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e16:	f023 0302 	bic.w	r3, r3, #2
 8001e1a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7e1b      	ldrb	r3, [r3, #24]
 8001e20:	039a      	lsls	r2, r3, #14
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <HAL_ADC_Init+0x320>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e42:	430b      	orrs	r3, r1
 8001e44:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d10c      	bne.n	8001e68 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f023 010f 	bic.w	r1, r3, #15
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	1e5a      	subs	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	631a      	str	r2, [r3, #48]	; 0x30
 8001e66:	e007      	b.n	8001e78 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 020f 	bic.w	r2, r2, #15
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f023 0303 	bic.w	r3, r3, #3
 8001e86:	f043 0201 	orr.w	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e8e:	e00a      	b.n	8001ea6 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f023 0312 	bic.w	r3, r3, #18
 8001e98:	f043 0210 	orr.w	r2, r3, #16
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001ea6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3768      	adds	r7, #104	; 0x68
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000030 	.word	0x20000030
 8001eb8:	431bde83 	.word	0x431bde83
 8001ebc:	50000300 	.word	0x50000300
 8001ec0:	50000100 	.word	0x50000100
 8001ec4:	fff0c007 	.word	0xfff0c007

08001ec8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 80b9 	bne.w	800205a <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_Start_DMA+0x2e>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e0b4      	b.n	8002060 <HAL_ADC_Start_DMA+0x198>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001efe:	4b5a      	ldr	r3, [pc, #360]	; (8002068 <HAL_ADC_Start_DMA+0x1a0>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f040 80a0 	bne.w	800204c <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 fcff 	bl	8002910 <ADC_Enable>
 8001f12:	4603      	mov	r3, r0
 8001f14:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f16:	7dfb      	ldrb	r3, [r7, #23]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f040 8092 	bne.w	8002042 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f32:	4b4d      	ldr	r3, [pc, #308]	; (8002068 <HAL_ADC_Start_DMA+0x1a0>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d004      	beq.n	8001f48 <HAL_ADC_Start_DMA+0x80>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f46:	d115      	bne.n	8001f74 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d027      	beq.n	8001fb2 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001f72:	e01e      	b.n	8001fb2 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f88:	d004      	beq.n	8001f94 <HAL_ADC_Start_DMA+0xcc>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a37      	ldr	r2, [pc, #220]	; (800206c <HAL_ADC_Start_DMA+0x1a4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d10e      	bne.n	8001fb2 <HAL_ADC_Start_DMA+0xea>
 8001f94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d007      	beq.n	8001fb2 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001faa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fbe:	d106      	bne.n	8001fce <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	f023 0206 	bic.w	r2, r3, #6
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	645a      	str	r2, [r3, #68]	; 0x44
 8001fcc:	e002      	b.n	8001fd4 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe0:	4a23      	ldr	r2, [pc, #140]	; (8002070 <HAL_ADC_Start_DMA+0x1a8>)
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe8:	4a22      	ldr	r2, [pc, #136]	; (8002074 <HAL_ADC_Start_DMA+0x1ac>)
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff0:	4a21      	ldr	r2, [pc, #132]	; (8002078 <HAL_ADC_Start_DMA+0x1b0>)
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	221c      	movs	r2, #28
 8001ffa:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0210 	orr.w	r2, r2, #16
 800200a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3340      	adds	r3, #64	; 0x40
 8002026:	4619      	mov	r1, r3
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f000 ff34 	bl	8002e98 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0204 	orr.w	r2, r2, #4
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	e00d      	b.n	800205e <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800204a:	e008      	b.n	800205e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002058:	e001      	b.n	800205e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800205a:	2302      	movs	r3, #2
 800205c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800205e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	50000300 	.word	0x50000300
 800206c:	50000100 	.word	0x50000100
 8002070:	08002845 	.word	0x08002845
 8002074:	080028bf 	.word	0x080028bf
 8002078:	080028db 	.word	0x080028db

0800207c <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_ADC_Stop_DMA+0x1a>
 8002092:	2302      	movs	r3, #2
 8002094:	e04a      	b.n	800212c <HAL_ADC_Stop_DMA+0xb0>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800209e:	216c      	movs	r1, #108	; 0x6c
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fcf3 	bl	8002a8c <ADC_ConversionStop>
 80020a6:	4603      	mov	r3, r0
 80020a8:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d138      	bne.n	8002122 <HAL_ADC_Stop_DMA+0xa6>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 ff46 	bl	8002f56 <HAL_DMA_Abort>
 80020ca:	4603      	mov	r3, r0
 80020cc:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_ADC_Stop_DMA+0x64>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0210 	bic.w	r2, r2, #16
 80020ee:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 fc68 	bl	80029cc <ADC_Disable>
 80020fc:	4603      	mov	r3, r0
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	e002      	b.n	8002108 <HAL_ADC_Stop_DMA+0x8c>
    }
    else
    {
      ADC_Disable(hadc);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fc62 	bl	80029cc <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <HAL_ADC_Stop_DMA+0xa6>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	f043 0201 	orr.w	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002134:	b480      	push	{r7}
 8002136:	b09b      	sub	sp, #108	; 0x6c
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x22>
 8002152:	2302      	movs	r3, #2
 8002154:	e2a5      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x56e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	f040 8289 	bne.w	8002680 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b04      	cmp	r3, #4
 8002174:	d81c      	bhi.n	80021b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	461a      	mov	r2, r3
 800218a:	231f      	movs	r3, #31
 800218c:	4093      	lsls	r3, r2
 800218e:	43db      	mvns	r3, r3
 8002190:	4019      	ands	r1, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	fa00 f203 	lsl.w	r2, r0, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30
 80021ae:	e063      	b.n	8002278 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b09      	cmp	r3, #9
 80021b6:	d81e      	bhi.n	80021f6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	3b1e      	subs	r3, #30
 80021cc:	221f      	movs	r2, #31
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	4019      	ands	r1, r3
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	3b1e      	subs	r3, #30
 80021e8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	635a      	str	r2, [r3, #52]	; 0x34
 80021f4:	e040      	b.n	8002278 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b0e      	cmp	r3, #14
 80021fc:	d81e      	bhi.n	800223c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	3b3c      	subs	r3, #60	; 0x3c
 8002212:	221f      	movs	r2, #31
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	4019      	ands	r1, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	3b3c      	subs	r3, #60	; 0x3c
 800222e:	fa00 f203 	lsl.w	r2, r0, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	639a      	str	r2, [r3, #56]	; 0x38
 800223a:	e01d      	b.n	8002278 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4413      	add	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	3b5a      	subs	r3, #90	; 0x5a
 8002250:	221f      	movs	r2, #31
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	4019      	ands	r1, r3
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	3b5a      	subs	r3, #90	; 0x5a
 800226c:	fa00 f203 	lsl.w	r2, r0, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 80e5 	bne.w	8002452 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b09      	cmp	r3, #9
 800228e:	d91c      	bls.n	80022ca <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6999      	ldr	r1, [r3, #24]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	3b1e      	subs	r3, #30
 80022a2:	2207      	movs	r2, #7
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	4019      	ands	r1, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6898      	ldr	r0, [r3, #8]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	3b1e      	subs	r3, #30
 80022bc:	fa00 f203 	lsl.w	r2, r0, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	619a      	str	r2, [r3, #24]
 80022c8:	e019      	b.n	80022fe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6959      	ldr	r1, [r3, #20]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	2207      	movs	r2, #7
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	4019      	ands	r1, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	6898      	ldr	r0, [r3, #8]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	fa00 f203 	lsl.w	r2, r0, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	08db      	lsrs	r3, r3, #3
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	3b01      	subs	r3, #1
 800231c:	2b03      	cmp	r3, #3
 800231e:	d84f      	bhi.n	80023c0 <HAL_ADC_ConfigChannel+0x28c>
 8002320:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <HAL_ADC_ConfigChannel+0x1f4>)
 8002322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002326:	bf00      	nop
 8002328:	08002339 	.word	0x08002339
 800232c:	0800235b 	.word	0x0800235b
 8002330:	0800237d 	.word	0x0800237d
 8002334:	0800239f 	.word	0x0800239f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800233e:	4b9e      	ldr	r3, [pc, #632]	; (80025b8 <HAL_ADC_ConfigChannel+0x484>)
 8002340:	4013      	ands	r3, r2
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	0691      	lsls	r1, r2, #26
 8002348:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800234a:	430a      	orrs	r2, r1
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002356:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002358:	e07e      	b.n	8002458 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002360:	4b95      	ldr	r3, [pc, #596]	; (80025b8 <HAL_ADC_ConfigChannel+0x484>)
 8002362:	4013      	ands	r3, r2
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	0691      	lsls	r1, r2, #26
 800236a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800236c:	430a      	orrs	r2, r1
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002378:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800237a:	e06d      	b.n	8002458 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002382:	4b8d      	ldr	r3, [pc, #564]	; (80025b8 <HAL_ADC_ConfigChannel+0x484>)
 8002384:	4013      	ands	r3, r2
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	0691      	lsls	r1, r2, #26
 800238c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800238e:	430a      	orrs	r2, r1
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800239a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800239c:	e05c      	b.n	8002458 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023a4:	4b84      	ldr	r3, [pc, #528]	; (80025b8 <HAL_ADC_ConfigChannel+0x484>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	0691      	lsls	r1, r2, #26
 80023ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023b0:	430a      	orrs	r2, r1
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023bc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80023be:	e04b      	b.n	8002458 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	069b      	lsls	r3, r3, #26
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d107      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023e2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	069b      	lsls	r3, r3, #26
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d107      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002406:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800240e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	069b      	lsls	r3, r3, #26
 8002418:	429a      	cmp	r2, r3
 800241a:	d107      	bne.n	800242c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800242a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002432:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	069b      	lsls	r3, r3, #26
 800243c:	429a      	cmp	r2, r3
 800243e:	d10a      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800244e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002450:	e001      	b.n	8002456 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002452:	bf00      	nop
 8002454:	e000      	b.n	8002458 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002456:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b01      	cmp	r3, #1
 8002464:	d108      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x344>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x344>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <HAL_ADC_ConfigChannel+0x346>
 8002478:	2300      	movs	r3, #0
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 810b 	bne.w	8002696 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d00f      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2201      	movs	r2, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43da      	mvns	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	400a      	ands	r2, r1
 80024a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80024a6:	e049      	b.n	800253c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2201      	movs	r2, #1
 80024b6:	409a      	lsls	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b09      	cmp	r3, #9
 80024c8:	d91c      	bls.n	8002504 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6999      	ldr	r1, [r3, #24]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	3b1b      	subs	r3, #27
 80024dc:	2207      	movs	r2, #7
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	4019      	ands	r1, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6898      	ldr	r0, [r3, #8]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	3b1b      	subs	r3, #27
 80024f6:	fa00 f203 	lsl.w	r2, r0, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	619a      	str	r2, [r3, #24]
 8002502:	e01b      	b.n	800253c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6959      	ldr	r1, [r3, #20]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	2207      	movs	r2, #7
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	4019      	ands	r1, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	6898      	ldr	r0, [r3, #8]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	fa00 f203 	lsl.w	r2, r0, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800253c:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <HAL_ADC_ConfigChannel+0x488>)
 800253e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b10      	cmp	r3, #16
 8002546:	d105      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002550:	2b00      	cmp	r3, #0
 8002552:	d015      	beq.n	8002580 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002558:	2b11      	cmp	r3, #17
 800255a:	d105      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800255c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00b      	beq.n	8002580 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800256c:	2b12      	cmp	r3, #18
 800256e:	f040 8092 	bne.w	8002696 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800257a:	2b00      	cmp	r3, #0
 800257c:	f040 808b 	bne.w	8002696 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002588:	d102      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x45c>
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_ADC_ConfigChannel+0x48c>)
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	e002      	b.n	8002596 <HAL_ADC_ConfigChannel+0x462>
 8002590:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002594:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d10f      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x490>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d108      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x490>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e007      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x492>
 80025b6:	bf00      	nop
 80025b8:	83fff000 	.word	0x83fff000
 80025bc:	50000300 	.word	0x50000300
 80025c0:	50000100 	.word	0x50000100
 80025c4:	2300      	movs	r3, #0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d150      	bne.n	800266c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025ca:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d010      	beq.n	80025f2 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d107      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x4b8>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x4b8>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <HAL_ADC_ConfigChannel+0x4ba>
 80025ec:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d13c      	bne.n	800266c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b10      	cmp	r3, #16
 80025f8:	d11d      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x502>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002602:	d118      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800260c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800260e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_ADC_ConfigChannel+0x57c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a27      	ldr	r2, [pc, #156]	; (80026b4 <HAL_ADC_ConfigChannel+0x580>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	0c9a      	lsrs	r2, r3, #18
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002626:	e002      	b.n	800262e <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	3b01      	subs	r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f9      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002634:	e02e      	b.n	8002694 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b11      	cmp	r3, #17
 800263c:	d10b      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x522>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002646:	d106      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002652:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002654:	e01e      	b.n	8002694 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b12      	cmp	r3, #18
 800265c:	d11a      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800265e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002668:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800266a:	e013      	b.n	8002694 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f043 0220 	orr.w	r2, r3, #32
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800267e:	e00a      	b.n	8002696 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f043 0220 	orr.w	r2, r3, #32
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002692:	e000      	b.n	8002696 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002694:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800269e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	376c      	adds	r7, #108	; 0x6c
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000030 	.word	0x20000030
 80026b4:	431bde83 	.word	0x431bde83

080026b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b099      	sub	sp, #100	; 0x64
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026d0:	d102      	bne.n	80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80026d2:	4b5a      	ldr	r3, [pc, #360]	; (800283c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	e002      	b.n	80026de <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80026d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026dc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0a2      	b.n	800282e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e09b      	b.n	800282e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d17f      	bne.n	800280c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d179      	bne.n	800280c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002718:	4b49      	ldr	r3, [pc, #292]	; (8002840 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800271a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d040      	beq.n	80027a6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002736:	035b      	lsls	r3, r3, #13
 8002738:	430b      	orrs	r3, r1
 800273a:	431a      	orrs	r2, r3
 800273c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800273e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d108      	bne.n	8002760 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002760:	2300      	movs	r3, #0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d15c      	bne.n	8002820 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d107      	bne.n	8002782 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002782:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002784:	2b00      	cmp	r3, #0
 8002786:	d14b      	bne.n	8002820 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002790:	f023 030f 	bic.w	r3, r3, #15
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	6811      	ldr	r1, [r2, #0]
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	6892      	ldr	r2, [r2, #8]
 800279c:	430a      	orrs	r2, r1
 800279e:	431a      	orrs	r2, r3
 80027a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027a2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80027a4:	e03c      	b.n	8002820 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d108      	bne.n	80027d2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80027d2:	2300      	movs	r3, #0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d123      	bne.n	8002820 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d107      	bne.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80027f4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d112      	bne.n	8002820 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80027fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002802:	f023 030f 	bic.w	r3, r3, #15
 8002806:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002808:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800280a:	e009      	b.n	8002820 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f043 0220 	orr.w	r2, r3, #32
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800281e:	e000      	b.n	8002822 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002820:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800282a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800282e:	4618      	mov	r0, r3
 8002830:	3764      	adds	r7, #100	; 0x64
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	50000100 	.word	0x50000100
 8002840:	50000300 	.word	0x50000300

08002844 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800285a:	2b00      	cmp	r3, #0
 800285c:	d126      	bne.n	80028ac <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002874:	2b00      	cmp	r3, #0
 8002876:	d115      	bne.n	80028a4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800287c:	2b00      	cmp	r3, #0
 800287e:	d111      	bne.n	80028a4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d105      	bne.n	80028a4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f043 0201 	orr.w	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff f95f 	bl	8001b68 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80028aa:	e004      	b.n	80028b6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4798      	blx	r3
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f7ff f955 	bl	8001b7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f8:	f043 0204 	orr.w	r2, r3, #4
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f7ff f945 	bl	8001b90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	2b01      	cmp	r3, #1
 8002928:	d108      	bne.n	800293c <ADC_Enable+0x2c>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <ADC_Enable+0x2c>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <ADC_Enable+0x2e>
 800293c:	2300      	movs	r3, #0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d13c      	bne.n	80029bc <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <ADC_Enable+0xb8>)
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00d      	beq.n	800296c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f043 0210 	orr.w	r2, r3, #16
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002960:	f043 0201 	orr.w	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e028      	b.n	80029be <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800297c:	f7ff f8e8 	bl	8001b50 <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002982:	e014      	b.n	80029ae <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002984:	f7ff f8e4 	bl	8001b50 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d90d      	bls.n	80029ae <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f043 0210 	orr.w	r2, r3, #16
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f043 0201 	orr.w	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e007      	b.n	80029be <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d1e3      	bne.n	8002984 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	8000003f 	.word	0x8000003f

080029cc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d108      	bne.n	80029f8 <ADC_Disable+0x2c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <ADC_Disable+0x2c>
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <ADC_Disable+0x2e>
 80029f8:	2300      	movs	r3, #0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d040      	beq.n	8002a80 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 030d 	and.w	r3, r3, #13
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d10f      	bne.n	8002a2c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0202 	orr.w	r2, r2, #2
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2203      	movs	r2, #3
 8002a22:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002a24:	f7ff f894 	bl	8001b50 <HAL_GetTick>
 8002a28:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a2a:	e022      	b.n	8002a72 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f043 0210 	orr.w	r2, r3, #16
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e01c      	b.n	8002a82 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a48:	f7ff f882 	bl	8001b50 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d90d      	bls.n	8002a72 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f043 0210 	orr.w	r2, r3, #16
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f043 0201 	orr.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e007      	b.n	8002a82 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d0e3      	beq.n	8002a48 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8093 	beq.w	8002bd8 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ac0:	d12a      	bne.n	8002b18 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d126      	bne.n	8002b18 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d122      	bne.n	8002b18 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002ad2:	230c      	movs	r3, #12
 8002ad4:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002ad6:	e014      	b.n	8002b02 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4a42      	ldr	r2, [pc, #264]	; (8002be4 <ADC_ConversionStop+0x158>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d90d      	bls.n	8002afc <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	f043 0210 	orr.w	r2, r3, #16
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e06e      	b.n	8002bda <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	3301      	adds	r3, #1
 8002b00:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0c:	2b40      	cmp	r3, #64	; 0x40
 8002b0e:	d1e3      	bne.n	8002ad8 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2240      	movs	r2, #64	; 0x40
 8002b16:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2b60      	cmp	r3, #96	; 0x60
 8002b1c:	d015      	beq.n	8002b4a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d10e      	bne.n	8002b4a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d107      	bne.n	8002b4a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0210 	orr.w	r2, r2, #16
 8002b48:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b0c      	cmp	r3, #12
 8002b4e:	d015      	beq.n	8002b7c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d10e      	bne.n	8002b7c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d107      	bne.n	8002b7c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0220 	orr.w	r2, r2, #32
 8002b7a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2b60      	cmp	r3, #96	; 0x60
 8002b80:	d004      	beq.n	8002b8c <ADC_ConversionStop+0x100>
 8002b82:	2b6c      	cmp	r3, #108	; 0x6c
 8002b84:	d105      	bne.n	8002b92 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002b86:	230c      	movs	r3, #12
 8002b88:	617b      	str	r3, [r7, #20]
        break;
 8002b8a:	e005      	b.n	8002b98 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002b8c:	2308      	movs	r3, #8
 8002b8e:	617b      	str	r3, [r7, #20]
        break;
 8002b90:	e002      	b.n	8002b98 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002b92:	2304      	movs	r3, #4
 8002b94:	617b      	str	r3, [r7, #20]
        break;
 8002b96:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002b98:	f7fe ffda 	bl	8001b50 <HAL_GetTick>
 8002b9c:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002b9e:	e014      	b.n	8002bca <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002ba0:	f7fe ffd6 	bl	8001b50 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b0b      	cmp	r3, #11
 8002bac:	d90d      	bls.n	8002bca <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f043 0210 	orr.w	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e007      	b.n	8002bda <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1e3      	bne.n	8002ba0 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	000993ff 	.word	0x000993ff

08002be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c04:	4013      	ands	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1a:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	60d3      	str	r3, [r2, #12]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <__NVIC_GetPriorityGrouping+0x18>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	0a1b      	lsrs	r3, r3, #8
 8002c3a:	f003 0307 	and.w	r3, r3, #7
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	db0b      	blt.n	8002c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	4907      	ldr	r1, [pc, #28]	; (8002c84 <__NVIC_EnableIRQ+0x38>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000e100 	.word	0xe000e100

08002c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	6039      	str	r1, [r7, #0]
 8002c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	db0a      	blt.n	8002cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	490c      	ldr	r1, [pc, #48]	; (8002cd4 <__NVIC_SetPriority+0x4c>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	0112      	lsls	r2, r2, #4
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	440b      	add	r3, r1
 8002cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb0:	e00a      	b.n	8002cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4908      	ldr	r1, [pc, #32]	; (8002cd8 <__NVIC_SetPriority+0x50>)
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	3b04      	subs	r3, #4
 8002cc0:	0112      	lsls	r2, r2, #4
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	761a      	strb	r2, [r3, #24]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000e100 	.word	0xe000e100
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	; 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f1c3 0307 	rsb	r3, r3, #7
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	bf28      	it	cs
 8002cfa:	2304      	movcs	r3, #4
 8002cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d902      	bls.n	8002d0c <NVIC_EncodePriority+0x30>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3b03      	subs	r3, #3
 8002d0a:	e000      	b.n	8002d0e <NVIC_EncodePriority+0x32>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	401a      	ands	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43d9      	mvns	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	4313      	orrs	r3, r2
         );
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3724      	adds	r7, #36	; 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d54:	d301      	bcc.n	8002d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00f      	b.n	8002d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <SysTick_Config+0x40>)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d62:	210f      	movs	r1, #15
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d68:	f7ff ff8e 	bl	8002c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <SysTick_Config+0x40>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d72:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <SysTick_Config+0x40>)
 8002d74:	2207      	movs	r2, #7
 8002d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	e000e010 	.word	0xe000e010

08002d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ff29 	bl	8002be8 <__NVIC_SetPriorityGrouping>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db0:	f7ff ff3e 	bl	8002c30 <__NVIC_GetPriorityGrouping>
 8002db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	6978      	ldr	r0, [r7, #20]
 8002dbc:	f7ff ff8e 	bl	8002cdc <NVIC_EncodePriority>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff5d 	bl	8002c88 <__NVIC_SetPriority>
}
 8002dce:	bf00      	nop
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff31 	bl	8002c4c <__NVIC_EnableIRQ>
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ffa2 	bl	8002d44 <SysTick_Config>
 8002e00:	4603      	mov	r3, r0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e037      	b.n	8002e90 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f97a 	bl	800316c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}  
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_DMA_Start_IT+0x20>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e04a      	b.n	8002f4e <HAL_DMA_Start_IT+0xb6>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d13a      	bne.n	8002f40 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f90d 	bl	800310e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 020e 	orr.w	r2, r2, #14
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	e00f      	b.n	8002f2e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 020a 	orr.w	r2, r2, #10
 8002f1c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0204 	bic.w	r2, r2, #4
 8002f2c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0201 	orr.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e005      	b.n	8002f4c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d008      	beq.n	8002f7a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e020      	b.n	8002fbc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 020e 	bic.w	r2, r2, #14
 8002f88:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d024      	beq.n	800303a <HAL_DMA_IRQHandler+0x72>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d01f      	beq.n	800303a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0204 	bic.w	r2, r2, #4
 8003016:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	2104      	movs	r1, #4
 8003022:	fa01 f202 	lsl.w	r2, r1, r2
 8003026:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d06a      	beq.n	8003106 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003038:	e065      	b.n	8003106 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2202      	movs	r2, #2
 8003040:	409a      	lsls	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d02c      	beq.n	80030a4 <HAL_DMA_IRQHandler+0xdc>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d027      	beq.n	80030a4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10b      	bne.n	800307a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 020a 	bic.w	r2, r2, #10
 8003070:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003082:	2102      	movs	r1, #2
 8003084:	fa01 f202 	lsl.w	r2, r1, r2
 8003088:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	2b00      	cmp	r3, #0
 8003098:	d035      	beq.n	8003106 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80030a2:	e030      	b.n	8003106 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	2208      	movs	r2, #8
 80030aa:	409a      	lsls	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d028      	beq.n	8003106 <HAL_DMA_IRQHandler+0x13e>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d023      	beq.n	8003106 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 020e 	bic.w	r2, r2, #14
 80030cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	2101      	movs	r1, #1
 80030d8:	fa01 f202 	lsl.w	r2, r1, r2
 80030dc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	4798      	blx	r3
    }
  }
}  
 8003104:	e7ff      	b.n	8003106 <HAL_DMA_IRQHandler+0x13e>
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	2101      	movs	r1, #1
 8003126:	fa01 f202 	lsl.w	r2, r1, r2
 800312a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b10      	cmp	r3, #16
 800313a:	d108      	bne.n	800314e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800314c:	e007      	b.n	800315e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	60da      	str	r2, [r3, #12]
}
 800315e:	bf00      	nop
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <DMA_CalcBaseAndBitshift+0x34>)
 800317c:	4413      	add	r3, r2
 800317e:	4a09      	ldr	r2, [pc, #36]	; (80031a4 <DMA_CalcBaseAndBitshift+0x38>)
 8003180:	fba2 2303 	umull	r2, r3, r2, r3
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	009a      	lsls	r2, r3, #2
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <DMA_CalcBaseAndBitshift+0x3c>)
 8003190:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	bffdfff8 	.word	0xbffdfff8
 80031a4:	cccccccd 	.word	0xcccccccd
 80031a8:	40020000 	.word	0x40020000

080031ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ba:	e14e      	b.n	800345a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	2101      	movs	r1, #1
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	4013      	ands	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8140 	beq.w	8003454 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d00b      	beq.n	80031f4 <HAL_GPIO_Init+0x48>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d007      	beq.n	80031f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031e8:	2b11      	cmp	r3, #17
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b12      	cmp	r3, #18
 80031f2:	d130      	bne.n	8003256 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	2203      	movs	r2, #3
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800322a:	2201      	movs	r2, #1
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	091b      	lsrs	r3, r3, #4
 8003240:	f003 0201 	and.w	r2, r3, #1
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	2203      	movs	r2, #3
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_Init+0xea>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b12      	cmp	r3, #18
 8003294:	d123      	bne.n	80032de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	08da      	lsrs	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3208      	adds	r2, #8
 800329e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	220f      	movs	r2, #15
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4013      	ands	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	08da      	lsrs	r2, r3, #3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3208      	adds	r2, #8
 80032d8:	6939      	ldr	r1, [r7, #16]
 80032da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	2203      	movs	r2, #3
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4013      	ands	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0203 	and.w	r2, r3, #3
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 809a 	beq.w	8003454 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003320:	4b55      	ldr	r3, [pc, #340]	; (8003478 <HAL_GPIO_Init+0x2cc>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	4a54      	ldr	r2, [pc, #336]	; (8003478 <HAL_GPIO_Init+0x2cc>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	6193      	str	r3, [r2, #24]
 800332c:	4b52      	ldr	r3, [pc, #328]	; (8003478 <HAL_GPIO_Init+0x2cc>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003338:	4a50      	ldr	r2, [pc, #320]	; (800347c <HAL_GPIO_Init+0x2d0>)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	089b      	lsrs	r3, r3, #2
 800333e:	3302      	adds	r3, #2
 8003340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003344:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	220f      	movs	r2, #15
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003362:	d013      	beq.n	800338c <HAL_GPIO_Init+0x1e0>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a46      	ldr	r2, [pc, #280]	; (8003480 <HAL_GPIO_Init+0x2d4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00d      	beq.n	8003388 <HAL_GPIO_Init+0x1dc>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a45      	ldr	r2, [pc, #276]	; (8003484 <HAL_GPIO_Init+0x2d8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d007      	beq.n	8003384 <HAL_GPIO_Init+0x1d8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a44      	ldr	r2, [pc, #272]	; (8003488 <HAL_GPIO_Init+0x2dc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d101      	bne.n	8003380 <HAL_GPIO_Init+0x1d4>
 800337c:	2303      	movs	r3, #3
 800337e:	e006      	b.n	800338e <HAL_GPIO_Init+0x1e2>
 8003380:	2305      	movs	r3, #5
 8003382:	e004      	b.n	800338e <HAL_GPIO_Init+0x1e2>
 8003384:	2302      	movs	r3, #2
 8003386:	e002      	b.n	800338e <HAL_GPIO_Init+0x1e2>
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <HAL_GPIO_Init+0x1e2>
 800338c:	2300      	movs	r3, #0
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	f002 0203 	and.w	r2, r2, #3
 8003394:	0092      	lsls	r2, r2, #2
 8003396:	4093      	lsls	r3, r2
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800339e:	4937      	ldr	r1, [pc, #220]	; (800347c <HAL_GPIO_Init+0x2d0>)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3302      	adds	r3, #2
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033ac:	4b37      	ldr	r3, [pc, #220]	; (800348c <HAL_GPIO_Init+0x2e0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033d0:	4a2e      	ldr	r2, [pc, #184]	; (800348c <HAL_GPIO_Init+0x2e0>)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033d6:	4b2d      	ldr	r3, [pc, #180]	; (800348c <HAL_GPIO_Init+0x2e0>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	43db      	mvns	r3, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033fa:	4a24      	ldr	r2, [pc, #144]	; (800348c <HAL_GPIO_Init+0x2e0>)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003400:	4b22      	ldr	r3, [pc, #136]	; (800348c <HAL_GPIO_Init+0x2e0>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	43db      	mvns	r3, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003424:	4a19      	ldr	r2, [pc, #100]	; (800348c <HAL_GPIO_Init+0x2e0>)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800342a:	4b18      	ldr	r3, [pc, #96]	; (800348c <HAL_GPIO_Init+0x2e0>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	43db      	mvns	r3, r3
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4013      	ands	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800344e:	4a0f      	ldr	r2, [pc, #60]	; (800348c <HAL_GPIO_Init+0x2e0>)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	3301      	adds	r3, #1
 8003458:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	f47f aea9 	bne.w	80031bc <HAL_GPIO_Init+0x10>
  }
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000
 800347c:	40010000 	.word	0x40010000
 8003480:	48000400 	.word	0x48000400
 8003484:	48000800 	.word	0x48000800
 8003488:	48000c00 	.word	0x48000c00
 800348c:	40010400 	.word	0x40010400

08003490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	807b      	strh	r3, [r7, #2]
 800349c:	4613      	mov	r3, r2
 800349e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034a0:	787b      	ldrb	r3, [r7, #1]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034a6:	887a      	ldrh	r2, [r7, #2]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034ac:	e002      	b.n	80034b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4013      	ands	r3, r2
 80034d8:	041a      	lsls	r2, r3, #16
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	43d9      	mvns	r1, r3
 80034de:	887b      	ldrh	r3, [r7, #2]
 80034e0:	400b      	ands	r3, r1
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	619a      	str	r2, [r3, #24]
}
 80034e8:	bf00      	nop
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e0ba      	b.n	800367c <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d02e      	beq.n	80035a8 <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a4d      	ldr	r2, [pc, #308]	; (8003684 <HAL_HRTIM_Init+0x190>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d10b      	bne.n	800356c <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8003554:	4b4c      	ldr	r3, [pc, #304]	; (8003688 <HAL_HRTIM_Init+0x194>)
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	4a4b      	ldr	r2, [pc, #300]	; (8003688 <HAL_HRTIM_Init+0x194>)
 800355a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800355e:	6193      	str	r3, [r2, #24]
 8003560:	4b49      	ldr	r3, [pc, #292]	; (8003688 <HAL_HRTIM_Init+0x194>)
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800357a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003590:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7fe f8f9 	bl	80017a0 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d012      	beq.n	80035e0 <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80035f0:	2300      	movs	r3, #0
 80035f2:	75fb      	strb	r3, [r7, #23]
 80035f4:	e03e      	b.n	8003674 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80035f6:	7dfa      	ldrb	r2, [r7, #23]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	3318      	adds	r3, #24
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800360a:	7dfa      	ldrb	r2, [r7, #23]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	331c      	adds	r3, #28
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800361e:	7dfa      	ldrb	r2, [r7, #23]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	3320      	adds	r3, #32
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8003632:	7dfa      	ldrb	r2, [r7, #23]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	3324      	adds	r3, #36	; 0x24
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8003646:	7dfa      	ldrb	r2, [r7, #23]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	3328      	adds	r3, #40	; 0x28
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800365a:	7dfa      	ldrb	r2, [r7, #23]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	3330      	adds	r3, #48	; 0x30
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800366e:	7dfb      	ldrb	r3, [r7, #23]
 8003670:	3301      	adds	r3, #1
 8003672:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003674:	7dfb      	ldrb	r3, [r7, #23]
 8003676:	2b05      	cmp	r3, #5
 8003678:	d9bd      	bls.n	80035f6 <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40017400 	.word	0x40017400
 8003688:	40021000 	.word	0x40021000

0800368c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d101      	bne.n	80036a8 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
 80036a6:	e015      	b.n	80036d4 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d104      	bne.n	80036c0 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fb26 	bl	8003d0a <HRTIM_MasterBase_Config>
 80036be:	e004      	b.n	80036ca <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fb4f 	bl	8003d68 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d101      	bne.n	80036f8 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80036f4:	2302      	movs	r3, #2
 80036f6:	e05f      	b.n	80037b8 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8003702:	2302      	movs	r3, #2
 8003704:	e058      	b.n	80037b8 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2202      	movs	r2, #2
 8003712:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b05      	cmp	r3, #5
 800371a:	d104      	bne.n	8003726 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fb62 	bl	8003de8 <HRTIM_MasterWaveform_Config>
 8003724:	e004      	b.n	8003730 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fbc2 	bl	8003eb4 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6819      	ldr	r1, [r3, #0]
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4403      	add	r3, r0
 8003742:	3320      	adds	r3, #32
 8003744:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6859      	ldr	r1, [r3, #4]
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4403      	add	r3, r0
 8003758:	3324      	adds	r3, #36	; 0x24
 800375a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6899      	ldr	r1, [r3, #8]
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4403      	add	r3, r0
 800376e:	3328      	adds	r3, #40	; 0x28
 8003770:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68d9      	ldr	r1, [r3, #12]
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	4613      	mov	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4403      	add	r3, r0
 8003784:	332c      	adds	r3, #44	; 0x2c
 8003786:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6919      	ldr	r1, [r3, #16]
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4403      	add	r3, r0
 800379a:	3330      	adds	r3, #48	; 0x30
 800379c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fd7d 	bl	80042a0 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d101      	bne.n	80037dc <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
     return HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
 80037da:	e067      	b.n	80038ac <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_HRTIM_DeadTimeConfig+0x2a>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e060      	b.n	80038ac <HAL_HRTIM_DeadTimeConfig+0xec>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2202      	movs	r2, #2
 80037f6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003802:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	041a      	lsls	r2, r3, #16
 8003842:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HAL_HRTIM_DeadTimeConfig+0xf8>)
 8003844:	4013      	ands	r3, r2
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	4313      	orrs	r3, r2
 8003874:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	01db      	lsls	r3, r3, #7
 800387e:	4413      	add	r3, r2
 8003880:	33b8      	adds	r3, #184	; 0xb8
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <HAL_HRTIM_DeadTimeConfig+0xfc>)
 8003886:	4013      	ands	r3, r2
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	6811      	ldr	r1, [r2, #0]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	431a      	orrs	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	01db      	lsls	r3, r3, #7
 8003894:	440b      	add	r3, r1
 8003896:	33b8      	adds	r3, #184	; 0xb8
 8003898:	601a      	str	r2, [r3, #0]
                 HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
                 HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	01ff0000 	.word	0x01ff0000
 80038bc:	3c002000 	.word	0x3c002000

080038c0 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d101      	bne.n	80038de <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80038da:	2302      	movs	r3, #2
 80038dc:	e157      	b.n	8003b8e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e150      	b.n	8003b8e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b05      	cmp	r3, #5
 8003900:	d140      	bne.n	8003984 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3b01      	subs	r3, #1
 8003906:	2b07      	cmp	r3, #7
 8003908:	d82a      	bhi.n	8003960 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800390a:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003931 	.word	0x08003931
 8003914:	0800393d 	.word	0x0800393d
 8003918:	08003961 	.word	0x08003961
 800391c:	08003949 	.word	0x08003949
 8003920:	08003961 	.word	0x08003961
 8003924:	08003961 	.word	0x08003961
 8003928:	08003961 	.word	0x08003961
 800392c:	08003955 	.word	0x08003955
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	61da      	str	r2, [r3, #28]
        break;
 800393a:	e01a      	b.n	8003972 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8003946:	e014      	b.n	8003972 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8003952:	e00e      	b.n	8003972 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800395e:	e008      	b.n	8003972 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2207      	movs	r2, #7
 8003964:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8003970:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b07      	cmp	r3, #7
 800397c:	f040 80fe 	bne.w	8003b7c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e104      	b.n	8003b8e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3b01      	subs	r3, #1
 8003988:	2b07      	cmp	r3, #7
 800398a:	f200 80e3 	bhi.w	8003b54 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800398e:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8003990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003994:	080039b5 	.word	0x080039b5
 8003998:	080039c9 	.word	0x080039c9
 800399c:	08003b55 	.word	0x08003b55
 80039a0:	08003a85 	.word	0x08003a85
 80039a4:	08003b55 	.word	0x08003b55
 80039a8:	08003b55 	.word	0x08003b55
 80039ac:	08003b55 	.word	0x08003b55
 80039b0:	08003a99 	.word	0x08003a99
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6819      	ldr	r1, [r3, #0]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	01db      	lsls	r3, r3, #7
 80039c0:	440b      	add	r3, r1
 80039c2:	339c      	adds	r3, #156	; 0x9c
 80039c4:	601a      	str	r2, [r3, #0]
        break;
 80039c6:	e0d1      	b.n	8003b6c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6819      	ldr	r1, [r3, #0]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	01db      	lsls	r3, r3, #7
 80039d4:	440b      	add	r3, r1
 80039d6:	33a4      	adds	r3, #164	; 0xa4
 80039d8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d03f      	beq.n	8003a62 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	3301      	adds	r3, #1
 80039ea:	01db      	lsls	r3, r3, #7
 80039ec:	4413      	add	r3, r2
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	6811      	ldr	r1, [r2, #0]
 80039f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	3301      	adds	r3, #1
 80039fc:	01db      	lsls	r3, r3, #7
 80039fe:	440b      	add	r3, r1
 8003a00:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	01db      	lsls	r3, r3, #7
 8003a0c:	4413      	add	r3, r2
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	68f9      	ldr	r1, [r7, #12]
 8003a16:	6809      	ldr	r1, [r1, #0]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	01db      	lsls	r3, r3, #7
 8003a20:	440b      	add	r3, r1
 8003a22:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2c:	d109      	bne.n	8003a42 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6819      	ldr	r1, [r3, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	01db      	lsls	r3, r3, #7
 8003a3a:	440b      	add	r3, r1
 8003a3c:	339c      	adds	r3, #156	; 0x9c
 8003a3e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8003a40:	e091      	b.n	8003b66 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a4a:	f040 808c 	bne.w	8003b66 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6819      	ldr	r1, [r3, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	01db      	lsls	r3, r3, #7
 8003a5a:	440b      	add	r3, r1
 8003a5c:	33a8      	adds	r3, #168	; 0xa8
 8003a5e:	601a      	str	r2, [r3, #0]
         break;
 8003a60:	e081      	b.n	8003b66 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	01db      	lsls	r3, r3, #7
 8003a6c:	4413      	add	r3, r2
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	6811      	ldr	r1, [r2, #0]
 8003a74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	01db      	lsls	r3, r3, #7
 8003a7e:	440b      	add	r3, r1
 8003a80:	601a      	str	r2, [r3, #0]
         break;
 8003a82:	e070      	b.n	8003b66 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6819      	ldr	r1, [r3, #0]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	01db      	lsls	r3, r3, #7
 8003a90:	440b      	add	r3, r1
 8003a92:	33a8      	adds	r3, #168	; 0xa8
 8003a94:	601a      	str	r2, [r3, #0]
        break;
 8003a96:	e069      	b.n	8003b6c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6819      	ldr	r1, [r3, #0]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	01db      	lsls	r3, r3, #7
 8003aa4:	440b      	add	r3, r1
 8003aa6:	33ac      	adds	r3, #172	; 0xac
 8003aa8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d03f      	beq.n	8003b32 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	01db      	lsls	r3, r3, #7
 8003abc:	4413      	add	r3, r2
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	6811      	ldr	r1, [r2, #0]
 8003ac4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	3301      	adds	r3, #1
 8003acc:	01db      	lsls	r3, r3, #7
 8003ace:	440b      	add	r3, r1
 8003ad0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	01db      	lsls	r3, r3, #7
 8003adc:	4413      	add	r3, r2
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	68f9      	ldr	r1, [r7, #12]
 8003ae8:	6809      	ldr	r1, [r1, #0]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	3301      	adds	r3, #1
 8003af0:	01db      	lsls	r3, r3, #7
 8003af2:	440b      	add	r3, r1
 8003af4:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afe:	d109      	bne.n	8003b14 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6819      	ldr	r1, [r3, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	01db      	lsls	r3, r3, #7
 8003b0c:	440b      	add	r3, r1
 8003b0e:	339c      	adds	r3, #156	; 0x9c
 8003b10:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8003b12:	e02a      	b.n	8003b6a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b1c:	d125      	bne.n	8003b6a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6819      	ldr	r1, [r3, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	01db      	lsls	r3, r3, #7
 8003b2a:	440b      	add	r3, r1
 8003b2c:	33a8      	adds	r3, #168	; 0xa8
 8003b2e:	601a      	str	r2, [r3, #0]
         break;
 8003b30:	e01b      	b.n	8003b6a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	01db      	lsls	r3, r3, #7
 8003b3c:	4413      	add	r3, r2
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	6811      	ldr	r1, [r2, #0]
 8003b44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	01db      	lsls	r3, r3, #7
 8003b4e:	440b      	add	r3, r1
 8003b50:	601a      	str	r2, [r3, #0]
         break;
 8003b52:	e00a      	b.n	8003b6a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2207      	movs	r2, #7
 8003b58:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8003b64:	e002      	b.n	8003b6c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8003b66:	bf00      	nop
 8003b68:	e000      	b.n	8003b6c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8003b6a:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b07      	cmp	r3, #7
 8003b76:	d101      	bne.n	8003b7c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e008      	b.n	8003b8e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop

08003b9c <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d101      	bne.n	8003bba <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e01d      	b.n	8003bf6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e016      	b.n	8003bf6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 faa8 	bl	8004134 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_HRTIM_WaveformOutputStart+0x18>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e01a      	b.n	8003c4c <HAL_HRTIM_WaveformOutputStart+0x4e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_HRTIM_WaveformCountStart+0x18>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e018      	b.n	8003ca2 <HAL_HRTIM_WaveformCountStart+0x4a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6819      	ldr	r1, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_HRTIM_UpdateEnable>:
  *                   @arg HRTIM_TIMERUPDATE_E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_UpdateEnable(HRTIM_HandleTypeDef *hhrtim,
                                          uint32_t Timers)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMERUPDATE(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_HRTIM_UpdateEnable+0x18>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e01b      	b.n	8003cfe <HAL_HRTIM_UpdateEnable+0x50>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable timer(s) registers update */
  hhrtim->Instance->sCommonRegs.CR1 &= ~(Timers);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8d3 1380 	ldr.w	r1, [r3, #896]	; 0x380
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	43da      	mvns	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	400a      	ands	r2, r1
 8003ce8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
  }
 8003cfe:	4618      	mov	r0, r3
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0307 	bic.w	r3, r3, #7
 8003d22:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f023 0318 	bic.w	r3, r3, #24
 8003d34:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	6852      	ldr	r2, [r2, #4]
 8003d5a:	619a      	str	r2, [r3, #24]
}
 8003d5c:	bf00      	nop
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	01db      	lsls	r3, r3, #7
 8003d7e:	4413      	add	r3, r2
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f023 0307 	bic.w	r3, r3, #7
 8003d8a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f023 0318 	bic.w	r3, r3, #24
 8003d9c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	3301      	adds	r3, #1
 8003db0:	01db      	lsls	r3, r3, #7
 8003db2:	4413      	add	r3, r2
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6819      	ldr	r1, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	01db      	lsls	r3, r3, #7
 8003dc4:	440b      	add	r3, r1
 8003dc6:	3394      	adds	r3, #148	; 0x94
 8003dc8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6819      	ldr	r1, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	01db      	lsls	r3, r3, #7
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3398      	adds	r3, #152	; 0x98
 8003dda:	601a      	str	r2, [r3, #0]
}
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003e02:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0320 	bic.w	r3, r3, #32
 8003e0a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e1c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e2e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e40:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003e52:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e64:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003e78:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e8a:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8003ea8:	bf00      	nop
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b08b      	sub	sp, #44	; 0x2c
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	01db      	lsls	r3, r3, #7
 8003eca:	4413      	add	r3, r2
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	6811      	ldr	r1, [r2, #0]
 8003ed2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	01db      	lsls	r3, r3, #7
 8003edc:	440b      	add	r3, r1
 8003ede:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	01db      	lsls	r3, r3, #7
 8003eea:	4413      	add	r3, r2
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	01db      	lsls	r3, r3, #7
 8003ef8:	4413      	add	r3, r2
 8003efa:	33e8      	adds	r3, #232	; 0xe8
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	01db      	lsls	r3, r3, #7
 8003f08:	4413      	add	r3, r2
 8003f0a:	33e4      	adds	r3, #228	; 0xe4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003f18:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	f023 0320 	bic.w	r3, r3, #32
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f70:	4313      	orrs	r3, r2
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f82:	4313      	orrs	r3, r2
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f96:	d103      	bne.n	8003fa0 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f023 031f 	bic.w	r3, r3, #31
 8003fdc:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ff2:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004002:	2b00      	cmp	r3, #0
 8004004:	d108      	bne.n	8004018 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800400c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	6a3a      	ldr	r2, [r7, #32]
 8004014:	4313      	orrs	r3, r2
 8004016:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401c:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004020:	d004      	beq.n	800402c <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800402a:	d103      	bne.n	8004034 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004030:	2b40      	cmp	r3, #64	; 0x40
 8004032:	d108      	bne.n	8004046 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 800403a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004040:	6a3a      	ldr	r2, [r7, #32]
 8004042:	4313      	orrs	r3, r2
 8004044:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b04      	cmp	r3, #4
 8004050:	d843      	bhi.n	80040da <HRTIM_TimingUnitWaveform_Config+0x226>
 8004052:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	0800406d 	.word	0x0800406d
 800405c:	08004083 	.word	0x08004083
 8004060:	08004099 	.word	0x08004099
 8004064:	080040af 	.word	0x080040af
 8004068:	080040c5 	.word	0x080040c5
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004072:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	4313      	orrs	r3, r2
 800407e:	61fb      	str	r3, [r7, #28]
      break;
 8004080:	e02c      	b.n	80040dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004088:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	4313      	orrs	r3, r2
 8004094:	61fb      	str	r3, [r7, #28]
      break;
 8004096:	e021      	b.n	80040dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800409e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61fb      	str	r3, [r7, #28]
      break;
 80040ac:	e016      	b.n	80040dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80040b4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	4313      	orrs	r3, r2
 80040c0:	61fb      	str	r3, [r7, #28]
      break;
 80040c2:	e00b      	b.n	80040dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040ca:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	015b      	lsls	r3, r3, #5
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61fb      	str	r3, [r7, #28]
      break;
 80040d8:	e000      	b.n	80040dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80040da:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	3301      	adds	r3, #1
 80040e4:	01db      	lsls	r3, r3, #7
 80040e6:	4413      	add	r3, r2
 80040e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ea:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	01db      	lsls	r3, r3, #7
 80040f4:	4413      	add	r3, r2
 80040f6:	33e8      	adds	r3, #232	; 0xe8
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	01db      	lsls	r3, r3, #7
 8004104:	4413      	add	r3, r2
 8004106:	33e4      	adds	r3, #228	; 0xe4
 8004108:	6a3a      	ldr	r2, [r7, #32]
 800410a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	01db      	lsls	r3, r3, #7
 8004114:	4413      	add	r3, r2
 8004116:	33d4      	adds	r3, #212	; 0xd4
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8004126:	bf00      	nop
 8004128:	372c      	adds	r7, #44	; 0x2c
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop

08004134 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8004134:	b480      	push	{r7}
 8004136:	b089      	sub	sp, #36	; 0x24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	01db      	lsls	r3, r3, #7
 800414e:	4413      	add	r3, r2
 8004150:	33e4      	adds	r3, #228	; 0xe4
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	01db      	lsls	r3, r3, #7
 800415e:	4413      	add	r3, r2
 8004160:	33b8      	adds	r3, #184	; 0xb8
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	617b      	str	r3, [r7, #20]

  switch (Output)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b10      	cmp	r3, #16
 800416a:	d01d      	beq.n	80041a8 <HRTIM_OutputConfig+0x74>
 800416c:	2b10      	cmp	r3, #16
 800416e:	d80b      	bhi.n	8004188 <HRTIM_OutputConfig+0x54>
 8004170:	2b02      	cmp	r3, #2
 8004172:	d02c      	beq.n	80041ce <HRTIM_OutputConfig+0x9a>
 8004174:	2b02      	cmp	r3, #2
 8004176:	d802      	bhi.n	800417e <HRTIM_OutputConfig+0x4a>
 8004178:	2b01      	cmp	r3, #1
 800417a:	d015      	beq.n	80041a8 <HRTIM_OutputConfig+0x74>
      shift = 16U;
      break;
    }

  default:
    break;
 800417c:	e03c      	b.n	80041f8 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 800417e:	2b04      	cmp	r3, #4
 8004180:	d012      	beq.n	80041a8 <HRTIM_OutputConfig+0x74>
 8004182:	2b08      	cmp	r3, #8
 8004184:	d023      	beq.n	80041ce <HRTIM_OutputConfig+0x9a>
    break;
 8004186:	e037      	b.n	80041f8 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 8004188:	2b80      	cmp	r3, #128	; 0x80
 800418a:	d020      	beq.n	80041ce <HRTIM_OutputConfig+0x9a>
 800418c:	2b80      	cmp	r3, #128	; 0x80
 800418e:	d804      	bhi.n	800419a <HRTIM_OutputConfig+0x66>
 8004190:	2b20      	cmp	r3, #32
 8004192:	d01c      	beq.n	80041ce <HRTIM_OutputConfig+0x9a>
 8004194:	2b40      	cmp	r3, #64	; 0x40
 8004196:	d007      	beq.n	80041a8 <HRTIM_OutputConfig+0x74>
    break;
 8004198:	e02e      	b.n	80041f8 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 800419a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800419e:	d003      	beq.n	80041a8 <HRTIM_OutputConfig+0x74>
 80041a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a4:	d013      	beq.n	80041ce <HRTIM_OutputConfig+0x9a>
    break;
 80041a6:	e027      	b.n	80041f8 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6819      	ldr	r1, [r3, #0]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	01db      	lsls	r3, r3, #7
 80041b4:	440b      	add	r3, r1
 80041b6:	33bc      	adds	r3, #188	; 0xbc
 80041b8:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6819      	ldr	r1, [r3, #0]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	01db      	lsls	r3, r3, #7
 80041c6:	440b      	add	r3, r1
 80041c8:	33c0      	adds	r3, #192	; 0xc0
 80041ca:	601a      	str	r2, [r3, #0]
      break;
 80041cc:	e014      	b.n	80041f8 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6819      	ldr	r1, [r3, #0]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	01db      	lsls	r3, r3, #7
 80041da:	440b      	add	r3, r1
 80041dc:	33c4      	adds	r3, #196	; 0xc4
 80041de:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6819      	ldr	r1, [r3, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	01db      	lsls	r3, r3, #7
 80041ec:	440b      	add	r3, r1
 80041ee:	33c8      	adds	r3, #200	; 0xc8
 80041f0:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80041f2:	2310      	movs	r3, #16
 80041f4:	61bb      	str	r3, [r7, #24]
      break;
 80041f6:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80041f8:	22fe      	movs	r2, #254	; 0xfe
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8004200:	43db      	mvns	r3, r3
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	4013      	ands	r3, r2
 8004206:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	4313      	orrs	r3, r2
 8004216:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	4313      	orrs	r3, r2
 8004226:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	4313      	orrs	r3, r2
 8004236:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	4313      	orrs	r3, r2
 8004246:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	699a      	ldr	r2, [r3, #24]
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	4313      	orrs	r3, r2
 8004256:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	2b08      	cmp	r3, #8
 800425e:	d111      	bne.n	8004284 <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10c      	bne.n	8004284 <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004270:	2b00      	cmp	r3, #0
 8004272:	d107      	bne.n	8004284 <HRTIM_OutputConfig+0x150>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	4313      	orrs	r3, r2
 8004282:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	01db      	lsls	r3, r3, #7
 800428c:	4413      	add	r3, r2
 800428e:	33e4      	adds	r3, #228	; 0xe4
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	601a      	str	r2, [r3, #0]
}
 8004294:	bf00      	nop
 8004296:	3724      	adds	r7, #36	; 0x24
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b05      	cmp	r3, #5
 80042ae:	d851      	bhi.n	8004354 <HRTIM_ForceRegistersUpdate+0xb4>
 80042b0:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <HRTIM_ForceRegistersUpdate+0x18>)
 80042b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b6:	bf00      	nop
 80042b8:	080042e7 	.word	0x080042e7
 80042bc:	080042fd 	.word	0x080042fd
 80042c0:	08004313 	.word	0x08004313
 80042c4:	08004329 	.word	0x08004329
 80042c8:	0800433f 	.word	0x0800433f
 80042cc:	080042d1 	.word	0x080042d1
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0201 	orr.w	r2, r2, #1
 80042e0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042e4:	e037      	b.n	8004356 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0202 	orr.w	r2, r2, #2
 80042f6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042fa:	e02c      	b.n	8004356 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0204 	orr.w	r2, r2, #4
 800430c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004310:	e021      	b.n	8004356 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0208 	orr.w	r2, r2, #8
 8004322:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004326:	e016      	b.n	8004356 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0210 	orr.w	r2, r2, #16
 8004338:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800433c:	e00b      	b.n	8004356 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0220 	orr.w	r2, r2, #32
 800434e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004352:	e000      	b.n	8004356 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8004354:	bf00      	nop
  }
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop

08004364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800436a:	af00      	add	r7, sp, #0
 800436c:	1d3b      	adds	r3, r7, #4
 800436e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004370:	1d3b      	adds	r3, r7, #4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d102      	bne.n	800437e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	f000 bef4 	b.w	8005166 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800437e:	1d3b      	adds	r3, r7, #4
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 816a 	beq.w	8004662 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800438e:	4bb3      	ldr	r3, [pc, #716]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	2b04      	cmp	r3, #4
 8004398:	d00c      	beq.n	80043b4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800439a:	4bb0      	ldr	r3, [pc, #704]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f003 030c 	and.w	r3, r3, #12
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d159      	bne.n	800445a <HAL_RCC_OscConfig+0xf6>
 80043a6:	4bad      	ldr	r3, [pc, #692]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b2:	d152      	bne.n	800445a <HAL_RCC_OscConfig+0xf6>
 80043b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043b8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80043c0:	fa93 f3a3 	rbit	r3, r3
 80043c4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043c8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	fab3 f383 	clz	r3, r3
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d102      	bne.n	80043e6 <HAL_RCC_OscConfig+0x82>
 80043e0:	4b9e      	ldr	r3, [pc, #632]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	e015      	b.n	8004412 <HAL_RCC_OscConfig+0xae>
 80043e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043ea:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80043fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043fe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004402:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004406:	fa93 f3a3 	rbit	r3, r3
 800440a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800440e:	4b93      	ldr	r3, [pc, #588]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004416:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800441a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800441e:	fa92 f2a2 	rbit	r2, r2
 8004422:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004426:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800442a:	fab2 f282 	clz	r2, r2
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	f042 0220 	orr.w	r2, r2, #32
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	f002 021f 	and.w	r2, r2, #31
 800443a:	2101      	movs	r1, #1
 800443c:	fa01 f202 	lsl.w	r2, r1, r2
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 810c 	beq.w	8004660 <HAL_RCC_OscConfig+0x2fc>
 8004448:	1d3b      	adds	r3, r7, #4
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	f040 8106 	bne.w	8004660 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	f000 be86 	b.w	8005166 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800445a:	1d3b      	adds	r3, r7, #4
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004464:	d106      	bne.n	8004474 <HAL_RCC_OscConfig+0x110>
 8004466:	4b7d      	ldr	r3, [pc, #500]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a7c      	ldr	r2, [pc, #496]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 800446c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e030      	b.n	80044d6 <HAL_RCC_OscConfig+0x172>
 8004474:	1d3b      	adds	r3, r7, #4
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10c      	bne.n	8004498 <HAL_RCC_OscConfig+0x134>
 800447e:	4b77      	ldr	r3, [pc, #476]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a76      	ldr	r2, [pc, #472]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 8004484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	4b74      	ldr	r3, [pc, #464]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a73      	ldr	r2, [pc, #460]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 8004490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	e01e      	b.n	80044d6 <HAL_RCC_OscConfig+0x172>
 8004498:	1d3b      	adds	r3, r7, #4
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a2:	d10c      	bne.n	80044be <HAL_RCC_OscConfig+0x15a>
 80044a4:	4b6d      	ldr	r3, [pc, #436]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a6c      	ldr	r2, [pc, #432]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 80044aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	4b6a      	ldr	r3, [pc, #424]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a69      	ldr	r2, [pc, #420]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 80044b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	e00b      	b.n	80044d6 <HAL_RCC_OscConfig+0x172>
 80044be:	4b67      	ldr	r3, [pc, #412]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a66      	ldr	r2, [pc, #408]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 80044c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	4b64      	ldr	r3, [pc, #400]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a63      	ldr	r2, [pc, #396]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 80044d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044d6:	4b61      	ldr	r3, [pc, #388]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 80044d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044da:	f023 020f 	bic.w	r2, r3, #15
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	495d      	ldr	r1, [pc, #372]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044ea:	1d3b      	adds	r3, r7, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d059      	beq.n	80045a8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f4:	f7fd fb2c 	bl	8001b50 <HAL_GetTick>
 80044f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fc:	e00a      	b.n	8004514 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044fe:	f7fd fb27 	bl	8001b50 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	; 0x64
 800450c:	d902      	bls.n	8004514 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	f000 be29 	b.w	8005166 <HAL_RCC_OscConfig+0xe02>
 8004514:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004518:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004520:	fa93 f3a3 	rbit	r3, r3
 8004524:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004528:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452c:	fab3 f383 	clz	r3, r3
 8004530:	b2db      	uxtb	r3, r3
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	d102      	bne.n	8004546 <HAL_RCC_OscConfig+0x1e2>
 8004540:	4b46      	ldr	r3, [pc, #280]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	e015      	b.n	8004572 <HAL_RCC_OscConfig+0x20e>
 8004546:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800454a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004552:	fa93 f3a3 	rbit	r3, r3
 8004556:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800455a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800455e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004562:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004566:	fa93 f3a3 	rbit	r3, r3
 800456a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800456e:	4b3b      	ldr	r3, [pc, #236]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004576:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800457a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800457e:	fa92 f2a2 	rbit	r2, r2
 8004582:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004586:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800458a:	fab2 f282 	clz	r2, r2
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	f042 0220 	orr.w	r2, r2, #32
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	f002 021f 	and.w	r2, r2, #31
 800459a:	2101      	movs	r1, #1
 800459c:	fa01 f202 	lsl.w	r2, r1, r2
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0ab      	beq.n	80044fe <HAL_RCC_OscConfig+0x19a>
 80045a6:	e05c      	b.n	8004662 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fd fad2 	bl	8001b50 <HAL_GetTick>
 80045ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b0:	e00a      	b.n	80045c8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b2:	f7fd facd 	bl	8001b50 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b64      	cmp	r3, #100	; 0x64
 80045c0:	d902      	bls.n	80045c8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	f000 bdcf 	b.w	8005166 <HAL_RCC_OscConfig+0xe02>
 80045c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045cc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80045d4:	fa93 f3a3 	rbit	r3, r3
 80045d8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80045dc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045e0:	fab3 f383 	clz	r3, r3
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d102      	bne.n	80045fa <HAL_RCC_OscConfig+0x296>
 80045f4:	4b19      	ldr	r3, [pc, #100]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	e015      	b.n	8004626 <HAL_RCC_OscConfig+0x2c2>
 80045fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045fe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004602:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004606:	fa93 f3a3 	rbit	r3, r3
 800460a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800460e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004612:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004616:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800461a:	fa93 f3a3 	rbit	r3, r3
 800461e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004622:	4b0e      	ldr	r3, [pc, #56]	; (800465c <HAL_RCC_OscConfig+0x2f8>)
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800462a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800462e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004632:	fa92 f2a2 	rbit	r2, r2
 8004636:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800463a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800463e:	fab2 f282 	clz	r2, r2
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	f042 0220 	orr.w	r2, r2, #32
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	f002 021f 	and.w	r2, r2, #31
 800464e:	2101      	movs	r1, #1
 8004650:	fa01 f202 	lsl.w	r2, r1, r2
 8004654:	4013      	ands	r3, r2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1ab      	bne.n	80045b2 <HAL_RCC_OscConfig+0x24e>
 800465a:	e002      	b.n	8004662 <HAL_RCC_OscConfig+0x2fe>
 800465c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004662:	1d3b      	adds	r3, r7, #4
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 816f 	beq.w	8004950 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004672:	4bd0      	ldr	r3, [pc, #832]	; (80049b4 <HAL_RCC_OscConfig+0x650>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f003 030c 	and.w	r3, r3, #12
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00b      	beq.n	8004696 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800467e:	4bcd      	ldr	r3, [pc, #820]	; (80049b4 <HAL_RCC_OscConfig+0x650>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 030c 	and.w	r3, r3, #12
 8004686:	2b08      	cmp	r3, #8
 8004688:	d16c      	bne.n	8004764 <HAL_RCC_OscConfig+0x400>
 800468a:	4bca      	ldr	r3, [pc, #808]	; (80049b4 <HAL_RCC_OscConfig+0x650>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d166      	bne.n	8004764 <HAL_RCC_OscConfig+0x400>
 8004696:	2302      	movs	r3, #2
 8004698:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80046a0:	fa93 f3a3 	rbit	r3, r3
 80046a4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80046a8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ac:	fab3 f383 	clz	r3, r3
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d102      	bne.n	80046c6 <HAL_RCC_OscConfig+0x362>
 80046c0:	4bbc      	ldr	r3, [pc, #752]	; (80049b4 <HAL_RCC_OscConfig+0x650>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	e013      	b.n	80046ee <HAL_RCC_OscConfig+0x38a>
 80046c6:	2302      	movs	r3, #2
 80046c8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046cc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80046d0:	fa93 f3a3 	rbit	r3, r3
 80046d4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80046d8:	2302      	movs	r3, #2
 80046da:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80046de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80046e2:	fa93 f3a3 	rbit	r3, r3
 80046e6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80046ea:	4bb2      	ldr	r3, [pc, #712]	; (80049b4 <HAL_RCC_OscConfig+0x650>)
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	2202      	movs	r2, #2
 80046f0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80046f4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80046f8:	fa92 f2a2 	rbit	r2, r2
 80046fc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004700:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004704:	fab2 f282 	clz	r2, r2
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	f042 0220 	orr.w	r2, r2, #32
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	f002 021f 	and.w	r2, r2, #31
 8004714:	2101      	movs	r1, #1
 8004716:	fa01 f202 	lsl.w	r2, r1, r2
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d007      	beq.n	8004730 <HAL_RCC_OscConfig+0x3cc>
 8004720:	1d3b      	adds	r3, r7, #4
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d002      	beq.n	8004730 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f000 bd1b 	b.w	8005166 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004730:	4ba0      	ldr	r3, [pc, #640]	; (80049b4 <HAL_RCC_OscConfig+0x650>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004738:	1d3b      	adds	r3, r7, #4
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	21f8      	movs	r1, #248	; 0xf8
 8004740:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004744:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004748:	fa91 f1a1 	rbit	r1, r1
 800474c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004750:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004754:	fab1 f181 	clz	r1, r1
 8004758:	b2c9      	uxtb	r1, r1
 800475a:	408b      	lsls	r3, r1
 800475c:	4995      	ldr	r1, [pc, #596]	; (80049b4 <HAL_RCC_OscConfig+0x650>)
 800475e:	4313      	orrs	r3, r2
 8004760:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004762:	e0f5      	b.n	8004950 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004764:	1d3b      	adds	r3, r7, #4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 8085 	beq.w	800487a <HAL_RCC_OscConfig+0x516>
 8004770:	2301      	movs	r3, #1
 8004772:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004776:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800477a:	fa93 f3a3 	rbit	r3, r3
 800477e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004782:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004790:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	461a      	mov	r2, r3
 8004798:	2301      	movs	r3, #1
 800479a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479c:	f7fd f9d8 	bl	8001b50 <HAL_GetTick>
 80047a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a4:	e00a      	b.n	80047bc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047a6:	f7fd f9d3 	bl	8001b50 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d902      	bls.n	80047bc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	f000 bcd5 	b.w	8005166 <HAL_RCC_OscConfig+0xe02>
 80047bc:	2302      	movs	r3, #2
 80047be:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80047c6:	fa93 f3a3 	rbit	r3, r3
 80047ca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80047ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d2:	fab3 f383 	clz	r3, r3
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	095b      	lsrs	r3, r3, #5
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d102      	bne.n	80047ec <HAL_RCC_OscConfig+0x488>
 80047e6:	4b73      	ldr	r3, [pc, #460]	; (80049b4 <HAL_RCC_OscConfig+0x650>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	e013      	b.n	8004814 <HAL_RCC_OscConfig+0x4b0>
 80047ec:	2302      	movs	r3, #2
 80047ee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80047f6:	fa93 f3a3 	rbit	r3, r3
 80047fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80047fe:	2302      	movs	r3, #2
 8004800:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004804:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004808:	fa93 f3a3 	rbit	r3, r3
 800480c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004810:	4b68      	ldr	r3, [pc, #416]	; (80049b4 <HAL_RCC_OscConfig+0x650>)
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	2202      	movs	r2, #2
 8004816:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800481a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800481e:	fa92 f2a2 	rbit	r2, r2
 8004822:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004826:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800482a:	fab2 f282 	clz	r2, r2
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	f042 0220 	orr.w	r2, r2, #32
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	f002 021f 	and.w	r2, r2, #31
 800483a:	2101      	movs	r1, #1
 800483c:	fa01 f202 	lsl.w	r2, r1, r2
 8004840:	4013      	ands	r3, r2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0af      	beq.n	80047a6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004846:	4b5b      	ldr	r3, [pc, #364]	; (80049b4 <HAL_RCC_OscConfig+0x650>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800484e:	1d3b      	adds	r3, r7, #4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	21f8      	movs	r1, #248	; 0xf8
 8004856:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800485e:	fa91 f1a1 	rbit	r1, r1
 8004862:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004866:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800486a:	fab1 f181 	clz	r1, r1
 800486e:	b2c9      	uxtb	r1, r1
 8004870:	408b      	lsls	r3, r1
 8004872:	4950      	ldr	r1, [pc, #320]	; (80049b4 <HAL_RCC_OscConfig+0x650>)
 8004874:	4313      	orrs	r3, r2
 8004876:	600b      	str	r3, [r1, #0]
 8004878:	e06a      	b.n	8004950 <HAL_RCC_OscConfig+0x5ec>
 800487a:	2301      	movs	r3, #1
 800487c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004880:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004884:	fa93 f3a3 	rbit	r3, r3
 8004888:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800488c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004890:	fab3 f383 	clz	r3, r3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800489a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	461a      	mov	r2, r3
 80048a2:	2300      	movs	r3, #0
 80048a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a6:	f7fd f953 	bl	8001b50 <HAL_GetTick>
 80048aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ae:	e00a      	b.n	80048c6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b0:	f7fd f94e 	bl	8001b50 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d902      	bls.n	80048c6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	f000 bc50 	b.w	8005166 <HAL_RCC_OscConfig+0xe02>
 80048c6:	2302      	movs	r3, #2
 80048c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80048d0:	fa93 f3a3 	rbit	r3, r3
 80048d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80048d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048dc:	fab3 f383 	clz	r3, r3
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d102      	bne.n	80048f6 <HAL_RCC_OscConfig+0x592>
 80048f0:	4b30      	ldr	r3, [pc, #192]	; (80049b4 <HAL_RCC_OscConfig+0x650>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	e013      	b.n	800491e <HAL_RCC_OscConfig+0x5ba>
 80048f6:	2302      	movs	r3, #2
 80048f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004900:	fa93 f3a3 	rbit	r3, r3
 8004904:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004908:	2302      	movs	r3, #2
 800490a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800490e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004912:	fa93 f3a3 	rbit	r3, r3
 8004916:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800491a:	4b26      	ldr	r3, [pc, #152]	; (80049b4 <HAL_RCC_OscConfig+0x650>)
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	2202      	movs	r2, #2
 8004920:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004924:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004928:	fa92 f2a2 	rbit	r2, r2
 800492c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004930:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004934:	fab2 f282 	clz	r2, r2
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	f042 0220 	orr.w	r2, r2, #32
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	f002 021f 	and.w	r2, r2, #31
 8004944:	2101      	movs	r1, #1
 8004946:	fa01 f202 	lsl.w	r2, r1, r2
 800494a:	4013      	ands	r3, r2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1af      	bne.n	80048b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004950:	1d3b      	adds	r3, r7, #4
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80da 	beq.w	8004b14 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004960:	1d3b      	adds	r3, r7, #4
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d069      	beq.n	8004a3e <HAL_RCC_OscConfig+0x6da>
 800496a:	2301      	movs	r3, #1
 800496c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004970:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004974:	fa93 f3a3 	rbit	r3, r3
 8004978:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800497c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004980:	fab3 f383 	clz	r3, r3
 8004984:	b2db      	uxtb	r3, r3
 8004986:	461a      	mov	r2, r3
 8004988:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <HAL_RCC_OscConfig+0x654>)
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	461a      	mov	r2, r3
 8004990:	2301      	movs	r3, #1
 8004992:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004994:	f7fd f8dc 	bl	8001b50 <HAL_GetTick>
 8004998:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499c:	e00e      	b.n	80049bc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800499e:	f7fd f8d7 	bl	8001b50 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d906      	bls.n	80049bc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e3d9      	b.n	8005166 <HAL_RCC_OscConfig+0xe02>
 80049b2:	bf00      	nop
 80049b4:	40021000 	.word	0x40021000
 80049b8:	10908120 	.word	0x10908120
 80049bc:	2302      	movs	r3, #2
 80049be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049c6:	fa93 f3a3 	rbit	r3, r3
 80049ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80049d2:	2202      	movs	r2, #2
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	fa93 f2a3 	rbit	r2, r3
 80049e0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80049ea:	2202      	movs	r2, #2
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	fa93 f2a3 	rbit	r2, r3
 80049f8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80049fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049fe:	4ba5      	ldr	r3, [pc, #660]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004a00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a02:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004a06:	2102      	movs	r1, #2
 8004a08:	6019      	str	r1, [r3, #0]
 8004a0a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	fa93 f1a3 	rbit	r1, r3
 8004a14:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004a18:	6019      	str	r1, [r3, #0]
  return result;
 8004a1a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	fab3 f383 	clz	r3, r3
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	2101      	movs	r1, #1
 8004a32:	fa01 f303 	lsl.w	r3, r1, r3
 8004a36:	4013      	ands	r3, r2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0b0      	beq.n	800499e <HAL_RCC_OscConfig+0x63a>
 8004a3c:	e06a      	b.n	8004b14 <HAL_RCC_OscConfig+0x7b0>
 8004a3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004a42:	2201      	movs	r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a46:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	fa93 f2a3 	rbit	r2, r3
 8004a50:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004a54:	601a      	str	r2, [r3, #0]
  return result;
 8004a56:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004a5a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a5c:	fab3 f383 	clz	r3, r3
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	4b8c      	ldr	r3, [pc, #560]	; (8004c98 <HAL_RCC_OscConfig+0x934>)
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a70:	f7fd f86e 	bl	8001b50 <HAL_GetTick>
 8004a74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a78:	e009      	b.n	8004a8e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a7a:	f7fd f869 	bl	8001b50 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e36b      	b.n	8005166 <HAL_RCC_OscConfig+0xe02>
 8004a8e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004a92:	2202      	movs	r2, #2
 8004a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a96:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	fa93 f2a3 	rbit	r2, r3
 8004aa0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004aaa:	2202      	movs	r2, #2
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	fa93 f2a3 	rbit	r2, r3
 8004ab8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	fa93 f2a3 	rbit	r2, r3
 8004ad0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004ad4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad6:	4b6f      	ldr	r3, [pc, #444]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004ad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ada:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004ade:	2102      	movs	r1, #2
 8004ae0:	6019      	str	r1, [r3, #0]
 8004ae2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	fa93 f1a3 	rbit	r1, r3
 8004aec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004af0:	6019      	str	r1, [r3, #0]
  return result;
 8004af2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	fab3 f383 	clz	r3, r3
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	2101      	movs	r1, #1
 8004b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1b2      	bne.n	8004a7a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b14:	1d3b      	adds	r3, r7, #4
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 8158 	beq.w	8004dd4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b24:	2300      	movs	r3, #0
 8004b26:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b2a:	4b5a      	ldr	r3, [pc, #360]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d112      	bne.n	8004b5c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b36:	4b57      	ldr	r3, [pc, #348]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	4a56      	ldr	r2, [pc, #344]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b40:	61d3      	str	r3, [r2, #28]
 8004b42:	4b54      	ldr	r3, [pc, #336]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004b4a:	f107 0308 	add.w	r3, r7, #8
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	f107 0308 	add.w	r3, r7, #8
 8004b54:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004b56:	2301      	movs	r3, #1
 8004b58:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5c:	4b4f      	ldr	r3, [pc, #316]	; (8004c9c <HAL_RCC_OscConfig+0x938>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d11a      	bne.n	8004b9e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b68:	4b4c      	ldr	r3, [pc, #304]	; (8004c9c <HAL_RCC_OscConfig+0x938>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a4b      	ldr	r2, [pc, #300]	; (8004c9c <HAL_RCC_OscConfig+0x938>)
 8004b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b72:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b74:	f7fc ffec 	bl	8001b50 <HAL_GetTick>
 8004b78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7c:	e009      	b.n	8004b92 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7e:	f7fc ffe7 	bl	8001b50 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b64      	cmp	r3, #100	; 0x64
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e2e9      	b.n	8005166 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b92:	4b42      	ldr	r3, [pc, #264]	; (8004c9c <HAL_RCC_OscConfig+0x938>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0ef      	beq.n	8004b7e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b9e:	1d3b      	adds	r3, r7, #4
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x852>
 8004ba8:	4b3a      	ldr	r3, [pc, #232]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	4a39      	ldr	r2, [pc, #228]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	6213      	str	r3, [r2, #32]
 8004bb4:	e02f      	b.n	8004c16 <HAL_RCC_OscConfig+0x8b2>
 8004bb6:	1d3b      	adds	r3, r7, #4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10c      	bne.n	8004bda <HAL_RCC_OscConfig+0x876>
 8004bc0:	4b34      	ldr	r3, [pc, #208]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	4a33      	ldr	r2, [pc, #204]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	6213      	str	r3, [r2, #32]
 8004bcc:	4b31      	ldr	r3, [pc, #196]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	4a30      	ldr	r2, [pc, #192]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004bd2:	f023 0304 	bic.w	r3, r3, #4
 8004bd6:	6213      	str	r3, [r2, #32]
 8004bd8:	e01d      	b.n	8004c16 <HAL_RCC_OscConfig+0x8b2>
 8004bda:	1d3b      	adds	r3, r7, #4
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	2b05      	cmp	r3, #5
 8004be2:	d10c      	bne.n	8004bfe <HAL_RCC_OscConfig+0x89a>
 8004be4:	4b2b      	ldr	r3, [pc, #172]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	4a2a      	ldr	r2, [pc, #168]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004bea:	f043 0304 	orr.w	r3, r3, #4
 8004bee:	6213      	str	r3, [r2, #32]
 8004bf0:	4b28      	ldr	r3, [pc, #160]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	4a27      	ldr	r2, [pc, #156]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	6213      	str	r3, [r2, #32]
 8004bfc:	e00b      	b.n	8004c16 <HAL_RCC_OscConfig+0x8b2>
 8004bfe:	4b25      	ldr	r3, [pc, #148]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	4a24      	ldr	r2, [pc, #144]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004c04:	f023 0301 	bic.w	r3, r3, #1
 8004c08:	6213      	str	r3, [r2, #32]
 8004c0a:	4b22      	ldr	r3, [pc, #136]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	4a21      	ldr	r2, [pc, #132]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004c10:	f023 0304 	bic.w	r3, r3, #4
 8004c14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d06b      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c20:	f7fc ff96 	bl	8001b50 <HAL_GetTick>
 8004c24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c28:	e00b      	b.n	8004c42 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c2a:	f7fc ff91 	bl	8001b50 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e291      	b.n	8005166 <HAL_RCC_OscConfig+0xe02>
 8004c42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004c46:	2202      	movs	r2, #2
 8004c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	fa93 f2a3 	rbit	r2, r3
 8004c54:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004c5e:	2202      	movs	r2, #2
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	fa93 f2a3 	rbit	r2, r3
 8004c6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004c70:	601a      	str	r2, [r3, #0]
  return result;
 8004c72:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004c76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c78:	fab3 f383 	clz	r3, r3
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	f043 0302 	orr.w	r3, r3, #2
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d109      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x93c>
 8004c8c:	4b01      	ldr	r3, [pc, #4]	; (8004c94 <HAL_RCC_OscConfig+0x930>)
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	e014      	b.n	8004cbc <HAL_RCC_OscConfig+0x958>
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000
 8004c98:	10908120 	.word	0x10908120
 8004c9c:	40007000 	.word	0x40007000
 8004ca0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	fa93 f2a3 	rbit	r2, r3
 8004cb2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	4bbb      	ldr	r3, [pc, #748]	; (8004fa8 <HAL_RCC_OscConfig+0xc44>)
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004cc0:	2102      	movs	r1, #2
 8004cc2:	6011      	str	r1, [r2, #0]
 8004cc4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	fa92 f1a2 	rbit	r1, r2
 8004cce:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004cd2:	6011      	str	r1, [r2, #0]
  return result;
 8004cd4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	fab2 f282 	clz	r2, r2
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	f002 021f 	and.w	r2, r2, #31
 8004cea:	2101      	movs	r1, #1
 8004cec:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d099      	beq.n	8004c2a <HAL_RCC_OscConfig+0x8c6>
 8004cf6:	e063      	b.n	8004dc0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf8:	f7fc ff2a 	bl	8001b50 <HAL_GetTick>
 8004cfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d00:	e00b      	b.n	8004d1a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d02:	f7fc ff25 	bl	8001b50 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e225      	b.n	8005166 <HAL_RCC_OscConfig+0xe02>
 8004d1a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004d1e:	2202      	movs	r2, #2
 8004d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	fa93 f2a3 	rbit	r2, r3
 8004d2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004d36:	2202      	movs	r2, #2
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	fa93 f2a3 	rbit	r2, r3
 8004d44:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004d48:	601a      	str	r2, [r3, #0]
  return result;
 8004d4a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004d4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d50:	fab3 f383 	clz	r3, r3
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	f043 0302 	orr.w	r3, r3, #2
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d102      	bne.n	8004d6a <HAL_RCC_OscConfig+0xa06>
 8004d64:	4b90      	ldr	r3, [pc, #576]	; (8004fa8 <HAL_RCC_OscConfig+0xc44>)
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	e00d      	b.n	8004d86 <HAL_RCC_OscConfig+0xa22>
 8004d6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004d6e:	2202      	movs	r2, #2
 8004d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	fa93 f2a3 	rbit	r2, r3
 8004d7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	4b89      	ldr	r3, [pc, #548]	; (8004fa8 <HAL_RCC_OscConfig+0xc44>)
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d8a:	2102      	movs	r1, #2
 8004d8c:	6011      	str	r1, [r2, #0]
 8004d8e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d92:	6812      	ldr	r2, [r2, #0]
 8004d94:	fa92 f1a2 	rbit	r1, r2
 8004d98:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004d9c:	6011      	str	r1, [r2, #0]
  return result;
 8004d9e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	fab2 f282 	clz	r2, r2
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	f002 021f 	and.w	r2, r2, #31
 8004db4:	2101      	movs	r1, #1
 8004db6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1a0      	bne.n	8004d02 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dc0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d105      	bne.n	8004dd4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc8:	4b77      	ldr	r3, [pc, #476]	; (8004fa8 <HAL_RCC_OscConfig+0xc44>)
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	4a76      	ldr	r2, [pc, #472]	; (8004fa8 <HAL_RCC_OscConfig+0xc44>)
 8004dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dd4:	1d3b      	adds	r3, r7, #4
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 81c2 	beq.w	8005164 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004de0:	4b71      	ldr	r3, [pc, #452]	; (8004fa8 <HAL_RCC_OscConfig+0xc44>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 030c 	and.w	r3, r3, #12
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	f000 819c 	beq.w	8005126 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dee:	1d3b      	adds	r3, r7, #4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	f040 8114 	bne.w	8005022 <HAL_RCC_OscConfig+0xcbe>
 8004dfa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004dfe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	fa93 f2a3 	rbit	r2, r3
 8004e0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004e12:	601a      	str	r2, [r3, #0]
  return result;
 8004e14:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004e18:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1a:	fab3 f383 	clz	r3, r3
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e30:	f7fc fe8e 	bl	8001b50 <HAL_GetTick>
 8004e34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e38:	e009      	b.n	8004e4e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e3a:	f7fc fe89 	bl	8001b50 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e18b      	b.n	8005166 <HAL_RCC_OscConfig+0xe02>
 8004e4e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004e52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e58:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	fa93 f2a3 	rbit	r2, r3
 8004e62:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e66:	601a      	str	r2, [r3, #0]
  return result;
 8004e68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e6e:	fab3 f383 	clz	r3, r3
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	095b      	lsrs	r3, r3, #5
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d102      	bne.n	8004e88 <HAL_RCC_OscConfig+0xb24>
 8004e82:	4b49      	ldr	r3, [pc, #292]	; (8004fa8 <HAL_RCC_OscConfig+0xc44>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	e01b      	b.n	8004ec0 <HAL_RCC_OscConfig+0xb5c>
 8004e88:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004e8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	fa93 f2a3 	rbit	r2, r3
 8004e9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004ea6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	fa93 f2a3 	rbit	r2, r3
 8004eb6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	4b3a      	ldr	r3, [pc, #232]	; (8004fa8 <HAL_RCC_OscConfig+0xc44>)
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004ec4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ec8:	6011      	str	r1, [r2, #0]
 8004eca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	fa92 f1a2 	rbit	r1, r2
 8004ed4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004ed8:	6011      	str	r1, [r2, #0]
  return result;
 8004eda:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	fab2 f282 	clz	r2, r2
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	f042 0220 	orr.w	r2, r2, #32
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	f002 021f 	and.w	r2, r2, #31
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d19e      	bne.n	8004e3a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004efc:	4b2a      	ldr	r3, [pc, #168]	; (8004fa8 <HAL_RCC_OscConfig+0xc44>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f04:	1d3b      	adds	r3, r7, #4
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f0a:	1d3b      	adds	r3, r7, #4
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	430b      	orrs	r3, r1
 8004f12:	4925      	ldr	r1, [pc, #148]	; (8004fa8 <HAL_RCC_OscConfig+0xc44>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	604b      	str	r3, [r1, #4]
 8004f18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	fa93 f2a3 	rbit	r2, r3
 8004f2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004f30:	601a      	str	r2, [r3, #0]
  return result;
 8004f32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004f36:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f38:	fab3 f383 	clz	r3, r3
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	461a      	mov	r2, r3
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4e:	f7fc fdff 	bl	8001b50 <HAL_GetTick>
 8004f52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f56:	e009      	b.n	8004f6c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f58:	f7fc fdfa 	bl	8001b50 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e0fc      	b.n	8005166 <HAL_RCC_OscConfig+0xe02>
 8004f6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004f70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	fa93 f2a3 	rbit	r2, r3
 8004f80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004f84:	601a      	str	r2, [r3, #0]
  return result;
 8004f86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004f8a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f8c:	fab3 f383 	clz	r3, r3
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d105      	bne.n	8004fac <HAL_RCC_OscConfig+0xc48>
 8004fa0:	4b01      	ldr	r3, [pc, #4]	; (8004fa8 <HAL_RCC_OscConfig+0xc44>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	e01e      	b.n	8004fe4 <HAL_RCC_OscConfig+0xc80>
 8004fa6:	bf00      	nop
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004fb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	fa93 f2a3 	rbit	r2, r3
 8004fc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004fca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	fa93 f2a3 	rbit	r2, r3
 8004fda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	4b63      	ldr	r3, [pc, #396]	; (8005170 <HAL_RCC_OscConfig+0xe0c>)
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004fe8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004fec:	6011      	str	r1, [r2, #0]
 8004fee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	fa92 f1a2 	rbit	r1, r2
 8004ff8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004ffc:	6011      	str	r1, [r2, #0]
  return result;
 8004ffe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	fab2 f282 	clz	r2, r2
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	f042 0220 	orr.w	r2, r2, #32
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	f002 021f 	and.w	r2, r2, #31
 8005014:	2101      	movs	r1, #1
 8005016:	fa01 f202 	lsl.w	r2, r1, r2
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d09b      	beq.n	8004f58 <HAL_RCC_OscConfig+0xbf4>
 8005020:	e0a0      	b.n	8005164 <HAL_RCC_OscConfig+0xe00>
 8005022:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005026:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800502a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	fa93 f2a3 	rbit	r2, r3
 8005036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800503a:	601a      	str	r2, [r3, #0]
  return result;
 800503c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005040:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005042:	fab3 f383 	clz	r3, r3
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800504c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	461a      	mov	r2, r3
 8005054:	2300      	movs	r3, #0
 8005056:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005058:	f7fc fd7a 	bl	8001b50 <HAL_GetTick>
 800505c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005060:	e009      	b.n	8005076 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005062:	f7fc fd75 	bl	8001b50 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e077      	b.n	8005166 <HAL_RCC_OscConfig+0xe02>
 8005076:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800507a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800507e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	fa93 f2a3 	rbit	r2, r3
 800508a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800508e:	601a      	str	r2, [r3, #0]
  return result;
 8005090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005094:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005096:	fab3 f383 	clz	r3, r3
 800509a:	b2db      	uxtb	r3, r3
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d102      	bne.n	80050b0 <HAL_RCC_OscConfig+0xd4c>
 80050aa:	4b31      	ldr	r3, [pc, #196]	; (8005170 <HAL_RCC_OscConfig+0xe0c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	e01b      	b.n	80050e8 <HAL_RCC_OscConfig+0xd84>
 80050b0:	f107 0320 	add.w	r3, r7, #32
 80050b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ba:	f107 0320 	add.w	r3, r7, #32
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	fa93 f2a3 	rbit	r2, r3
 80050c4:	f107 031c 	add.w	r3, r7, #28
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f107 0318 	add.w	r3, r7, #24
 80050ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	f107 0318 	add.w	r3, r7, #24
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	fa93 f2a3 	rbit	r2, r3
 80050de:	f107 0314 	add.w	r3, r7, #20
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	4b22      	ldr	r3, [pc, #136]	; (8005170 <HAL_RCC_OscConfig+0xe0c>)
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	f107 0210 	add.w	r2, r7, #16
 80050ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050f0:	6011      	str	r1, [r2, #0]
 80050f2:	f107 0210 	add.w	r2, r7, #16
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	fa92 f1a2 	rbit	r1, r2
 80050fc:	f107 020c 	add.w	r2, r7, #12
 8005100:	6011      	str	r1, [r2, #0]
  return result;
 8005102:	f107 020c 	add.w	r2, r7, #12
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	fab2 f282 	clz	r2, r2
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	f042 0220 	orr.w	r2, r2, #32
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	f002 021f 	and.w	r2, r2, #31
 8005118:	2101      	movs	r1, #1
 800511a:	fa01 f202 	lsl.w	r2, r1, r2
 800511e:	4013      	ands	r3, r2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d19e      	bne.n	8005062 <HAL_RCC_OscConfig+0xcfe>
 8005124:	e01e      	b.n	8005164 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005126:	1d3b      	adds	r3, r7, #4
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e018      	b.n	8005166 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005134:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <HAL_RCC_OscConfig+0xe0c>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800513c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005140:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005144:	1d3b      	adds	r3, r7, #4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	429a      	cmp	r2, r3
 800514c:	d108      	bne.n	8005160 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800514e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005152:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005156:	1d3b      	adds	r3, r7, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800515c:	429a      	cmp	r2, r3
 800515e:	d001      	beq.n	8005164 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40021000 	.word	0x40021000

08005174 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b09e      	sub	sp, #120	; 0x78
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e162      	b.n	8005452 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800518c:	4b90      	ldr	r3, [pc, #576]	; (80053d0 <HAL_RCC_ClockConfig+0x25c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d910      	bls.n	80051bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519a:	4b8d      	ldr	r3, [pc, #564]	; (80053d0 <HAL_RCC_ClockConfig+0x25c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f023 0207 	bic.w	r2, r3, #7
 80051a2:	498b      	ldr	r1, [pc, #556]	; (80053d0 <HAL_RCC_ClockConfig+0x25c>)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051aa:	4b89      	ldr	r3, [pc, #548]	; (80053d0 <HAL_RCC_ClockConfig+0x25c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d001      	beq.n	80051bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e14a      	b.n	8005452 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c8:	4b82      	ldr	r3, [pc, #520]	; (80053d4 <HAL_RCC_ClockConfig+0x260>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	497f      	ldr	r1, [pc, #508]	; (80053d4 <HAL_RCC_ClockConfig+0x260>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 80dc 	beq.w	80053a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d13c      	bne.n	800526a <HAL_RCC_ClockConfig+0xf6>
 80051f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051f8:	fa93 f3a3 	rbit	r3, r3
 80051fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80051fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005200:	fab3 f383 	clz	r3, r3
 8005204:	b2db      	uxtb	r3, r3
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	b2db      	uxtb	r3, r3
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b01      	cmp	r3, #1
 8005212:	d102      	bne.n	800521a <HAL_RCC_ClockConfig+0xa6>
 8005214:	4b6f      	ldr	r3, [pc, #444]	; (80053d4 <HAL_RCC_ClockConfig+0x260>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	e00f      	b.n	800523a <HAL_RCC_ClockConfig+0xc6>
 800521a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800521e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005220:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005222:	fa93 f3a3 	rbit	r3, r3
 8005226:	667b      	str	r3, [r7, #100]	; 0x64
 8005228:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800522c:	663b      	str	r3, [r7, #96]	; 0x60
 800522e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005230:	fa93 f3a3 	rbit	r3, r3
 8005234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005236:	4b67      	ldr	r3, [pc, #412]	; (80053d4 <HAL_RCC_ClockConfig+0x260>)
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800523e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005240:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005242:	fa92 f2a2 	rbit	r2, r2
 8005246:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005248:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800524a:	fab2 f282 	clz	r2, r2
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	f042 0220 	orr.w	r2, r2, #32
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	f002 021f 	and.w	r2, r2, #31
 800525a:	2101      	movs	r1, #1
 800525c:	fa01 f202 	lsl.w	r2, r1, r2
 8005260:	4013      	ands	r3, r2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d17b      	bne.n	800535e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e0f3      	b.n	8005452 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b02      	cmp	r3, #2
 8005270:	d13c      	bne.n	80052ec <HAL_RCC_ClockConfig+0x178>
 8005272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005276:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800527a:	fa93 f3a3 	rbit	r3, r3
 800527e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005282:	fab3 f383 	clz	r3, r3
 8005286:	b2db      	uxtb	r3, r3
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f043 0301 	orr.w	r3, r3, #1
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b01      	cmp	r3, #1
 8005294:	d102      	bne.n	800529c <HAL_RCC_ClockConfig+0x128>
 8005296:	4b4f      	ldr	r3, [pc, #316]	; (80053d4 <HAL_RCC_ClockConfig+0x260>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	e00f      	b.n	80052bc <HAL_RCC_ClockConfig+0x148>
 800529c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a4:	fa93 f3a3 	rbit	r3, r3
 80052a8:	647b      	str	r3, [r7, #68]	; 0x44
 80052aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052ae:	643b      	str	r3, [r7, #64]	; 0x40
 80052b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052b2:	fa93 f3a3 	rbit	r3, r3
 80052b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052b8:	4b46      	ldr	r3, [pc, #280]	; (80053d4 <HAL_RCC_ClockConfig+0x260>)
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80052c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052c4:	fa92 f2a2 	rbit	r2, r2
 80052c8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80052ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052cc:	fab2 f282 	clz	r2, r2
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	f042 0220 	orr.w	r2, r2, #32
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	f002 021f 	and.w	r2, r2, #31
 80052dc:	2101      	movs	r1, #1
 80052de:	fa01 f202 	lsl.w	r2, r1, r2
 80052e2:	4013      	ands	r3, r2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d13a      	bne.n	800535e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e0b2      	b.n	8005452 <HAL_RCC_ClockConfig+0x2de>
 80052ec:	2302      	movs	r3, #2
 80052ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	fa93 f3a3 	rbit	r3, r3
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80052f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fa:	fab3 f383 	clz	r3, r3
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	095b      	lsrs	r3, r3, #5
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b01      	cmp	r3, #1
 800530c:	d102      	bne.n	8005314 <HAL_RCC_ClockConfig+0x1a0>
 800530e:	4b31      	ldr	r3, [pc, #196]	; (80053d4 <HAL_RCC_ClockConfig+0x260>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	e00d      	b.n	8005330 <HAL_RCC_ClockConfig+0x1bc>
 8005314:	2302      	movs	r3, #2
 8005316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	fa93 f3a3 	rbit	r3, r3
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
 8005320:	2302      	movs	r3, #2
 8005322:	623b      	str	r3, [r7, #32]
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	fa93 f3a3 	rbit	r3, r3
 800532a:	61fb      	str	r3, [r7, #28]
 800532c:	4b29      	ldr	r3, [pc, #164]	; (80053d4 <HAL_RCC_ClockConfig+0x260>)
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	2202      	movs	r2, #2
 8005332:	61ba      	str	r2, [r7, #24]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	fa92 f2a2 	rbit	r2, r2
 800533a:	617a      	str	r2, [r7, #20]
  return result;
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	fab2 f282 	clz	r2, r2
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	f042 0220 	orr.w	r2, r2, #32
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	f002 021f 	and.w	r2, r2, #31
 800534e:	2101      	movs	r1, #1
 8005350:	fa01 f202 	lsl.w	r2, r1, r2
 8005354:	4013      	ands	r3, r2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e079      	b.n	8005452 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800535e:	4b1d      	ldr	r3, [pc, #116]	; (80053d4 <HAL_RCC_ClockConfig+0x260>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f023 0203 	bic.w	r2, r3, #3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	491a      	ldr	r1, [pc, #104]	; (80053d4 <HAL_RCC_ClockConfig+0x260>)
 800536c:	4313      	orrs	r3, r2
 800536e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005370:	f7fc fbee 	bl	8001b50 <HAL_GetTick>
 8005374:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005376:	e00a      	b.n	800538e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005378:	f7fc fbea 	bl	8001b50 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f241 3288 	movw	r2, #5000	; 0x1388
 8005386:	4293      	cmp	r3, r2
 8005388:	d901      	bls.n	800538e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e061      	b.n	8005452 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538e:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <HAL_RCC_ClockConfig+0x260>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f003 020c 	and.w	r2, r3, #12
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	429a      	cmp	r2, r3
 800539e:	d1eb      	bne.n	8005378 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053a0:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <HAL_RCC_ClockConfig+0x25c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d214      	bcs.n	80053d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ae:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <HAL_RCC_ClockConfig+0x25c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f023 0207 	bic.w	r2, r3, #7
 80053b6:	4906      	ldr	r1, [pc, #24]	; (80053d0 <HAL_RCC_ClockConfig+0x25c>)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053be:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <HAL_RCC_ClockConfig+0x25c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d005      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e040      	b.n	8005452 <HAL_RCC_ClockConfig+0x2de>
 80053d0:	40022000 	.word	0x40022000
 80053d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053e4:	4b1d      	ldr	r3, [pc, #116]	; (800545c <HAL_RCC_ClockConfig+0x2e8>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	491a      	ldr	r1, [pc, #104]	; (800545c <HAL_RCC_ClockConfig+0x2e8>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005402:	4b16      	ldr	r3, [pc, #88]	; (800545c <HAL_RCC_ClockConfig+0x2e8>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	4912      	ldr	r1, [pc, #72]	; (800545c <HAL_RCC_ClockConfig+0x2e8>)
 8005412:	4313      	orrs	r3, r2
 8005414:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005416:	f000 f829 	bl	800546c <HAL_RCC_GetSysClockFreq>
 800541a:	4601      	mov	r1, r0
 800541c:	4b0f      	ldr	r3, [pc, #60]	; (800545c <HAL_RCC_ClockConfig+0x2e8>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005424:	22f0      	movs	r2, #240	; 0xf0
 8005426:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	fa92 f2a2 	rbit	r2, r2
 800542e:	60fa      	str	r2, [r7, #12]
  return result;
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	fab2 f282 	clz	r2, r2
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	40d3      	lsrs	r3, r2
 800543a:	4a09      	ldr	r2, [pc, #36]	; (8005460 <HAL_RCC_ClockConfig+0x2ec>)
 800543c:	5cd3      	ldrb	r3, [r2, r3]
 800543e:	fa21 f303 	lsr.w	r3, r1, r3
 8005442:	4a08      	ldr	r2, [pc, #32]	; (8005464 <HAL_RCC_ClockConfig+0x2f0>)
 8005444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005446:	4b08      	ldr	r3, [pc, #32]	; (8005468 <HAL_RCC_ClockConfig+0x2f4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f7fc fb3c 	bl	8001ac8 <HAL_InitTick>
  
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3778      	adds	r7, #120	; 0x78
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40021000 	.word	0x40021000
 8005460:	08006184 	.word	0x08006184
 8005464:	20000030 	.word	0x20000030
 8005468:	20000034 	.word	0x20000034

0800546c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800546c:	b480      	push	{r7}
 800546e:	b08b      	sub	sp, #44	; 0x2c
 8005470:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	61fb      	str	r3, [r7, #28]
 8005476:	2300      	movs	r3, #0
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	2300      	movs	r3, #0
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005486:	4b29      	ldr	r3, [pc, #164]	; (800552c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f003 030c 	and.w	r3, r3, #12
 8005492:	2b04      	cmp	r3, #4
 8005494:	d002      	beq.n	800549c <HAL_RCC_GetSysClockFreq+0x30>
 8005496:	2b08      	cmp	r3, #8
 8005498:	d003      	beq.n	80054a2 <HAL_RCC_GetSysClockFreq+0x36>
 800549a:	e03c      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800549c:	4b24      	ldr	r3, [pc, #144]	; (8005530 <HAL_RCC_GetSysClockFreq+0xc4>)
 800549e:	623b      	str	r3, [r7, #32]
      break;
 80054a0:	e03c      	b.n	800551c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80054a8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80054ac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	fa92 f2a2 	rbit	r2, r2
 80054b4:	607a      	str	r2, [r7, #4]
  return result;
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	fab2 f282 	clz	r2, r2
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	40d3      	lsrs	r3, r2
 80054c0:	4a1c      	ldr	r2, [pc, #112]	; (8005534 <HAL_RCC_GetSysClockFreq+0xc8>)
 80054c2:	5cd3      	ldrb	r3, [r2, r3]
 80054c4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80054c6:	4b19      	ldr	r3, [pc, #100]	; (800552c <HAL_RCC_GetSysClockFreq+0xc0>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	220f      	movs	r2, #15
 80054d0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	fa92 f2a2 	rbit	r2, r2
 80054d8:	60fa      	str	r2, [r7, #12]
  return result;
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	fab2 f282 	clz	r2, r2
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	40d3      	lsrs	r3, r2
 80054e4:	4a14      	ldr	r2, [pc, #80]	; (8005538 <HAL_RCC_GetSysClockFreq+0xcc>)
 80054e6:	5cd3      	ldrb	r3, [r2, r3]
 80054e8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d008      	beq.n	8005506 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054f4:	4a0e      	ldr	r2, [pc, #56]	; (8005530 <HAL_RCC_GetSysClockFreq+0xc4>)
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	fb02 f303 	mul.w	r3, r2, r3
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
 8005504:	e004      	b.n	8005510 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	4a0c      	ldr	r2, [pc, #48]	; (800553c <HAL_RCC_GetSysClockFreq+0xd0>)
 800550a:	fb02 f303 	mul.w	r3, r2, r3
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	623b      	str	r3, [r7, #32]
      break;
 8005514:	e002      	b.n	800551c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005516:	4b06      	ldr	r3, [pc, #24]	; (8005530 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005518:	623b      	str	r3, [r7, #32]
      break;
 800551a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800551c:	6a3b      	ldr	r3, [r7, #32]
}
 800551e:	4618      	mov	r0, r3
 8005520:	372c      	adds	r7, #44	; 0x2c
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40021000 	.word	0x40021000
 8005530:	007a1200 	.word	0x007a1200
 8005534:	0800619c 	.word	0x0800619c
 8005538:	080061ac 	.word	0x080061ac
 800553c:	003d0900 	.word	0x003d0900

08005540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005544:	4b03      	ldr	r3, [pc, #12]	; (8005554 <HAL_RCC_GetHCLKFreq+0x14>)
 8005546:	681b      	ldr	r3, [r3, #0]
}
 8005548:	4618      	mov	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20000030 	.word	0x20000030

08005558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800555e:	f7ff ffef 	bl	8005540 <HAL_RCC_GetHCLKFreq>
 8005562:	4601      	mov	r1, r0
 8005564:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800556c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005570:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	fa92 f2a2 	rbit	r2, r2
 8005578:	603a      	str	r2, [r7, #0]
  return result;
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	fab2 f282 	clz	r2, r2
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	40d3      	lsrs	r3, r2
 8005584:	4a04      	ldr	r2, [pc, #16]	; (8005598 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005586:	5cd3      	ldrb	r3, [r2, r3]
 8005588:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40021000 	.word	0x40021000
 8005598:	08006194 	.word	0x08006194

0800559c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80055a2:	f7ff ffcd 	bl	8005540 <HAL_RCC_GetHCLKFreq>
 80055a6:	4601      	mov	r1, r0
 80055a8:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80055b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80055b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	fa92 f2a2 	rbit	r2, r2
 80055bc:	603a      	str	r2, [r7, #0]
  return result;
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	fab2 f282 	clz	r2, r2
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	40d3      	lsrs	r3, r2
 80055c8:	4a04      	ldr	r2, [pc, #16]	; (80055dc <HAL_RCC_GetPCLK2Freq+0x40>)
 80055ca:	5cd3      	ldrb	r3, [r2, r3]
 80055cc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40021000 	.word	0x40021000
 80055dc:	08006194 	.word	0x08006194

080055e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b092      	sub	sp, #72	; 0x48
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 80d0 	beq.w	800579e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80055fe:	2300      	movs	r3, #0
 8005600:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005604:	4b8e      	ldr	r3, [pc, #568]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10e      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005610:	4b8b      	ldr	r3, [pc, #556]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	4a8a      	ldr	r2, [pc, #552]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561a:	61d3      	str	r3, [r2, #28]
 800561c:	4b88      	ldr	r3, [pc, #544]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005624:	60bb      	str	r3, [r7, #8]
 8005626:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005628:	2301      	movs	r3, #1
 800562a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562e:	4b85      	ldr	r3, [pc, #532]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d118      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800563a:	4b82      	ldr	r3, [pc, #520]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a81      	ldr	r2, [pc, #516]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005644:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005646:	f7fc fa83 	bl	8001b50 <HAL_GetTick>
 800564a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800564c:	e008      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800564e:	f7fc fa7f 	bl	8001b50 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b64      	cmp	r3, #100	; 0x64
 800565a:	d901      	bls.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e0ea      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005660:	4b78      	ldr	r3, [pc, #480]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800566c:	4b74      	ldr	r3, [pc, #464]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005674:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d07d      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005686:	429a      	cmp	r2, r3
 8005688:	d076      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800568a:	4b6d      	ldr	r3, [pc, #436]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005698:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	fa93 f3a3 	rbit	r3, r3
 80056a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80056a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056a4:	fab3 f383 	clz	r3, r3
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	461a      	mov	r2, r3
 80056ac:	4b66      	ldr	r3, [pc, #408]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	461a      	mov	r2, r3
 80056b4:	2301      	movs	r3, #1
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	fa93 f3a3 	rbit	r3, r3
 80056c4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80056c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056c8:	fab3 f383 	clz	r3, r3
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	461a      	mov	r2, r3
 80056d0:	4b5d      	ldr	r3, [pc, #372]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056d2:	4413      	add	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	461a      	mov	r2, r3
 80056d8:	2300      	movs	r3, #0
 80056da:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056dc:	4a58      	ldr	r2, [pc, #352]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d045      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ec:	f7fc fa30 	bl	8001b50 <HAL_GetTick>
 80056f0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f2:	e00a      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f4:	f7fc fa2c 	bl	8001b50 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005702:	4293      	cmp	r3, r2
 8005704:	d901      	bls.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e095      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800570a:	2302      	movs	r3, #2
 800570c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	fa93 f3a3 	rbit	r3, r3
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
 8005716:	2302      	movs	r3, #2
 8005718:	623b      	str	r3, [r7, #32]
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	fa93 f3a3 	rbit	r3, r3
 8005720:	61fb      	str	r3, [r7, #28]
  return result;
 8005722:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005724:	fab3 f383 	clz	r3, r3
 8005728:	b2db      	uxtb	r3, r3
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	b2db      	uxtb	r3, r3
 800572e:	f043 0302 	orr.w	r3, r3, #2
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d102      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005738:	4b41      	ldr	r3, [pc, #260]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	e007      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800573e:	2302      	movs	r3, #2
 8005740:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	fa93 f3a3 	rbit	r3, r3
 8005748:	617b      	str	r3, [r7, #20]
 800574a:	4b3d      	ldr	r3, [pc, #244]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	2202      	movs	r2, #2
 8005750:	613a      	str	r2, [r7, #16]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	fa92 f2a2 	rbit	r2, r2
 8005758:	60fa      	str	r2, [r7, #12]
  return result;
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	fab2 f282 	clz	r2, r2
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	f002 021f 	and.w	r2, r2, #31
 800576c:	2101      	movs	r1, #1
 800576e:	fa01 f202 	lsl.w	r2, r1, r2
 8005772:	4013      	ands	r3, r2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0bd      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005778:	4b31      	ldr	r3, [pc, #196]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	492e      	ldr	r1, [pc, #184]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005786:	4313      	orrs	r3, r2
 8005788:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800578a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800578e:	2b01      	cmp	r3, #1
 8005790:	d105      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005792:	4b2b      	ldr	r3, [pc, #172]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	4a2a      	ldr	r2, [pc, #168]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800579c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d008      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057aa:	4b25      	ldr	r3, [pc, #148]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	f023 0203 	bic.w	r2, r3, #3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	4922      	ldr	r1, [pc, #136]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0320 	and.w	r3, r3, #32
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057c8:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057cc:	f023 0210 	bic.w	r2, r3, #16
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	491a      	ldr	r1, [pc, #104]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d008      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057e6:	4b16      	ldr	r3, [pc, #88]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	4913      	ldr	r1, [pc, #76]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d008      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005804:	4b0e      	ldr	r3, [pc, #56]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	490b      	ldr	r1, [pc, #44]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005812:	4313      	orrs	r3, r2
 8005814:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d008      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005822:	4b07      	ldr	r3, [pc, #28]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	4904      	ldr	r1, [pc, #16]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005830:	4313      	orrs	r3, r2
 8005832:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3748      	adds	r7, #72	; 0x48
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40021000 	.word	0x40021000
 8005844:	40007000 	.word	0x40007000
 8005848:	10908100 	.word	0x10908100

0800584c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e07c      	b.n	8005958 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7fb ffe9 	bl	8001850 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2202      	movs	r2, #2
 8005882:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005894:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800589e:	d902      	bls.n	80058a6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	e002      	b.n	80058ac <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058aa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058b4:	d007      	beq.n	80058c6 <HAL_SPI_Init+0x7a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058be:	d002      	beq.n	80058c6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10b      	bne.n	80058e6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058d6:	d903      	bls.n	80058e0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	631a      	str	r2, [r3, #48]	; 0x30
 80058de:	e002      	b.n	80058e6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	431a      	orrs	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	ea42 0103 	orr.w	r1, r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	0c1b      	lsrs	r3, r3, #16
 8005926:	f003 0204 	and.w	r2, r3, #4
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	ea42 0103 	orr.w	r1, r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	430a      	orrs	r2, r1
 8005946:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e040      	b.n	80059f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7fb ffc6 	bl	8001914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2224      	movs	r2, #36	; 0x24
 800598c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0201 	bic.w	r2, r2, #1
 800599c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f82c 	bl	80059fc <UART_SetConfig>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e022      	b.n	80059f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f9a2 	bl	8005d00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fa29 	bl	8005e44 <UART_CheckIdleState>
 80059f2:	4603      	mov	r3, r0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	4ba2      	ldr	r3, [pc, #648]	; (8005cb4 <UART_SetConfig+0x2b8>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	6939      	ldr	r1, [r7, #16]
 8005a34:	430b      	orrs	r3, r1
 8005a36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a90      	ldr	r2, [pc, #576]	; (8005cb8 <UART_SetConfig+0x2bc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d121      	bne.n	8005ac0 <UART_SetConfig+0xc4>
 8005a7c:	4b8f      	ldr	r3, [pc, #572]	; (8005cbc <UART_SetConfig+0x2c0>)
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a80:	f003 0303 	and.w	r3, r3, #3
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d817      	bhi.n	8005ab8 <UART_SetConfig+0xbc>
 8005a88:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <UART_SetConfig+0x94>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005aa1 	.word	0x08005aa1
 8005a94:	08005aad 	.word	0x08005aad
 8005a98:	08005ab3 	.word	0x08005ab3
 8005a9c:	08005aa7 	.word	0x08005aa7
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	77fb      	strb	r3, [r7, #31]
 8005aa4:	e01e      	b.n	8005ae4 <UART_SetConfig+0xe8>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	77fb      	strb	r3, [r7, #31]
 8005aaa:	e01b      	b.n	8005ae4 <UART_SetConfig+0xe8>
 8005aac:	2304      	movs	r3, #4
 8005aae:	77fb      	strb	r3, [r7, #31]
 8005ab0:	e018      	b.n	8005ae4 <UART_SetConfig+0xe8>
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	77fb      	strb	r3, [r7, #31]
 8005ab6:	e015      	b.n	8005ae4 <UART_SetConfig+0xe8>
 8005ab8:	2310      	movs	r3, #16
 8005aba:	77fb      	strb	r3, [r7, #31]
 8005abc:	bf00      	nop
 8005abe:	e011      	b.n	8005ae4 <UART_SetConfig+0xe8>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a7e      	ldr	r2, [pc, #504]	; (8005cc0 <UART_SetConfig+0x2c4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d102      	bne.n	8005ad0 <UART_SetConfig+0xd4>
 8005aca:	2300      	movs	r3, #0
 8005acc:	77fb      	strb	r3, [r7, #31]
 8005ace:	e009      	b.n	8005ae4 <UART_SetConfig+0xe8>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a7b      	ldr	r2, [pc, #492]	; (8005cc4 <UART_SetConfig+0x2c8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d102      	bne.n	8005ae0 <UART_SetConfig+0xe4>
 8005ada:	2300      	movs	r3, #0
 8005adc:	77fb      	strb	r3, [r7, #31]
 8005ade:	e001      	b.n	8005ae4 <UART_SetConfig+0xe8>
 8005ae0:	2310      	movs	r3, #16
 8005ae2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aec:	f040 8082 	bne.w	8005bf4 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8005af0:	7ffb      	ldrb	r3, [r7, #31]
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d85e      	bhi.n	8005bb4 <UART_SetConfig+0x1b8>
 8005af6:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <UART_SetConfig+0x100>)
 8005af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afc:	08005b21 	.word	0x08005b21
 8005b00:	08005b41 	.word	0x08005b41
 8005b04:	08005b61 	.word	0x08005b61
 8005b08:	08005bb5 	.word	0x08005bb5
 8005b0c:	08005b7d 	.word	0x08005b7d
 8005b10:	08005bb5 	.word	0x08005bb5
 8005b14:	08005bb5 	.word	0x08005bb5
 8005b18:	08005bb5 	.word	0x08005bb5
 8005b1c:	08005b9d 	.word	0x08005b9d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b20:	f7ff fd1a 	bl	8005558 <HAL_RCC_GetPCLK1Freq>
 8005b24:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	005a      	lsls	r2, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	441a      	add	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	61bb      	str	r3, [r7, #24]
        break;
 8005b3e:	e03c      	b.n	8005bba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b40:	f7ff fd2c 	bl	800559c <HAL_RCC_GetPCLK2Freq>
 8005b44:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	005a      	lsls	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	085b      	lsrs	r3, r3, #1
 8005b50:	441a      	add	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	61bb      	str	r3, [r7, #24]
        break;
 8005b5e:	e02c      	b.n	8005bba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	085b      	lsrs	r3, r3, #1
 8005b66:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005b6a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6852      	ldr	r2, [r2, #4]
 8005b72:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	61bb      	str	r3, [r7, #24]
        break;
 8005b7a:	e01e      	b.n	8005bba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b7c:	f7ff fc76 	bl	800546c <HAL_RCC_GetSysClockFreq>
 8005b80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	005a      	lsls	r2, r3, #1
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	085b      	lsrs	r3, r3, #1
 8005b8c:	441a      	add	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	61bb      	str	r3, [r7, #24]
        break;
 8005b9a:	e00e      	b.n	8005bba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	085b      	lsrs	r3, r3, #1
 8005ba2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	61bb      	str	r3, [r7, #24]
        break;
 8005bb2:	e002      	b.n	8005bba <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	75fb      	strb	r3, [r7, #23]
        break;
 8005bb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	2b0f      	cmp	r3, #15
 8005bbe:	d916      	bls.n	8005bee <UART_SetConfig+0x1f2>
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bc6:	d212      	bcs.n	8005bee <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f023 030f 	bic.w	r3, r3, #15
 8005bd0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	085b      	lsrs	r3, r3, #1
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	897b      	ldrh	r3, [r7, #10]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	897a      	ldrh	r2, [r7, #10]
 8005bea:	60da      	str	r2, [r3, #12]
 8005bec:	e07d      	b.n	8005cea <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	75fb      	strb	r3, [r7, #23]
 8005bf2:	e07a      	b.n	8005cea <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8005bf4:	7ffb      	ldrb	r3, [r7, #31]
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d866      	bhi.n	8005cc8 <UART_SetConfig+0x2cc>
 8005bfa:	a201      	add	r2, pc, #4	; (adr r2, 8005c00 <UART_SetConfig+0x204>)
 8005bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c00:	08005c25 	.word	0x08005c25
 8005c04:	08005c43 	.word	0x08005c43
 8005c08:	08005c61 	.word	0x08005c61
 8005c0c:	08005cc9 	.word	0x08005cc9
 8005c10:	08005c7d 	.word	0x08005c7d
 8005c14:	08005cc9 	.word	0x08005cc9
 8005c18:	08005cc9 	.word	0x08005cc9
 8005c1c:	08005cc9 	.word	0x08005cc9
 8005c20:	08005c9b 	.word	0x08005c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c24:	f7ff fc98 	bl	8005558 <HAL_RCC_GetPCLK1Freq>
 8005c28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	085a      	lsrs	r2, r3, #1
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	441a      	add	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	61bb      	str	r3, [r7, #24]
        break;
 8005c40:	e045      	b.n	8005cce <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c42:	f7ff fcab 	bl	800559c <HAL_RCC_GetPCLK2Freq>
 8005c46:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	085a      	lsrs	r2, r3, #1
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	441a      	add	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	61bb      	str	r3, [r7, #24]
        break;
 8005c5e:	e036      	b.n	8005cce <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	085b      	lsrs	r3, r3, #1
 8005c66:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005c6a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6852      	ldr	r2, [r2, #4]
 8005c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	61bb      	str	r3, [r7, #24]
        break;
 8005c7a:	e028      	b.n	8005cce <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c7c:	f7ff fbf6 	bl	800546c <HAL_RCC_GetSysClockFreq>
 8005c80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	085a      	lsrs	r2, r3, #1
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	441a      	add	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	61bb      	str	r3, [r7, #24]
        break;
 8005c98:	e019      	b.n	8005cce <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	085b      	lsrs	r3, r3, #1
 8005ca0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	61bb      	str	r3, [r7, #24]
        break;
 8005cb0:	e00d      	b.n	8005cce <UART_SetConfig+0x2d2>
 8005cb2:	bf00      	nop
 8005cb4:	efff69f3 	.word	0xefff69f3
 8005cb8:	40013800 	.word	0x40013800
 8005cbc:	40021000 	.word	0x40021000
 8005cc0:	40004400 	.word	0x40004400
 8005cc4:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	75fb      	strb	r3, [r7, #23]
        break;
 8005ccc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	2b0f      	cmp	r3, #15
 8005cd2:	d908      	bls.n	8005ce6 <UART_SetConfig+0x2ea>
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cda:	d204      	bcs.n	8005ce6 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	60da      	str	r2, [r3, #12]
 8005ce4:	e001      	b.n	8005cea <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3720      	adds	r7, #32
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	f003 0308 	and.w	r3, r3, #8
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	f003 0310 	and.w	r3, r3, #16
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01a      	beq.n	8005e16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dfe:	d10a      	bne.n	8005e16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	605a      	str	r2, [r3, #4]
  }
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af02      	add	r7, sp, #8
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005e52:	f7fb fe7d 	bl	8001b50 <HAL_GetTick>
 8005e56:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0308 	and.w	r3, r3, #8
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d10e      	bne.n	8005e84 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f82a 	bl	8005ece <UART_WaitOnFlagUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e020      	b.n	8005ec6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0304 	and.w	r3, r3, #4
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d10e      	bne.n	8005eb0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f814 	bl	8005ece <UART_WaitOnFlagUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e00a      	b.n	8005ec6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b084      	sub	sp, #16
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	603b      	str	r3, [r7, #0]
 8005eda:	4613      	mov	r3, r2
 8005edc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ede:	e05d      	b.n	8005f9c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee6:	d059      	beq.n	8005f9c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee8:	f7fb fe32 	bl	8001b50 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d302      	bcc.n	8005efe <UART_WaitOnFlagUntilTimeout+0x30>
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d11b      	bne.n	8005f36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0201 	bic.w	r2, r2, #1
 8005f1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2220      	movs	r2, #32
 8005f22:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e042      	b.n	8005fbc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d02b      	beq.n	8005f9c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f52:	d123      	bne.n	8005f9c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f5c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f6c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0201 	bic.w	r2, r2, #1
 8005f7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2220      	movs	r2, #32
 8005f82:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2220      	movs	r2, #32
 8005f88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e00f      	b.n	8005fbc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69da      	ldr	r2, [r3, #28]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	bf0c      	ite	eq
 8005fac:	2301      	moveq	r3, #1
 8005fae:	2300      	movne	r3, #0
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	79fb      	ldrb	r3, [r7, #7]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d092      	beq.n	8005ee0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <arm_pid_init_f32>:
 8005fc4:	edd0 6a08 	vldr	s13, [r0, #32]
 8005fc8:	edd0 7a06 	vldr	s15, [r0, #24]
 8005fcc:	ed90 7a07 	vldr	s14, [r0, #28]
 8005fd0:	edc0 6a02 	vstr	s13, [r0, #8]
 8005fd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fd8:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8005fdc:	eef1 7a67 	vneg.f32	s15, s15
 8005fe0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005fe4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005fe8:	ed80 7a00 	vstr	s14, [r0]
 8005fec:	edc0 7a01 	vstr	s15, [r0, #4]
 8005ff0:	b119      	cbz	r1, 8005ffa <arm_pid_init_f32+0x36>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60c3      	str	r3, [r0, #12]
 8005ff6:	6103      	str	r3, [r0, #16]
 8005ff8:	6143      	str	r3, [r0, #20]
 8005ffa:	4770      	bx	lr

08005ffc <arm_sub_f32>:
 8005ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ffe:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8006002:	d033      	beq.n	800606c <arm_sub_f32+0x70>
 8006004:	f100 0610 	add.w	r6, r0, #16
 8006008:	f101 0510 	add.w	r5, r1, #16
 800600c:	f102 0410 	add.w	r4, r2, #16
 8006010:	4677      	mov	r7, lr
 8006012:	ed16 6a03 	vldr	s12, [r6, #-12]
 8006016:	ed15 4a03 	vldr	s8, [r5, #-12]
 800601a:	ed56 6a02 	vldr	s13, [r6, #-8]
 800601e:	ed55 4a02 	vldr	s9, [r5, #-8]
 8006022:	ed16 7a01 	vldr	s14, [r6, #-4]
 8006026:	ed15 5a01 	vldr	s10, [r5, #-4]
 800602a:	ed56 7a04 	vldr	s15, [r6, #-16]
 800602e:	ed55 5a04 	vldr	s11, [r5, #-16]
 8006032:	ee36 6a44 	vsub.f32	s12, s12, s8
 8006036:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800603a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800603e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006042:	3f01      	subs	r7, #1
 8006044:	ed04 6a03 	vstr	s12, [r4, #-12]
 8006048:	ed44 6a02 	vstr	s13, [r4, #-8]
 800604c:	ed04 7a01 	vstr	s14, [r4, #-4]
 8006050:	ed44 7a04 	vstr	s15, [r4, #-16]
 8006054:	f106 0610 	add.w	r6, r6, #16
 8006058:	f105 0510 	add.w	r5, r5, #16
 800605c:	f104 0410 	add.w	r4, r4, #16
 8006060:	d1d7      	bne.n	8006012 <arm_sub_f32+0x16>
 8006062:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8006066:	4420      	add	r0, r4
 8006068:	4421      	add	r1, r4
 800606a:	4422      	add	r2, r4
 800606c:	f013 0303 	ands.w	r3, r3, #3
 8006070:	d009      	beq.n	8006086 <arm_sub_f32+0x8a>
 8006072:	ecf0 7a01 	vldmia	r0!, {s15}
 8006076:	ecb1 7a01 	vldmia	r1!, {s14}
 800607a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800607e:	3b01      	subs	r3, #1
 8006080:	ece2 7a01 	vstmia	r2!, {s15}
 8006084:	d1f5      	bne.n	8006072 <arm_sub_f32+0x76>
 8006086:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006088 <arm_mult_f32>:
 8006088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800608a:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800608e:	d033      	beq.n	80060f8 <arm_mult_f32+0x70>
 8006090:	f100 0610 	add.w	r6, r0, #16
 8006094:	f101 0510 	add.w	r5, r1, #16
 8006098:	f102 0410 	add.w	r4, r2, #16
 800609c:	4677      	mov	r7, lr
 800609e:	ed16 6a04 	vldr	s12, [r6, #-16]
 80060a2:	ed55 4a04 	vldr	s9, [r5, #-16]
 80060a6:	ed56 6a02 	vldr	s13, [r6, #-8]
 80060aa:	ed15 5a02 	vldr	s10, [r5, #-8]
 80060ae:	ed16 7a03 	vldr	s14, [r6, #-12]
 80060b2:	ed55 5a03 	vldr	s11, [r5, #-12]
 80060b6:	ed56 7a01 	vldr	s15, [r6, #-4]
 80060ba:	ee26 6a24 	vmul.f32	s12, s12, s9
 80060be:	ee66 6a85 	vmul.f32	s13, s13, s10
 80060c2:	ed04 6a04 	vstr	s12, [r4, #-16]
 80060c6:	ed15 6a01 	vldr	s12, [r5, #-4]
 80060ca:	ed44 6a02 	vstr	s13, [r4, #-8]
 80060ce:	ee27 7a25 	vmul.f32	s14, s14, s11
 80060d2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80060d6:	3f01      	subs	r7, #1
 80060d8:	ed04 7a03 	vstr	s14, [r4, #-12]
 80060dc:	ed44 7a01 	vstr	s15, [r4, #-4]
 80060e0:	f106 0610 	add.w	r6, r6, #16
 80060e4:	f105 0510 	add.w	r5, r5, #16
 80060e8:	f104 0410 	add.w	r4, r4, #16
 80060ec:	d1d7      	bne.n	800609e <arm_mult_f32+0x16>
 80060ee:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80060f2:	4420      	add	r0, r4
 80060f4:	4421      	add	r1, r4
 80060f6:	4422      	add	r2, r4
 80060f8:	f013 0303 	ands.w	r3, r3, #3
 80060fc:	d009      	beq.n	8006112 <arm_mult_f32+0x8a>
 80060fe:	ecf0 7a01 	vldmia	r0!, {s15}
 8006102:	ecb1 7a01 	vldmia	r1!, {s14}
 8006106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800610a:	3b01      	subs	r3, #1
 800610c:	ece2 7a01 	vstmia	r2!, {s15}
 8006110:	d1f5      	bne.n	80060fe <arm_mult_f32+0x76>
 8006112:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006114 <__libc_init_array>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	4e0d      	ldr	r6, [pc, #52]	; (800614c <__libc_init_array+0x38>)
 8006118:	4c0d      	ldr	r4, [pc, #52]	; (8006150 <__libc_init_array+0x3c>)
 800611a:	1ba4      	subs	r4, r4, r6
 800611c:	10a4      	asrs	r4, r4, #2
 800611e:	2500      	movs	r5, #0
 8006120:	42a5      	cmp	r5, r4
 8006122:	d109      	bne.n	8006138 <__libc_init_array+0x24>
 8006124:	4e0b      	ldr	r6, [pc, #44]	; (8006154 <__libc_init_array+0x40>)
 8006126:	4c0c      	ldr	r4, [pc, #48]	; (8006158 <__libc_init_array+0x44>)
 8006128:	f000 f820 	bl	800616c <_init>
 800612c:	1ba4      	subs	r4, r4, r6
 800612e:	10a4      	asrs	r4, r4, #2
 8006130:	2500      	movs	r5, #0
 8006132:	42a5      	cmp	r5, r4
 8006134:	d105      	bne.n	8006142 <__libc_init_array+0x2e>
 8006136:	bd70      	pop	{r4, r5, r6, pc}
 8006138:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800613c:	4798      	blx	r3
 800613e:	3501      	adds	r5, #1
 8006140:	e7ee      	b.n	8006120 <__libc_init_array+0xc>
 8006142:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006146:	4798      	blx	r3
 8006148:	3501      	adds	r5, #1
 800614a:	e7f2      	b.n	8006132 <__libc_init_array+0x1e>
 800614c:	080061bc 	.word	0x080061bc
 8006150:	080061bc 	.word	0x080061bc
 8006154:	080061bc 	.word	0x080061bc
 8006158:	080061c0 	.word	0x080061c0

0800615c <memset>:
 800615c:	4402      	add	r2, r0
 800615e:	4603      	mov	r3, r0
 8006160:	4293      	cmp	r3, r2
 8006162:	d100      	bne.n	8006166 <memset+0xa>
 8006164:	4770      	bx	lr
 8006166:	f803 1b01 	strb.w	r1, [r3], #1
 800616a:	e7f9      	b.n	8006160 <memset+0x4>

0800616c <_init>:
 800616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616e:	bf00      	nop
 8006170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006172:	bc08      	pop	{r3}
 8006174:	469e      	mov	lr, r3
 8006176:	4770      	bx	lr

08006178 <_fini>:
 8006178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617a:	bf00      	nop
 800617c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617e:	bc08      	pop	{r3}
 8006180:	469e      	mov	lr, r3
 8006182:	4770      	bx	lr
