
Interleaved_Buck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fd4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800615c  0800615c  0001615c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006194  08006194  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08006194  08006194  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006194  08006194  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006194  08006194  00016194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  0800619c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  2000003c  080061d8  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  080061d8  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e5d  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002037  00000000  00000000  00030ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f90  00000000  00000000  00032f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e68  00000000  00000000  00033e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e47a  00000000  00000000  00034cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c4f6  00000000  00000000  00053172  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bd409  00000000  00000000  0005f668  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000e9  00000000  00000000  0011ca71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042e0  00000000  00000000  0011cb5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000044e  00000000  00000000  00120e3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006144 	.word	0x08006144

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	08006144 	.word	0x08006144

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	0000      	movs	r0, r0
	...

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0e:	f001 f831 	bl	8001a74 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a12:	f000 f991 	bl	8000d38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a16:	f000 fd11 	bl	800143c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a1a:	f000 fce9 	bl	80013f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a1e:	f000 fcb7 	bl	8001390 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a22:	f000 f9e7 	bl	8000df4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000a26:	f000 fa7f 	bl	8000f28 <MX_ADC2_Init>
  MX_HRTIM1_Init();
 8000a2a:	f000 faf7 	bl	800101c <MX_HRTIM1_Init>
  MX_SPI1_Init();
 8000a2e:	f000 fc71 	bl	8001314 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  GainADC1[0] =0.009766;
 8000a32:	4ba1      	ldr	r3, [pc, #644]	; (8000cb8 <main+0x2b0>)
 8000a34:	4aa1      	ldr	r2, [pc, #644]	; (8000cbc <main+0x2b4>)
 8000a36:	601a      	str	r2, [r3, #0]
  GainADC1[1] =0.009766;
 8000a38:	4b9f      	ldr	r3, [pc, #636]	; (8000cb8 <main+0x2b0>)
 8000a3a:	4aa0      	ldr	r2, [pc, #640]	; (8000cbc <main+0x2b4>)
 8000a3c:	605a      	str	r2, [r3, #4]
  GainADC1[2] =-0.009766*2.794;
 8000a3e:	4b9e      	ldr	r3, [pc, #632]	; (8000cb8 <main+0x2b0>)
 8000a40:	4a9f      	ldr	r2, [pc, #636]	; (8000cc0 <main+0x2b8>)
 8000a42:	609a      	str	r2, [r3, #8]
  GainADC1[3] =0.1*0.543;
 8000a44:	4b9c      	ldr	r3, [pc, #624]	; (8000cb8 <main+0x2b0>)
 8000a46:	4a9f      	ldr	r2, [pc, #636]	; (8000cc4 <main+0x2bc>)
 8000a48:	60da      	str	r2, [r3, #12]

  GainADC2[0] =-0.05156*1.2931;
 8000a4a:	4b9f      	ldr	r3, [pc, #636]	; (8000cc8 <main+0x2c0>)
 8000a4c:	4a9f      	ldr	r2, [pc, #636]	; (8000ccc <main+0x2c4>)
 8000a4e:	601a      	str	r2, [r3, #0]
  GainADC2[1] =-0.05156*1.2931;		//1.2931 is the experimental gain multiplier found during calibration. Theoritical values must be checked.
 8000a50:	4b9d      	ldr	r3, [pc, #628]	; (8000cc8 <main+0x2c0>)
 8000a52:	4a9e      	ldr	r2, [pc, #632]	; (8000ccc <main+0x2c4>)
 8000a54:	605a      	str	r2, [r3, #4]
  GainADC2[2] =0.09668;
 8000a56:	4b9c      	ldr	r3, [pc, #624]	; (8000cc8 <main+0x2c0>)
 8000a58:	4a9d      	ldr	r2, [pc, #628]	; (8000cd0 <main+0x2c8>)
 8000a5a:	609a      	str	r2, [r3, #8]



  PID_test.Kp=Kpgain;
 8000a5c:	4b9d      	ldr	r3, [pc, #628]	; (8000cd4 <main+0x2cc>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a9d      	ldr	r2, [pc, #628]	; (8000cd8 <main+0x2d0>)
 8000a62:	6193      	str	r3, [r2, #24]
  PID_test.Ki=Kigain;
 8000a64:	4b9d      	ldr	r3, [pc, #628]	; (8000cdc <main+0x2d4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a9b      	ldr	r2, [pc, #620]	; (8000cd8 <main+0x2d0>)
 8000a6a:	61d3      	str	r3, [r2, #28]
  PID_test.Kd=Kdgain;
 8000a6c:	4b9c      	ldr	r3, [pc, #624]	; (8000ce0 <main+0x2d8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a99      	ldr	r2, [pc, #612]	; (8000cd8 <main+0x2d0>)
 8000a72:	6213      	str	r3, [r2, #32]
  arm_pid_init_f32(&PID_test,1);
 8000a74:	2101      	movs	r1, #1
 8000a76:	4898      	ldr	r0, [pc, #608]	; (8000cd8 <main+0x2d0>)
 8000a78:	f005 fa90 	bl	8005f9c <arm_pid_init_f32>
  HAL_HRTIM_WaveformCountStart(&hhrtim1 , HRTIM_TIMERID_MASTER | HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_B); //Launch simultaneously HRTIM Master timer, Timer A, and Timer B
 8000a7c:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8000a80:	4898      	ldr	r0, [pc, #608]	; (8000ce4 <main+0x2dc>)
 8000a82:	f003 f8d5 	bl	8003c30 <HAL_HRTIM_WaveformCountStart>
  HAL_HRTIM_WaveformOutputStart(&hhrtim1 , HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TB1 | HRTIM_OUTPUT_TB2); //Once timers launched, output are released simultaneously.
 8000a86:	210f      	movs	r1, #15
 8000a88:	4896      	ldr	r0, [pc, #600]	; (8000ce4 <main+0x2dc>)
 8000a8a:	f003 f8a4 	bl	8003bd6 <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_UpdateEnable(&hhrtim1, HRTIM_TIMERUPDATE_A | HRTIM_TIMERUPDATE_B);
 8000a8e:	2106      	movs	r1, #6
 8000a90:	4894      	ldr	r0, [pc, #592]	; (8000ce4 <main+0x2dc>)
 8000a92:	f003 f8f8 	bl	8003c86 <HAL_HRTIM_UpdateEnable>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);  			//IMPORTANT GROUND TO NEUTRAL CONNECTION MUST BE ENABLED IN DCDC BUCK MODE !
 8000a96:	2101      	movs	r1, #1
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f002 fcfc 	bl	8003498 <HAL_GPIO_TogglePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, valuesADC1, 4);
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	4991      	ldr	r1, [pc, #580]	; (8000ce8 <main+0x2e0>)
 8000aa4:	4891      	ldr	r0, [pc, #580]	; (8000cec <main+0x2e4>)
 8000aa6:	f001 f9fb 	bl	8001ea0 <HAL_ADC_Start_DMA>
	  HAL_ADC_Stop_DMA(&hadc1);
 8000aaa:	4890      	ldr	r0, [pc, #576]	; (8000cec <main+0x2e4>)
 8000aac:	f001 fad2 	bl	8002054 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Start_DMA(&hadc2, valuesADC2, 3);
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	498f      	ldr	r1, [pc, #572]	; (8000cf0 <main+0x2e8>)
 8000ab4:	488f      	ldr	r0, [pc, #572]	; (8000cf4 <main+0x2ec>)
 8000ab6:	f001 f9f3 	bl	8001ea0 <HAL_ADC_Start_DMA>
	  HAL_ADC_Stop_DMA(&hadc2);
 8000aba:	488e      	ldr	r0, [pc, #568]	; (8000cf4 <main+0x2ec>)
 8000abc:	f001 faca 	bl	8002054 <HAL_ADC_Stop_DMA>
	  convertADC1[0] = (float32_t)valuesADC1[0];
 8000ac0:	4b89      	ldr	r3, [pc, #548]	; (8000ce8 <main+0x2e0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	ee07 3a90 	vmov	s15, r3
 8000ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000acc:	4b8a      	ldr	r3, [pc, #552]	; (8000cf8 <main+0x2f0>)
 8000ace:	edc3 7a00 	vstr	s15, [r3]
	  convertADC1[1] = (float32_t)valuesADC1[1];
 8000ad2:	4b85      	ldr	r3, [pc, #532]	; (8000ce8 <main+0x2e0>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	ee07 3a90 	vmov	s15, r3
 8000ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ade:	4b86      	ldr	r3, [pc, #536]	; (8000cf8 <main+0x2f0>)
 8000ae0:	edc3 7a01 	vstr	s15, [r3, #4]
	  convertADC1[2] = (float32_t)valuesADC1[2];
 8000ae4:	4b80      	ldr	r3, [pc, #512]	; (8000ce8 <main+0x2e0>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	ee07 3a90 	vmov	s15, r3
 8000aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000af0:	4b81      	ldr	r3, [pc, #516]	; (8000cf8 <main+0x2f0>)
 8000af2:	edc3 7a02 	vstr	s15, [r3, #8]
	  convertADC1[3] = (float32_t)valuesADC1[3];
 8000af6:	4b7c      	ldr	r3, [pc, #496]	; (8000ce8 <main+0x2e0>)
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	ee07 3a90 	vmov	s15, r3
 8000afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b02:	4b7d      	ldr	r3, [pc, #500]	; (8000cf8 <main+0x2f0>)
 8000b04:	edc3 7a03 	vstr	s15, [r3, #12]
	  convertADC2[0] = (float32_t)valuesADC2[0];
 8000b08:	4b79      	ldr	r3, [pc, #484]	; (8000cf0 <main+0x2e8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	ee07 3a90 	vmov	s15, r3
 8000b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b14:	4b79      	ldr	r3, [pc, #484]	; (8000cfc <main+0x2f4>)
 8000b16:	edc3 7a00 	vstr	s15, [r3]
	  convertADC2[1] = (float32_t)valuesADC2[1];
 8000b1a:	4b75      	ldr	r3, [pc, #468]	; (8000cf0 <main+0x2e8>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	ee07 3a90 	vmov	s15, r3
 8000b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b26:	4b75      	ldr	r3, [pc, #468]	; (8000cfc <main+0x2f4>)
 8000b28:	edc3 7a01 	vstr	s15, [r3, #4]
	  convertADC2[2] = (float32_t)valuesADC2[2];
 8000b2c:	4b70      	ldr	r3, [pc, #448]	; (8000cf0 <main+0x2e8>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	ee07 3a90 	vmov	s15, r3
 8000b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b38:	4b70      	ldr	r3, [pc, #448]	; (8000cfc <main+0x2f4>)
 8000b3a:	edc3 7a02 	vstr	s15, [r3, #8]
	  arm_sub_f32(convertADC1, offsetADC1, raw_offsetADC1, 4);
 8000b3e:	2304      	movs	r3, #4
 8000b40:	4a6f      	ldr	r2, [pc, #444]	; (8000d00 <main+0x2f8>)
 8000b42:	4970      	ldr	r1, [pc, #448]	; (8000d04 <main+0x2fc>)
 8000b44:	486c      	ldr	r0, [pc, #432]	; (8000cf8 <main+0x2f0>)
 8000b46:	f005 fa45 	bl	8005fd4 <arm_sub_f32>
	  arm_sub_f32(convertADC2, offsetADC2, raw_offsetADC2, 3);
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	4a6e      	ldr	r2, [pc, #440]	; (8000d08 <main+0x300>)
 8000b4e:	496f      	ldr	r1, [pc, #444]	; (8000d0c <main+0x304>)
 8000b50:	486a      	ldr	r0, [pc, #424]	; (8000cfc <main+0x2f4>)
 8000b52:	f005 fa3f 	bl	8005fd4 <arm_sub_f32>
	  arm_mult_f32(raw_offsetADC1, GainADC1, ValuesADC1, 4);
 8000b56:	2304      	movs	r3, #4
 8000b58:	4a6d      	ldr	r2, [pc, #436]	; (8000d10 <main+0x308>)
 8000b5a:	4957      	ldr	r1, [pc, #348]	; (8000cb8 <main+0x2b0>)
 8000b5c:	4868      	ldr	r0, [pc, #416]	; (8000d00 <main+0x2f8>)
 8000b5e:	f005 fa7f 	bl	8006060 <arm_mult_f32>
	  arm_mult_f32(raw_offsetADC2, GainADC2, ValuesADC2, 3);
 8000b62:	2303      	movs	r3, #3
 8000b64:	4a6b      	ldr	r2, [pc, #428]	; (8000d14 <main+0x30c>)
 8000b66:	4958      	ldr	r1, [pc, #352]	; (8000cc8 <main+0x2c0>)
 8000b68:	4867      	ldr	r0, [pc, #412]	; (8000d08 <main+0x300>)
 8000b6a:	f005 fa79 	bl	8006060 <arm_mult_f32>
	  arm_sub_f32(&ref, &ValuesADC2[0], &error_pid,1);			//CALCULATING THE ERROR BASED ON THE REFERENCE
 8000b6e:	2301      	movs	r3, #1
 8000b70:	4a69      	ldr	r2, [pc, #420]	; (8000d18 <main+0x310>)
 8000b72:	4968      	ldr	r1, [pc, #416]	; (8000d14 <main+0x30c>)
 8000b74:	4869      	ldr	r0, [pc, #420]	; (8000d1c <main+0x314>)
 8000b76:	f005 fa2d 	bl	8005fd4 <arm_sub_f32>
	  rslt_pid = arm_pid_f32(&PID_test, 0.01*error_pid);		//PID CALCULATIONS
 8000b7a:	4b67      	ldr	r3, [pc, #412]	; (8000d18 <main+0x310>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fc86 	bl	8000490 <__aeabi_f2d>
 8000b84:	a34a      	add	r3, pc, #296	; (adr r3, 8000cb0 <main+0x2a8>)
 8000b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b8a:	f7ff fcd9 	bl	8000540 <__aeabi_dmul>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	460c      	mov	r4, r1
 8000b92:	4618      	mov	r0, r3
 8000b94:	4621      	mov	r1, r4
 8000b96:	f7ff fee5 	bl	8000964 <__aeabi_d2f>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	4b4e      	ldr	r3, [pc, #312]	; (8000cd8 <main+0x2d0>)
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	60ba      	str	r2, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	ed93 7a00 	vldr	s14, [r3]
 8000ba8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bac:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	edd3 6a01 	vldr	s13, [r3, #4]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	edd3 6a02 	vldr	s13, [r3, #8]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	edd3 7a04 	vldr	s15, [r3, #16]
 8000bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be2:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	68da      	ldr	r2, [r3, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a48      	ldr	r2, [pc, #288]	; (8000d20 <main+0x318>)
 8000bfe:	6013      	str	r3, [r2, #0]
	  pwm = PWM_RESOLUTION*rslt_pid;							//PID OUTPUT CONDITIONNING
 8000c00:	4b47      	ldr	r3, [pc, #284]	; (8000d20 <main+0x318>)
 8000c02:	edd3 7a00 	vldr	s15, [r3]
 8000c06:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000d24 <main+0x31c>
 8000c0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c0e:	4b46      	ldr	r3, [pc, #280]	; (8000d28 <main+0x320>)
 8000c10:	edc3 7a00 	vstr	s15, [r3]

	  if (pwm > HIGH_DUTY)										//SATURATION CONDITIONS TO AVOID DIVERGENCE.
 8000c14:	4b44      	ldr	r3, [pc, #272]	; (8000d28 <main+0x320>)
 8000c16:	edd3 7a00 	vldr	s15, [r3]
 8000c1a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000d2c <main+0x324>
 8000c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c26:	dd10      	ble.n	8000c4a <main+0x242>
	  {
		  duty = HIGH_DUTY;
 8000c28:	4b41      	ldr	r3, [pc, #260]	; (8000d30 <main+0x328>)
 8000c2a:	f44f 7290 	mov.w	r2, #288	; 0x120
 8000c2e:	801a      	strh	r2, [r3, #0]
		  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0X0, HRTIM_COMPAREUNIT_1, duty);
 8000c30:	4b3f      	ldr	r3, [pc, #252]	; (8000d30 <main+0x328>)
 8000c32:	881a      	ldrh	r2, [r3, #0]
 8000c34:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <main+0x2dc>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0X1, HRTIM_COMPAREUNIT_1, duty);
 8000c3c:	4b3c      	ldr	r3, [pc, #240]	; (8000d30 <main+0x328>)
 8000c3e:	881a      	ldrh	r2, [r3, #0]
 8000c40:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <main+0x2dc>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8000c48:	e72a      	b.n	8000aa0 <main+0x98>
	  }
	  else if (pwm < LOW_DUTY)
 8000c4a:	4b37      	ldr	r3, [pc, #220]	; (8000d28 <main+0x320>)
 8000c4c:	edd3 7a00 	vldr	s15, [r3]
 8000c50:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000d34 <main+0x32c>
 8000c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5c:	d50f      	bpl.n	8000c7e <main+0x276>
	  {
		  duty = LOW_DUTY;
 8000c5e:	4b34      	ldr	r3, [pc, #208]	; (8000d30 <main+0x328>)
 8000c60:	2220      	movs	r2, #32
 8000c62:	801a      	strh	r2, [r3, #0]
		  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0X0, HRTIM_COMPAREUNIT_1, duty);
 8000c64:	4b32      	ldr	r3, [pc, #200]	; (8000d30 <main+0x328>)
 8000c66:	881a      	ldrh	r2, [r3, #0]
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <main+0x2dc>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0X1, HRTIM_COMPAREUNIT_1, duty);
 8000c70:	4b2f      	ldr	r3, [pc, #188]	; (8000d30 <main+0x328>)
 8000c72:	881a      	ldrh	r2, [r3, #0]
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <main+0x2dc>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8000c7c:	e710      	b.n	8000aa0 <main+0x98>
	  }
	  else
	  {
		  duty = (uint16_t)pwm;
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <main+0x320>)
 8000c80:	edd3 7a00 	vldr	s15, [r3]
 8000c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c88:	ee17 3a90 	vmov	r3, s15
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <main+0x328>)
 8000c90:	801a      	strh	r2, [r3, #0]
		  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0X0, HRTIM_COMPAREUNIT_1, duty);
 8000c92:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <main+0x328>)
 8000c94:	881a      	ldrh	r2, [r3, #0]
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <main+0x2dc>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		  __HAL_HRTIM_SETCOMPARE(&hhrtim1, 0X1, HRTIM_COMPAREUNIT_1, duty);
 8000c9e:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <main+0x328>)
 8000ca0:	881a      	ldrh	r2, [r3, #0]
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <main+0x2dc>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	  HAL_ADC_Start_DMA(&hadc1, valuesADC1, 4);
 8000caa:	e6f9      	b.n	8000aa0 <main+0x98>
 8000cac:	f3af 8000 	nop.w
 8000cb0:	47ae147b 	.word	0x47ae147b
 8000cb4:	3f847ae1 	.word	0x3f847ae1
 8000cb8:	200000c0 	.word	0x200000c0
 8000cbc:	3c200193 	.word	0x3c200193
 8000cc0:	bcdf8751 	.word	0xbcdf8751
 8000cc4:	3d5e69ad 	.word	0x3d5e69ad
 8000cc8:	200003c4 	.word	0x200003c4
 8000ccc:	bd888b74 	.word	0xbd888b74
 8000cd0:	3dc6002a 	.word	0x3dc6002a
 8000cd4:	20000004 	.word	0x20000004
 8000cd8:	200003dc 	.word	0x200003dc
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000058 	.word	0x20000058
 8000ce4:	20000140 	.word	0x20000140
 8000ce8:	200000d0 	.word	0x200000d0
 8000cec:	200000f0 	.word	0x200000f0
 8000cf0:	20000064 	.word	0x20000064
 8000cf4:	20000070 	.word	0x20000070
 8000cf8:	200003b4 	.word	0x200003b4
 8000cfc:	20000280 	.word	0x20000280
 8000d00:	20000270 	.word	0x20000270
 8000d04:	2000000c 	.word	0x2000000c
 8000d08:	2000021c 	.word	0x2000021c
 8000d0c:	2000001c 	.word	0x2000001c
 8000d10:	200000e0 	.word	0x200000e0
 8000d14:	200003d0 	.word	0x200003d0
 8000d18:	20000060 	.word	0x20000060
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	2000026c 	.word	0x2000026c
 8000d24:	43a00000 	.word	0x43a00000
 8000d28:	2000002c 	.word	0x2000002c
 8000d2c:	43900000 	.word	0x43900000
 8000d30:	20000028 	.word	0x20000028
 8000d34:	42000000 	.word	0x42000000

08000d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b096      	sub	sp, #88	; 0x58
 8000d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d42:	2228      	movs	r2, #40	; 0x28
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f005 f9f4 	bl	8006134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]
 8000d6a:	615a      	str	r2, [r3, #20]
 8000d6c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d72:	2301      	movs	r3, #1
 8000d74:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d76:	2310      	movs	r3, #16
 8000d78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d82:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d86:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f003 fad5 	bl	800433c <HAL_RCC_OscConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000d98:	f000 fbb8 	bl	800150c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	2102      	movs	r1, #2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f004 f9c7 	bl	800514c <HAL_RCC_ClockConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000dc4:	f000 fba2 	bl	800150c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_ADC12;
 8000dc8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000dcc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000dce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_HCLK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f004 fbec 	bl	80055b8 <HAL_RCCEx_PeriphCLKConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000de6:	f000 fb91 	bl	800150c <Error_Handler>
  }
}
 8000dea:	bf00      	nop
 8000dec:	3758      	adds	r7, #88	; 0x58
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
 8000e14:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e16:	4b43      	ldr	r3, [pc, #268]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000e18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e1e:	4b41      	ldr	r3, [pc, #260]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e24:	4b3f      	ldr	r3, [pc, #252]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e2a:	4b3e      	ldr	r3, [pc, #248]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e30:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e36:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e3e:	4b39      	ldr	r3, [pc, #228]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e44:	4b37      	ldr	r3, [pc, #220]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e4a:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000e50:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000e52:	2204      	movs	r2, #4
 8000e54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e56:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e5e:	4b31      	ldr	r3, [pc, #196]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000e60:	2204      	movs	r2, #4
 8000e62:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e64:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e6a:	4b2e      	ldr	r3, [pc, #184]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e70:	482c      	ldr	r0, [pc, #176]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000e72:	f000 fe83 	bl	8001b7c <HAL_ADC_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000e7c:	f000 fb46 	bl	800150c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4826      	ldr	r0, [pc, #152]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000e8c:	f001 fc00 	bl	8002690 <HAL_ADCEx_MultiModeConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e96:	f000 fb39 	bl	800150c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	481b      	ldr	r0, [pc, #108]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000eb8:	f001 f928 	bl	800210c <HAL_ADC_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000ec2:	f000 fb23 	bl	800150c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4814      	ldr	r0, [pc, #80]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000ed4:	f001 f91a 	bl	800210c <HAL_ADC_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000ede:	f000 fb15 	bl	800150c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	480d      	ldr	r0, [pc, #52]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000ef0:	f001 f90c 	bl	800210c <HAL_ADC_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000efa:	f000 fb07 	bl	800150c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000efe:	2309      	movs	r3, #9
 8000f00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f02:	2304      	movs	r3, #4
 8000f04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <MX_ADC1_Init+0x130>)
 8000f0c:	f001 f8fe 	bl	800210c <HAL_ADC_ConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8000f16:	f000 faf9 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	3728      	adds	r7, #40	; 0x28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200000f0 	.word	0x200000f0

08000f28 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f3e:	4b35      	ldr	r3, [pc, #212]	; (8001014 <MX_ADC2_Init+0xec>)
 8000f40:	4a35      	ldr	r2, [pc, #212]	; (8001018 <MX_ADC2_Init+0xf0>)
 8000f42:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f44:	4b33      	ldr	r3, [pc, #204]	; (8001014 <MX_ADC2_Init+0xec>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f4a:	4b32      	ldr	r3, [pc, #200]	; (8001014 <MX_ADC2_Init+0xec>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f50:	4b30      	ldr	r3, [pc, #192]	; (8001014 <MX_ADC2_Init+0xec>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f56:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <MX_ADC2_Init+0xec>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <MX_ADC2_Init+0xec>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f64:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <MX_ADC2_Init+0xec>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <MX_ADC2_Init+0xec>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <MX_ADC2_Init+0xec>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 8000f76:	4b27      	ldr	r3, [pc, #156]	; (8001014 <MX_ADC2_Init+0xec>)
 8000f78:	2203      	movs	r2, #3
 8000f7a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <MX_ADC2_Init+0xec>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f84:	4b23      	ldr	r3, [pc, #140]	; (8001014 <MX_ADC2_Init+0xec>)
 8000f86:	2204      	movs	r2, #4
 8000f88:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <MX_ADC2_Init+0xec>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f90:	4b20      	ldr	r3, [pc, #128]	; (8001014 <MX_ADC2_Init+0xec>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f96:	481f      	ldr	r0, [pc, #124]	; (8001014 <MX_ADC2_Init+0xec>)
 8000f98:	f000 fdf0 	bl	8001b7c <HAL_ADC_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000fa2:	f000 fab3 	bl	800150c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4814      	ldr	r0, [pc, #80]	; (8001014 <MX_ADC2_Init+0xec>)
 8000fc4:	f001 f8a2 	bl	800210c <HAL_ADC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000fce:	f000 fa9d 	bl	800150c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480d      	ldr	r0, [pc, #52]	; (8001014 <MX_ADC2_Init+0xec>)
 8000fe0:	f001 f894 	bl	800210c <HAL_ADC_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8000fea:	f000 fa8f 	bl	800150c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000fee:	230b      	movs	r3, #11
 8000ff0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <MX_ADC2_Init+0xec>)
 8000ffc:	f001 f886 	bl	800210c <HAL_ADC_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 8001006:	f000 fa81 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000070 	.word	0x20000070
 8001018:	50000100 	.word	0x50000100

0800101c <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b0ae      	sub	sp, #184	; 0xb8
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001022:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001030:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001034:	2254      	movs	r2, #84	; 0x54
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f005 f87b 	bl	8006134 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800103e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	2224      	movs	r2, #36	; 0x24
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f005 f86e 	bl	8006134 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2220      	movs	r2, #32
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f005 f868 	bl	8006134 <memset>
  /* USER CODE BEGIN HRTIM1_Init 1 */

 //Define the duty cycle variable duty must be below comprised between 0 and 320 in the actual configuration.

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8001064:	4ba8      	ldr	r3, [pc, #672]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 8001066:	4aa9      	ldr	r2, [pc, #676]	; (800130c <MX_HRTIM1_Init+0x2f0>)
 8001068:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800106a:	4ba7      	ldr	r3, [pc, #668]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001070:	4ba5      	ldr	r3, [pc, #660]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8001076:	48a4      	ldr	r0, [pc, #656]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 8001078:	f002 fa28 	bl	80034cc <HAL_HRTIM_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_HRTIM1_Init+0x6a>
  {
    Error_Handler();
 8001082:	f000 fa43 	bl	800150c <Error_Handler>
  }
  pTimeBaseCfg.Period = 320;
 8001086:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800108a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8001094:	2305      	movs	r3, #5
 8001096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800109a:	2308      	movs	r3, #8
 800109c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 80010a0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80010a4:	461a      	mov	r2, r3
 80010a6:	2105      	movs	r1, #5
 80010a8:	4897      	ldr	r0, [pc, #604]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 80010aa:	f002 fadb 	bl	8003664 <HAL_HRTIM_TimeBaseConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_HRTIM1_Init+0x9c>
  {
    Error_Handler();
 80010b4:	f000 fa2a 	bl	800150c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 80010bc:	2300      	movs	r3, #0
 80010be:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.DMASrcAddress = 0x0000;
 80010c0:	2300      	movs	r3, #0
 80010c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.DMADstAddress = 0x0000;
 80010c4:	2300      	movs	r3, #0
 80010c6:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DMASize = 0x1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80010cc:	2300      	movs	r3, #0
 80010ce:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80010d0:	2300      	movs	r3, #0
 80010d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80010d4:	2300      	movs	r3, #0
 80010d6:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80010d8:	2300      	movs	r3, #0
 80010da:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80010dc:	2300      	movs	r3, #0
 80010de:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80010e0:	2300      	movs	r3, #0
 80010e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 80010f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010f4:	461a      	mov	r2, r3
 80010f6:	2105      	movs	r1, #5
 80010f8:	4883      	ldr	r0, [pc, #524]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 80010fa:	f002 fadb 	bl	80036b4 <HAL_HRTIM_WaveformTimerConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_HRTIM1_Init+0xec>
  {
    Error_Handler();
 8001104:	f000 fa02 	bl	800150c <Error_Handler>
  }
  pCompareCfg.CompareValue = 160;
 8001108:	23a0      	movs	r3, #160	; 0xa0
 800110a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 800110c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001110:	2202      	movs	r2, #2
 8001112:	2105      	movs	r1, #5
 8001114:	487c      	ldr	r0, [pc, #496]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 8001116:	f002 fbbf 	bl	8003898 <HAL_HRTIM_WaveformCompareConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_HRTIM1_Init+0x108>
  {
    Error_Handler();
 8001120:	f000 f9f4 	bl	800150c <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001124:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001128:	461a      	mov	r2, r3
 800112a:	2100      	movs	r1, #0
 800112c:	4876      	ldr	r0, [pc, #472]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 800112e:	f002 fa99 	bl	8003664 <HAL_HRTIM_TimeBaseConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_HRTIM1_Init+0x120>
  {
    Error_Handler();
 8001138:	f000 f9e8 	bl	800150c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.DMASrcAddress = 0x0;
 8001144:	2300      	movs	r3, #0
 8001146:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.DMADstAddress = 0x0;
 8001148:	2300      	movs	r3, #0
 800114a:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DMASize = 0x1;
 800114c:	2301      	movs	r3, #1
 800114e:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8001150:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001154:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 8001156:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800115a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8001170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001174:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_PER;
 8001184:	2310      	movs	r3, #16
 8001186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001190:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001194:	461a      	mov	r2, r3
 8001196:	2100      	movs	r1, #0
 8001198:	485b      	ldr	r0, [pc, #364]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 800119a:	f002 fa8b 	bl	80036b4 <HAL_HRTIM_WaveformTimerConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_HRTIM1_Init+0x18c>
  {
    Error_Handler();
 80011a4:	f000 f9b2 	bl	800150c <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.DMADstAddress = 0x0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DMASize = 0x1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_CMP2;
 80011b4:	2340      	movs	r3, #64	; 0x40
 80011b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80011ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011be:	461a      	mov	r2, r3
 80011c0:	2101      	movs	r1, #1
 80011c2:	4851      	ldr	r0, [pc, #324]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 80011c4:	f002 fa76 	bl	80036b4 <HAL_HRTIM_WaveformTimerConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_HRTIM1_Init+0x1b6>
  {
    Error_Handler();
 80011ce:	f000 f99d 	bl	800150c <Error_Handler>
  }
  pCompareCfg.CompareValue = duty;
 80011d2:	4b4f      	ldr	r3, [pc, #316]	; (8001310 <MX_HRTIM1_Init+0x2f4>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80011d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011dc:	2201      	movs	r2, #1
 80011de:	2100      	movs	r1, #0
 80011e0:	4849      	ldr	r0, [pc, #292]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 80011e2:	f002 fb59 	bl	8003898 <HAL_HRTIM_WaveformCompareConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_HRTIM1_Init+0x1d4>
  {
    Error_Handler();
 80011ec:	f000 f98e 	bl	800150c <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  pDeadTimeCfg.RisingValue = 10;
 80011f4:	230a      	movs	r3, #10
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8001200:	2300      	movs	r3, #0
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
  pDeadTimeCfg.FallingValue = 10;
 8001204:	230a      	movs	r3, #10
 8001206:	63bb      	str	r3, [r7, #56]	; 0x38
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 8001208:	2300      	movs	r3, #0
 800120a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 800120c:	2300      	movs	r3, #0
 800120e:	643b      	str	r3, [r7, #64]	; 0x40
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8001210:	2300      	movs	r3, #0
 8001212:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8001214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001218:	461a      	mov	r2, r3
 800121a:	2100      	movs	r1, #0
 800121c:	483a      	ldr	r0, [pc, #232]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 800121e:	f002 fabb 	bl	8003798 <HAL_HRTIM_DeadTimeConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_HRTIM1_Init+0x210>
  {
    Error_Handler();
 8001228:	f000 f970 	bl	800150c <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pDeadTimeCfg) != HAL_OK)
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	461a      	mov	r2, r3
 8001232:	2101      	movs	r1, #1
 8001234:	4834      	ldr	r0, [pc, #208]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 8001236:	f002 faaf 	bl	8003798 <HAL_HRTIM_DeadTimeConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_HRTIM1_Init+0x228>
  {
    Error_Handler();
 8001240:	f000 f964 	bl	800150c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8001248:	2308      	movs	r3, #8
 800124a:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMPER;
 800124c:	2304      	movs	r3, #4
 800124e:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2201      	movs	r2, #1
 8001268:	2100      	movs	r1, #0
 800126a:	4827      	ldr	r0, [pc, #156]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 800126c:	f002 fc82 	bl	8003b74 <HAL_HRTIM_WaveformOutputConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_HRTIM1_Init+0x25e>
  {
    Error_Handler();
 8001276:	f000 f949 	bl	800150c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2204      	movs	r2, #4
 800127e:	2101      	movs	r1, #1
 8001280:	4821      	ldr	r0, [pc, #132]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 8001282:	f002 fc77 	bl	8003b74 <HAL_HRTIM_WaveformOutputConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_HRTIM1_Init+0x274>
  {
    Error_Handler();
 800128c:	f000 f93e 	bl	800150c <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8001294:	2308      	movs	r3, #8
 8001296:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2202      	movs	r2, #2
 800129c:	2100      	movs	r1, #0
 800129e:	481a      	ldr	r0, [pc, #104]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 80012a0:	f002 fc68 	bl	8003b74 <HAL_HRTIM_WaveformOutputConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_HRTIM1_Init+0x292>
  {
    Error_Handler();
 80012aa:	f000 f92f 	bl	800150c <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2208      	movs	r2, #8
 80012b2:	2101      	movs	r1, #1
 80012b4:	4814      	ldr	r0, [pc, #80]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 80012b6:	f002 fc5d 	bl	8003b74 <HAL_HRTIM_WaveformOutputConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_HRTIM1_Init+0x2a8>
  {
    Error_Handler();
 80012c0:	f000 f924 	bl	800150c <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 80012c4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012c8:	461a      	mov	r2, r3
 80012ca:	2101      	movs	r1, #1
 80012cc:	480e      	ldr	r0, [pc, #56]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 80012ce:	f002 f9c9 	bl	8003664 <HAL_HRTIM_TimeBaseConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_HRTIM1_Init+0x2c0>
  {
    Error_Handler();
 80012d8:	f000 f918 	bl	800150c <Error_Handler>
  }
  pCompareCfg.CompareValue = 80;
 80012dc:	2350      	movs	r3, #80	; 0x50
 80012de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80012e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012e4:	2201      	movs	r2, #1
 80012e6:	2101      	movs	r1, #1
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 80012ea:	f002 fad5 	bl	8003898 <HAL_HRTIM_WaveformCompareConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_HRTIM1_Init+0x2dc>
  {
    Error_Handler();
 80012f4:	f000 f90a 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 80012f8:	4803      	ldr	r0, [pc, #12]	; (8001308 <MX_HRTIM1_Init+0x2ec>)
 80012fa:	f000 fa5d 	bl	80017b8 <HAL_HRTIM_MspPostInit>

}
 80012fe:	bf00      	nop
 8001300:	37b8      	adds	r7, #184	; 0xb8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000140 	.word	0x20000140
 800130c:	40017400 	.word	0x40017400
 8001310:	20000028 	.word	0x20000028

08001314 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <MX_SPI1_Init+0x74>)
 800131a:	4a1c      	ldr	r2, [pc, #112]	; (800138c <MX_SPI1_Init+0x78>)
 800131c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_SPI1_Init+0x74>)
 8001320:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001324:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_SPI1_Init+0x74>)
 8001328:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800132c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_SPI1_Init+0x74>)
 8001330:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001334:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_SPI1_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_SPI1_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_SPI1_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_SPI1_Init+0x74>)
 800134a:	2218      	movs	r2, #24
 800134c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_SPI1_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_SPI1_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <MX_SPI1_Init+0x74>)
 800135c:	2200      	movs	r2, #0
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_SPI1_Init+0x74>)
 8001362:	2207      	movs	r2, #7
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <MX_SPI1_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_SPI1_Init+0x74>)
 800136e:	2208      	movs	r2, #8
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_SPI1_Init+0x74>)
 8001374:	f004 fa56 	bl	8005824 <HAL_SPI_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800137e:	f000 f8c5 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2000028c 	.word	0x2000028c
 800138c:	40013000 	.word	0x40013000

08001390 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 8001396:	4a15      	ldr	r2, [pc, #84]	; (80013ec <MX_USART2_UART_Init+0x5c>)
 8001398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 800139c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80013a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013d4:	f004 fab0 	bl	8005938 <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013de:	f000 f895 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200002f0 	.word	0x200002f0
 80013ec:	40004400 	.word	0x40004400

080013f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <MX_DMA_Init+0x48>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <MX_DMA_Init+0x48>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6153      	str	r3, [r2, #20]
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <MX_DMA_Init+0x48>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	200b      	movs	r0, #11
 8001414:	f001 fcaf 	bl	8002d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001418:	200b      	movs	r0, #11
 800141a:	f001 fcc8 	bl	8002dae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	200c      	movs	r0, #12
 8001424:	f001 fca7 	bl	8002d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001428:	200c      	movs	r0, #12
 800142a:	f001 fcc0 	bl	8002dae <HAL_NVIC_EnableIRQ>

}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <MX_GPIO_Init+0xc4>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a2a      	ldr	r2, [pc, #168]	; (8001500 <MX_GPIO_Init+0xc4>)
 8001458:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800145c:	6153      	str	r3, [r2, #20]
 800145e:	4b28      	ldr	r3, [pc, #160]	; (8001500 <MX_GPIO_Init+0xc4>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146a:	4b25      	ldr	r3, [pc, #148]	; (8001500 <MX_GPIO_Init+0xc4>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	4a24      	ldr	r2, [pc, #144]	; (8001500 <MX_GPIO_Init+0xc4>)
 8001470:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001474:	6153      	str	r3, [r2, #20]
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <MX_GPIO_Init+0xc4>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <MX_GPIO_Init+0xc4>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	4a1e      	ldr	r2, [pc, #120]	; (8001500 <MX_GPIO_Init+0xc4>)
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	6153      	str	r3, [r2, #20]
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <MX_GPIO_Init+0xc4>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <MX_GPIO_Init+0xc4>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	4a18      	ldr	r2, [pc, #96]	; (8001500 <MX_GPIO_Init+0xc4>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	6153      	str	r3, [r2, #20]
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <MX_GPIO_Init+0xc4>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2101      	movs	r1, #1
 80014b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ba:	f001 ffd5 	bl	8003468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_GPIO_Init+0xc8>)
 80014c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	480d      	ldr	r0, [pc, #52]	; (8001508 <MX_GPIO_Init+0xcc>)
 80014d4:	f001 fe56 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014d8:	2301      	movs	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014dc:	2301      	movs	r3, #1
 80014de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f2:	f001 fe47 	bl	8003184 <HAL_GPIO_Init>

}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	; 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	10210000 	.word	0x10210000
 8001508:	48000800 	.word	0x48000800

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_MspInit+0x44>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <HAL_MspInit+0x44>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6193      	str	r3, [r2, #24]
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_MspInit+0x44>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_MspInit+0x44>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a08      	ldr	r2, [pc, #32]	; (8001560 <HAL_MspInit+0x44>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_MspInit+0x44>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001552:	2007      	movs	r0, #7
 8001554:	f001 fc04 	bl	8002d60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40021000 	.word	0x40021000

08001564 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	; 0x38
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001584:	d155      	bne.n	8001632 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001586:	4b73      	ldr	r3, [pc, #460]	; (8001754 <HAL_ADC_MspInit+0x1f0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	4a71      	ldr	r2, [pc, #452]	; (8001754 <HAL_ADC_MspInit+0x1f0>)
 800158e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001590:	4b70      	ldr	r3, [pc, #448]	; (8001754 <HAL_ADC_MspInit+0x1f0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d10b      	bne.n	80015b0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001598:	4b6f      	ldr	r3, [pc, #444]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	4a6e      	ldr	r2, [pc, #440]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 800159e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a2:	6153      	str	r3, [r2, #20]
 80015a4:	4b6c      	ldr	r3, [pc, #432]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ac:	623b      	str	r3, [r7, #32]
 80015ae:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b0:	4b69      	ldr	r3, [pc, #420]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	4a68      	ldr	r2, [pc, #416]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 80015b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015ba:	6153      	str	r3, [r2, #20]
 80015bc:	4b66      	ldr	r3, [pc, #408]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015c4:	61fb      	str	r3, [r7, #28]
 80015c6:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = I_1Low_Pin|I_2Low_Pin|I_High_Pin|Tp_Pin;
 80015c8:	230f      	movs	r3, #15
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015cc:	2303      	movs	r3, #3
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	4860      	ldr	r0, [pc, #384]	; (800175c <HAL_ADC_MspInit+0x1f8>)
 80015dc:	f001 fdd2 	bl	8003184 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015e0:	4b5f      	ldr	r3, [pc, #380]	; (8001760 <HAL_ADC_MspInit+0x1fc>)
 80015e2:	4a60      	ldr	r2, [pc, #384]	; (8001764 <HAL_ADC_MspInit+0x200>)
 80015e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015e6:	4b5e      	ldr	r3, [pc, #376]	; (8001760 <HAL_ADC_MspInit+0x1fc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ec:	4b5c      	ldr	r3, [pc, #368]	; (8001760 <HAL_ADC_MspInit+0x1fc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015f2:	4b5b      	ldr	r3, [pc, #364]	; (8001760 <HAL_ADC_MspInit+0x1fc>)
 80015f4:	2280      	movs	r2, #128	; 0x80
 80015f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015f8:	4b59      	ldr	r3, [pc, #356]	; (8001760 <HAL_ADC_MspInit+0x1fc>)
 80015fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001600:	4b57      	ldr	r3, [pc, #348]	; (8001760 <HAL_ADC_MspInit+0x1fc>)
 8001602:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001606:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001608:	4b55      	ldr	r3, [pc, #340]	; (8001760 <HAL_ADC_MspInit+0x1fc>)
 800160a:	2220      	movs	r2, #32
 800160c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800160e:	4b54      	ldr	r3, [pc, #336]	; (8001760 <HAL_ADC_MspInit+0x1fc>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001614:	4852      	ldr	r0, [pc, #328]	; (8001760 <HAL_ADC_MspInit+0x1fc>)
 8001616:	f001 fbe4 	bl	8002de2 <HAL_DMA_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001620:	f7ff ff74 	bl	800150c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a4e      	ldr	r2, [pc, #312]	; (8001760 <HAL_ADC_MspInit+0x1fc>)
 8001628:	639a      	str	r2, [r3, #56]	; 0x38
 800162a:	4a4d      	ldr	r2, [pc, #308]	; (8001760 <HAL_ADC_MspInit+0x1fc>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001630:	e08b      	b.n	800174a <HAL_ADC_MspInit+0x1e6>
  else if(hadc->Instance==ADC2)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a4c      	ldr	r2, [pc, #304]	; (8001768 <HAL_ADC_MspInit+0x204>)
 8001638:	4293      	cmp	r3, r2
 800163a:	f040 8086 	bne.w	800174a <HAL_ADC_MspInit+0x1e6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800163e:	4b45      	ldr	r3, [pc, #276]	; (8001754 <HAL_ADC_MspInit+0x1f0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	4a43      	ldr	r2, [pc, #268]	; (8001754 <HAL_ADC_MspInit+0x1f0>)
 8001646:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001648:	4b42      	ldr	r3, [pc, #264]	; (8001754 <HAL_ADC_MspInit+0x1f0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d10b      	bne.n	8001668 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001650:	4b41      	ldr	r3, [pc, #260]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	4a40      	ldr	r2, [pc, #256]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 8001656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165a:	6153      	str	r3, [r2, #20]
 800165c:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	4a3a      	ldr	r2, [pc, #232]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 800166e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001672:	6153      	str	r3, [r2, #20]
 8001674:	4b38      	ldr	r3, [pc, #224]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001680:	4b35      	ldr	r3, [pc, #212]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	4a34      	ldr	r2, [pc, #208]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 8001686:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800168a:	6153      	str	r3, [r2, #20]
 800168c:	4b32      	ldr	r3, [pc, #200]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	4a2e      	ldr	r2, [pc, #184]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 800169e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a2:	6153      	str	r3, [r2, #20]
 80016a4:	4b2c      	ldr	r3, [pc, #176]	; (8001758 <HAL_ADC_MspInit+0x1f4>)
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_1LowP_Pin|V_1LowN_Pin|V_2LowP_Pin|V_2LowN_Pin;
 80016b0:	23f0      	movs	r3, #240	; 0xf0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b4:	2303      	movs	r3, #3
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c0:	4619      	mov	r1, r3
 80016c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c6:	f001 fd5d 	bl	8003184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = V_HighP_Pin;
 80016ca:	2320      	movs	r3, #32
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ce:	2303      	movs	r3, #3
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(V_HighP_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016da:	4619      	mov	r1, r3
 80016dc:	481f      	ldr	r0, [pc, #124]	; (800175c <HAL_ADC_MspInit+0x1f8>)
 80016de:	f001 fd51 	bl	8003184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = V_HighN_Pin;
 80016e2:	2304      	movs	r3, #4
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e6:	2303      	movs	r3, #3
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(V_HighN_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f2:	4619      	mov	r1, r3
 80016f4:	481d      	ldr	r0, [pc, #116]	; (800176c <HAL_ADC_MspInit+0x208>)
 80016f6:	f001 fd45 	bl	8003184 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <HAL_ADC_MspInit+0x20c>)
 80016fc:	4a1d      	ldr	r2, [pc, #116]	; (8001774 <HAL_ADC_MspInit+0x210>)
 80016fe:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_ADC_MspInit+0x20c>)
 8001702:	2200      	movs	r2, #0
 8001704:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <HAL_ADC_MspInit+0x20c>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <HAL_ADC_MspInit+0x20c>)
 800170e:	2280      	movs	r2, #128	; 0x80
 8001710:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <HAL_ADC_MspInit+0x20c>)
 8001714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001718:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_ADC_MspInit+0x20c>)
 800171c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001720:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_ADC_MspInit+0x20c>)
 8001724:	2220      	movs	r2, #32
 8001726:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_ADC_MspInit+0x20c>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800172e:	4810      	ldr	r0, [pc, #64]	; (8001770 <HAL_ADC_MspInit+0x20c>)
 8001730:	f001 fb57 	bl	8002de2 <HAL_DMA_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_ADC_MspInit+0x1da>
      Error_Handler();
 800173a:	f7ff fee7 	bl	800150c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <HAL_ADC_MspInit+0x20c>)
 8001742:	639a      	str	r2, [r3, #56]	; 0x38
 8001744:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <HAL_ADC_MspInit+0x20c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6253      	str	r3, [r2, #36]	; 0x24
}
 800174a:	bf00      	nop
 800174c:	3738      	adds	r7, #56	; 0x38
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000005c 	.word	0x2000005c
 8001758:	40021000 	.word	0x40021000
 800175c:	48000800 	.word	0x48000800
 8001760:	20000228 	.word	0x20000228
 8001764:	40020008 	.word	0x40020008
 8001768:	50000100 	.word	0x50000100
 800176c:	48000400 	.word	0x48000400
 8001770:	20000370 	.word	0x20000370
 8001774:	4002001c 	.word	0x4002001c

08001778 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_HRTIM_MspInit+0x38>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d10b      	bne.n	80017a2 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_HRTIM_MspInit+0x3c>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_HRTIM_MspInit+0x3c>)
 8001790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001794:	6193      	str	r3, [r2, #24]
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <HAL_HRTIM_MspInit+0x3c>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40017400 	.word	0x40017400
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a12      	ldr	r2, [pc, #72]	; (8001820 <HAL_HRTIM_MspPostInit+0x68>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d11d      	bne.n	8001816 <HAL_HRTIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_HRTIM_MspPostInit+0x6c>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_HRTIM_MspPostInit+0x6c>)
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e4:	6153      	str	r3, [r2, #20]
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_HRTIM_MspPostInit+0x6c>)
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2
    */
    GPIO_InitStruct.Pin = H1_Pin|L1_Pin|H2_Pin|L2_Pin;
 80017f2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80017f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001804:	230d      	movs	r3, #13
 8001806:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4619      	mov	r1, r3
 800180e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001812:	f001 fcb7 	bl	8003184 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001816:	bf00      	nop
 8001818:	3720      	adds	r7, #32
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40017400 	.word	0x40017400
 8001824:	40021000 	.word	0x40021000

08001828 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a26      	ldr	r2, [pc, #152]	; (80018e0 <HAL_SPI_MspInit+0xb8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d145      	bne.n	80018d6 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800184a:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <HAL_SPI_MspInit+0xbc>)
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	4a25      	ldr	r2, [pc, #148]	; (80018e4 <HAL_SPI_MspInit+0xbc>)
 8001850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001854:	6193      	str	r3, [r2, #24]
 8001856:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <HAL_SPI_MspInit+0xbc>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_SPI_MspInit+0xbc>)
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	4a1f      	ldr	r2, [pc, #124]	; (80018e4 <HAL_SPI_MspInit+0xbc>)
 8001868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186c:	6153      	str	r3, [r2, #20]
 800186e:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <HAL_SPI_MspInit+0xbc>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_SPI_MspInit+0xbc>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	4a19      	ldr	r2, [pc, #100]	; (80018e4 <HAL_SPI_MspInit+0xbc>)
 8001880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001884:	6153      	str	r3, [r2, #20]
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <HAL_SPI_MspInit+0xbc>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018a4:	2305      	movs	r3, #5
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4619      	mov	r1, r3
 80018ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b2:	f001 fc67 	bl	8003184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80018b6:	2328      	movs	r3, #40	; 0x28
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018c6:	2305      	movs	r3, #5
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <HAL_SPI_MspInit+0xc0>)
 80018d2:	f001 fc57 	bl	8003184 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	; 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40013000 	.word	0x40013000
 80018e4:	40021000 	.word	0x40021000
 80018e8:	48000400 	.word	0x48000400

080018ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_UART_MspInit+0x7c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d128      	bne.n	8001960 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_UART_MspInit+0x80>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a16      	ldr	r2, [pc, #88]	; (800196c <HAL_UART_MspInit+0x80>)
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	61d3      	str	r3, [r2, #28]
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_UART_MspInit+0x80>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_UART_MspInit+0x80>)
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <HAL_UART_MspInit+0x80>)
 800192c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001930:	6153      	str	r3, [r2, #20]
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_UART_MspInit+0x80>)
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800193e:	230c      	movs	r3, #12
 8001940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800194e:	2307      	movs	r3, #7
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	4619      	mov	r1, r3
 8001958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195c:	f001 fc12 	bl	8003184 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40004400 	.word	0x40004400
 800196c:	40021000 	.word	0x40021000

08001970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <HardFault_Handler+0x4>

08001984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <MemManage_Handler+0x4>

0800198a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <BusFault_Handler+0x4>

08001990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <UsageFault_Handler+0x4>

08001996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c4:	f000 f89c 	bl	8001b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <DMA1_Channel1_IRQHandler+0x10>)
 80019d2:	f001 fae5 	bl	8002fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000228 	.word	0x20000228

080019e0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <DMA1_Channel2_IRQHandler+0x10>)
 80019e6:	f001 fadb 	bl	8002fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000370 	.word	0x20000370

080019f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <SystemInit+0x28>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fe:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <SystemInit+0x28>)
 8001a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SystemInit+0x28>)
 8001a0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a0e:	609a      	str	r2, [r3, #8]
#endif
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a58 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a26:	e003      	b.n	8001a30 <LoopCopyDataInit>

08001a28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a2e:	3104      	adds	r1, #4

08001a30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a30:	480b      	ldr	r0, [pc, #44]	; (8001a60 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a38:	d3f6      	bcc.n	8001a28 <CopyDataInit>
	ldr	r2, =_sbss
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a3c:	e002      	b.n	8001a44 <LoopFillZerobss>

08001a3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a40:	f842 3b04 	str.w	r3, [r2], #4

08001a44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <LoopForever+0x16>)
	cmp	r2, r3
 8001a46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a48:	d3f9      	bcc.n	8001a3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a4a:	f7ff ffd3 	bl	80019f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f004 fb4d 	bl	80060ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a52:	f7fe ffd9 	bl	8000a08 <main>

08001a56 <LoopForever>:

LoopForever:
    b LoopForever
 8001a56:	e7fe      	b.n	8001a56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a58:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001a5c:	0800619c 	.word	0x0800619c
	ldr	r0, =_sdata
 8001a60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a64:	2000003c 	.word	0x2000003c
	ldr	r2, =_sbss
 8001a68:	2000003c 	.word	0x2000003c
	ldr	r3, = _ebss
 8001a6c:	20000404 	.word	0x20000404

08001a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <ADC1_2_IRQHandler>
	...

08001a74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_Init+0x28>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_Init+0x28>)
 8001a7e:	f043 0310 	orr.w	r3, r3, #16
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a84:	2003      	movs	r0, #3
 8001a86:	f001 f96b 	bl	8002d60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f000 f808 	bl	8001aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a90:	f7ff fd44 	bl	800151c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40022000 	.word	0x40022000

08001aa0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_InitTick+0x54>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_InitTick+0x58>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f001 f983 	bl	8002dca <HAL_SYSTICK_Config>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00e      	b.n	8001aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b0f      	cmp	r3, #15
 8001ad2:	d80a      	bhi.n	8001aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001adc:	f001 f94b 	bl	8002d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae0:	4a06      	ldr	r2, [pc, #24]	; (8001afc <HAL_InitTick+0x5c>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e000      	b.n	8001aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000030 	.word	0x20000030
 8001af8:	20000038 	.word	0x20000038
 8001afc:	20000034 	.word	0x20000034

08001b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x20>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x24>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_IncTick+0x24>)
 8001b12:	6013      	str	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000038 	.word	0x20000038
 8001b24:	20000400 	.word	0x20000400

08001b28 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_GetTick+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000400 	.word	0x20000400

08001b40 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b09a      	sub	sp, #104	; 0x68
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e172      	b.n	8001e82 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d176      	bne.n	8001c9c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d152      	bne.n	8001c5c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff fcc7 	bl	8001564 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d13b      	bne.n	8001c5c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fedd 	bl	80029a4 <ADC_Disable>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d12f      	bne.n	8001c5c <HAL_ADC_Init+0xe0>
 8001bfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d12b      	bne.n	8001c5c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c0c:	f023 0302 	bic.w	r3, r3, #2
 8001c10:	f043 0202 	orr.w	r2, r3, #2
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c26:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c36:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c38:	4b94      	ldr	r3, [pc, #592]	; (8001e8c <HAL_ADC_Init+0x310>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a94      	ldr	r2, [pc, #592]	; (8001e90 <HAL_ADC_Init+0x314>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	0c9a      	lsrs	r2, r3, #18
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c4e:	e002      	b.n	8001c56 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f9      	bne.n	8001c50 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d007      	beq.n	8001c7a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c78:	d110      	bne.n	8001c9c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f023 0312 	bic.w	r3, r3, #18
 8001c82:	f043 0210 	orr.w	r2, r3, #16
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f043 0201 	orr.w	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f040 80df 	bne.w	8001e68 <HAL_ADC_Init+0x2ec>
 8001caa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 80da 	bne.w	8001e68 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f040 80d2 	bne.w	8001e68 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ccc:	f043 0202 	orr.w	r2, r3, #2
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd4:	4b6f      	ldr	r3, [pc, #444]	; (8001e94 <HAL_ADC_Init+0x318>)
 8001cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ce0:	d102      	bne.n	8001ce8 <HAL_ADC_Init+0x16c>
 8001ce2:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <HAL_ADC_Init+0x31c>)
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	e002      	b.n	8001cee <HAL_ADC_Init+0x172>
 8001ce8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cec:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d108      	bne.n	8001d0e <HAL_ADC_Init+0x192>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_Init+0x192>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_ADC_Init+0x194>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d11c      	bne.n	8001d4e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d14:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d010      	beq.n	8001d3c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d107      	bne.n	8001d36 <HAL_ADC_Init+0x1ba>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_Init+0x1ba>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_ADC_Init+0x1bc>
 8001d36:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d108      	bne.n	8001d4e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d4c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7e5b      	ldrb	r3, [r3, #25]
 8001d52:	035b      	lsls	r3, r3, #13
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d58:	2a01      	cmp	r2, #1
 8001d5a:	d002      	beq.n	8001d62 <HAL_ADC_Init+0x1e6>
 8001d5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d60:	e000      	b.n	8001d64 <HAL_ADC_Init+0x1e8>
 8001d62:	2200      	movs	r2, #0
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d74:	4313      	orrs	r3, r2
 8001d76:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d11b      	bne.n	8001dba <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7e5b      	ldrb	r3, [r3, #25]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d109      	bne.n	8001d9e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	045a      	lsls	r2, r3, #17
 8001d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d94:	4313      	orrs	r3, r2
 8001d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9a:	663b      	str	r3, [r7, #96]	; 0x60
 8001d9c:	e00d      	b.n	8001dba <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001da6:	f043 0220 	orr.w	r2, r3, #32
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d007      	beq.n	8001dd2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d114      	bne.n	8001e0a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dee:	f023 0302 	bic.w	r3, r3, #2
 8001df2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7e1b      	ldrb	r3, [r3, #24]
 8001df8:	039a      	lsls	r2, r3, #14
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4313      	orrs	r3, r2
 8001e04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e06:	4313      	orrs	r3, r2
 8001e08:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <HAL_ADC_Init+0x320>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e1a:	430b      	orrs	r3, r1
 8001e1c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d10c      	bne.n	8001e40 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	f023 010f 	bic.w	r1, r3, #15
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	1e5a      	subs	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e3e:	e007      	b.n	8001e50 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 020f 	bic.w	r2, r2, #15
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f023 0303 	bic.w	r3, r3, #3
 8001e5e:	f043 0201 	orr.w	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	641a      	str	r2, [r3, #64]	; 0x40
 8001e66:	e00a      	b.n	8001e7e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f023 0312 	bic.w	r3, r3, #18
 8001e70:	f043 0210 	orr.w	r2, r3, #16
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001e7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3768      	adds	r7, #104	; 0x68
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000030 	.word	0x20000030
 8001e90:	431bde83 	.word	0x431bde83
 8001e94:	50000300 	.word	0x50000300
 8001e98:	50000100 	.word	0x50000100
 8001e9c:	fff0c007 	.word	0xfff0c007

08001ea0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f040 80b9 	bne.w	8002032 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_ADC_Start_DMA+0x2e>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e0b4      	b.n	8002038 <HAL_ADC_Start_DMA+0x198>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001ed6:	4b5a      	ldr	r3, [pc, #360]	; (8002040 <HAL_ADC_Start_DMA+0x1a0>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 80a0 	bne.w	8002024 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 fcff 	bl	80028e8 <ADC_Enable>
 8001eea:	4603      	mov	r3, r0
 8001eec:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001eee:	7dfb      	ldrb	r3, [r7, #23]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f040 8092 	bne.w	800201a <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f0a:	4b4d      	ldr	r3, [pc, #308]	; (8002040 <HAL_ADC_Start_DMA+0x1a0>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d004      	beq.n	8001f20 <HAL_ADC_Start_DMA+0x80>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f1e:	d115      	bne.n	8001f4c <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d027      	beq.n	8001f8a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001f4a:	e01e      	b.n	8001f8a <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f60:	d004      	beq.n	8001f6c <HAL_ADC_Start_DMA+0xcc>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a37      	ldr	r2, [pc, #220]	; (8002044 <HAL_ADC_Start_DMA+0x1a4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d10e      	bne.n	8001f8a <HAL_ADC_Start_DMA+0xea>
 8001f6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d007      	beq.n	8001f8a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f96:	d106      	bne.n	8001fa6 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9c:	f023 0206 	bic.w	r2, r3, #6
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	645a      	str	r2, [r3, #68]	; 0x44
 8001fa4:	e002      	b.n	8001fac <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb8:	4a23      	ldr	r2, [pc, #140]	; (8002048 <HAL_ADC_Start_DMA+0x1a8>)
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc0:	4a22      	ldr	r2, [pc, #136]	; (800204c <HAL_ADC_Start_DMA+0x1ac>)
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc8:	4a21      	ldr	r2, [pc, #132]	; (8002050 <HAL_ADC_Start_DMA+0x1b0>)
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	221c      	movs	r2, #28
 8001fd2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0210 	orr.w	r2, r2, #16
 8001fe2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	3340      	adds	r3, #64	; 0x40
 8001ffe:	4619      	mov	r1, r3
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f000 ff34 	bl	8002e70 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0204 	orr.w	r2, r2, #4
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	e00d      	b.n	8002036 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002022:	e008      	b.n	8002036 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002030:	e001      	b.n	8002036 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002032:	2302      	movs	r3, #2
 8002034:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002036:	7dfb      	ldrb	r3, [r7, #23]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	50000300 	.word	0x50000300
 8002044:	50000100 	.word	0x50000100
 8002048:	0800281d 	.word	0x0800281d
 800204c:	08002897 	.word	0x08002897
 8002050:	080028b3 	.word	0x080028b3

08002054 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_ADC_Stop_DMA+0x1a>
 800206a:	2302      	movs	r3, #2
 800206c:	e04a      	b.n	8002104 <HAL_ADC_Stop_DMA+0xb0>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002076:	216c      	movs	r1, #108	; 0x6c
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fcf3 	bl	8002a64 <ADC_ConversionStop>
 800207e:	4603      	mov	r3, r0
 8002080:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d138      	bne.n	80020fa <HAL_ADC_Stop_DMA+0xa6>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209c:	4618      	mov	r0, r3
 800209e:	f000 ff46 	bl	8002f2e <HAL_DMA_Abort>
 80020a2:	4603      	mov	r3, r0
 80020a4:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_ADC_Stop_DMA+0x64>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0210 	bic.w	r2, r2, #16
 80020c6:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d105      	bne.n	80020da <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fc68 	bl	80029a4 <ADC_Disable>
 80020d4:	4603      	mov	r3, r0
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	e002      	b.n	80020e0 <HAL_ADC_Stop_DMA+0x8c>
    }
    else
    {
      ADC_Disable(hadc);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fc62 	bl	80029a4 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_ADC_Stop_DMA+0xa6>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020ee:	f023 0301 	bic.w	r3, r3, #1
 80020f2:	f043 0201 	orr.w	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002102:	7bfb      	ldrb	r3, [r7, #15]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800210c:	b480      	push	{r7}
 800210e:	b09b      	sub	sp, #108	; 0x6c
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_ADC_ConfigChannel+0x22>
 800212a:	2302      	movs	r3, #2
 800212c:	e2a5      	b.n	800267a <HAL_ADC_ConfigChannel+0x56e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	f040 8289 	bne.w	8002658 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b04      	cmp	r3, #4
 800214c:	d81c      	bhi.n	8002188 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	461a      	mov	r2, r3
 8002162:	231f      	movs	r3, #31
 8002164:	4093      	lsls	r3, r2
 8002166:	43db      	mvns	r3, r3
 8002168:	4019      	ands	r1, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fa00 f203 	lsl.w	r2, r0, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	631a      	str	r2, [r3, #48]	; 0x30
 8002186:	e063      	b.n	8002250 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b09      	cmp	r3, #9
 800218e:	d81e      	bhi.n	80021ce <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	3b1e      	subs	r3, #30
 80021a4:	221f      	movs	r2, #31
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	4019      	ands	r1, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	3b1e      	subs	r3, #30
 80021c0:	fa00 f203 	lsl.w	r2, r0, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	635a      	str	r2, [r3, #52]	; 0x34
 80021cc:	e040      	b.n	8002250 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b0e      	cmp	r3, #14
 80021d4:	d81e      	bhi.n	8002214 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	3b3c      	subs	r3, #60	; 0x3c
 80021ea:	221f      	movs	r2, #31
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	4019      	ands	r1, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	3b3c      	subs	r3, #60	; 0x3c
 8002206:	fa00 f203 	lsl.w	r2, r0, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	639a      	str	r2, [r3, #56]	; 0x38
 8002212:	e01d      	b.n	8002250 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	3b5a      	subs	r3, #90	; 0x5a
 8002228:	221f      	movs	r2, #31
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	4019      	ands	r1, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	3b5a      	subs	r3, #90	; 0x5a
 8002244:	fa00 f203 	lsl.w	r2, r0, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 80e5 	bne.w	800242a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b09      	cmp	r3, #9
 8002266:	d91c      	bls.n	80022a2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6999      	ldr	r1, [r3, #24]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	3b1e      	subs	r3, #30
 800227a:	2207      	movs	r2, #7
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	4019      	ands	r1, r3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6898      	ldr	r0, [r3, #8]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	3b1e      	subs	r3, #30
 8002294:	fa00 f203 	lsl.w	r2, r0, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	619a      	str	r2, [r3, #24]
 80022a0:	e019      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6959      	ldr	r1, [r3, #20]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	2207      	movs	r2, #7
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	4019      	ands	r1, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6898      	ldr	r0, [r3, #8]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	fa00 f203 	lsl.w	r2, r0, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	08db      	lsrs	r3, r3, #3
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d84f      	bhi.n	8002398 <HAL_ADC_ConfigChannel+0x28c>
 80022f8:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <HAL_ADC_ConfigChannel+0x1f4>)
 80022fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fe:	bf00      	nop
 8002300:	08002311 	.word	0x08002311
 8002304:	08002333 	.word	0x08002333
 8002308:	08002355 	.word	0x08002355
 800230c:	08002377 	.word	0x08002377
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002316:	4b9e      	ldr	r3, [pc, #632]	; (8002590 <HAL_ADC_ConfigChannel+0x484>)
 8002318:	4013      	ands	r3, r2
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	0691      	lsls	r1, r2, #26
 8002320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002322:	430a      	orrs	r2, r1
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800232e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002330:	e07e      	b.n	8002430 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002338:	4b95      	ldr	r3, [pc, #596]	; (8002590 <HAL_ADC_ConfigChannel+0x484>)
 800233a:	4013      	ands	r3, r2
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	0691      	lsls	r1, r2, #26
 8002342:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002344:	430a      	orrs	r2, r1
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002350:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002352:	e06d      	b.n	8002430 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800235a:	4b8d      	ldr	r3, [pc, #564]	; (8002590 <HAL_ADC_ConfigChannel+0x484>)
 800235c:	4013      	ands	r3, r2
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	0691      	lsls	r1, r2, #26
 8002364:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002366:	430a      	orrs	r2, r1
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002372:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002374:	e05c      	b.n	8002430 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800237c:	4b84      	ldr	r3, [pc, #528]	; (8002590 <HAL_ADC_ConfigChannel+0x484>)
 800237e:	4013      	ands	r3, r2
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	0691      	lsls	r1, r2, #26
 8002386:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002388:	430a      	orrs	r2, r1
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002394:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002396:	e04b      	b.n	8002430 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	069b      	lsls	r3, r3, #26
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d107      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023ba:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	069b      	lsls	r3, r3, #26
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d107      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023de:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	069b      	lsls	r3, r3, #26
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d107      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002402:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800240a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	069b      	lsls	r3, r3, #26
 8002414:	429a      	cmp	r2, r3
 8002416:	d10a      	bne.n	800242e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002426:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002428:	e001      	b.n	800242e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800242a:	bf00      	nop
 800242c:	e000      	b.n	8002430 <HAL_ADC_ConfigChannel+0x324>
      break;
 800242e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d108      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x344>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x344>
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <HAL_ADC_ConfigChannel+0x346>
 8002450:	2300      	movs	r3, #0
 8002452:	2b00      	cmp	r3, #0
 8002454:	f040 810b 	bne.w	800266e <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d00f      	beq.n	8002480 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2201      	movs	r2, #1
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	400a      	ands	r2, r1
 800247a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800247e:	e049      	b.n	8002514 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2201      	movs	r2, #1
 800248e:	409a      	lsls	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b09      	cmp	r3, #9
 80024a0:	d91c      	bls.n	80024dc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6999      	ldr	r1, [r3, #24]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	3b1b      	subs	r3, #27
 80024b4:	2207      	movs	r2, #7
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	4019      	ands	r1, r3
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6898      	ldr	r0, [r3, #8]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4613      	mov	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	3b1b      	subs	r3, #27
 80024ce:	fa00 f203 	lsl.w	r2, r0, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	619a      	str	r2, [r3, #24]
 80024da:	e01b      	b.n	8002514 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6959      	ldr	r1, [r3, #20]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	4613      	mov	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	2207      	movs	r2, #7
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	4019      	ands	r1, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	6898      	ldr	r0, [r3, #8]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	fa00 f203 	lsl.w	r2, r0, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002514:	4b1f      	ldr	r3, [pc, #124]	; (8002594 <HAL_ADC_ConfigChannel+0x488>)
 8002516:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b10      	cmp	r3, #16
 800251e:	d105      	bne.n	800252c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002528:	2b00      	cmp	r3, #0
 800252a:	d015      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002530:	2b11      	cmp	r3, #17
 8002532:	d105      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00b      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002544:	2b12      	cmp	r3, #18
 8002546:	f040 8092 	bne.w	800266e <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800254a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002552:	2b00      	cmp	r3, #0
 8002554:	f040 808b 	bne.w	800266e <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002560:	d102      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x45c>
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <HAL_ADC_ConfigChannel+0x48c>)
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	e002      	b.n	800256e <HAL_ADC_ConfigChannel+0x462>
 8002568:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800256c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d10f      	bne.n	800259c <HAL_ADC_ConfigChannel+0x490>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b01      	cmp	r3, #1
 8002588:	d108      	bne.n	800259c <HAL_ADC_ConfigChannel+0x490>
 800258a:	2301      	movs	r3, #1
 800258c:	e007      	b.n	800259e <HAL_ADC_ConfigChannel+0x492>
 800258e:	bf00      	nop
 8002590:	83fff000 	.word	0x83fff000
 8002594:	50000300 	.word	0x50000300
 8002598:	50000100 	.word	0x50000100
 800259c:	2300      	movs	r3, #0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d150      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025a2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d010      	beq.n	80025ca <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d107      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x4b8>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x4b8>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x4ba>
 80025c4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d13c      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b10      	cmp	r3, #16
 80025d0:	d11d      	bne.n	800260e <HAL_ADC_ConfigChannel+0x502>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025da:	d118      	bne.n	800260e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80025dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025e8:	4b27      	ldr	r3, [pc, #156]	; (8002688 <HAL_ADC_ConfigChannel+0x57c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a27      	ldr	r2, [pc, #156]	; (800268c <HAL_ADC_ConfigChannel+0x580>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	0c9a      	lsrs	r2, r3, #18
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025fe:	e002      	b.n	8002606 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	3b01      	subs	r3, #1
 8002604:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1f9      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800260c:	e02e      	b.n	800266c <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b11      	cmp	r3, #17
 8002614:	d10b      	bne.n	800262e <HAL_ADC_ConfigChannel+0x522>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800261e:	d106      	bne.n	800262e <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800262a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800262c:	e01e      	b.n	800266c <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b12      	cmp	r3, #18
 8002634:	d11a      	bne.n	800266c <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800263e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002640:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002642:	e013      	b.n	800266c <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f043 0220 	orr.w	r2, r3, #32
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002656:	e00a      	b.n	800266e <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f043 0220 	orr.w	r2, r3, #32
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800266a:	e000      	b.n	800266e <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800266c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002676:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800267a:	4618      	mov	r0, r3
 800267c:	376c      	adds	r7, #108	; 0x6c
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000030 	.word	0x20000030
 800268c:	431bde83 	.word	0x431bde83

08002690 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002690:	b480      	push	{r7}
 8002692:	b099      	sub	sp, #100	; 0x64
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026a8:	d102      	bne.n	80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80026aa:	4b5a      	ldr	r3, [pc, #360]	; (8002814 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	e002      	b.n	80026b6 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80026b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026b4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0a2      	b.n	8002806 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e09b      	b.n	8002806 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d17f      	bne.n	80027e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d179      	bne.n	80027e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026f0:	4b49      	ldr	r3, [pc, #292]	; (8002818 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80026f2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d040      	beq.n	800277e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80026fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800270e:	035b      	lsls	r3, r3, #13
 8002710:	430b      	orrs	r3, r1
 8002712:	431a      	orrs	r2, r3
 8002714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002716:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b01      	cmp	r3, #1
 8002724:	d108      	bne.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002738:	2300      	movs	r3, #0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d15c      	bne.n	80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b01      	cmp	r3, #1
 8002748:	d107      	bne.n	800275a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800275a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800275c:	2b00      	cmp	r3, #0
 800275e:	d14b      	bne.n	80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002768:	f023 030f 	bic.w	r3, r3, #15
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	6811      	ldr	r1, [r2, #0]
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	6892      	ldr	r2, [r2, #8]
 8002774:	430a      	orrs	r2, r1
 8002776:	431a      	orrs	r2, r3
 8002778:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800277a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800277c:	e03c      	b.n	80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800277e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002788:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b01      	cmp	r3, #1
 8002796:	d108      	bne.n	80027aa <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80027aa:	2300      	movs	r3, #0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d123      	bne.n	80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d107      	bne.n	80027cc <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80027cc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d112      	bne.n	80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80027d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80027da:	f023 030f 	bic.w	r3, r3, #15
 80027de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027e0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80027e2:	e009      	b.n	80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f043 0220 	orr.w	r2, r3, #32
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80027f6:	e000      	b.n	80027fa <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80027f8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002802:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002806:	4618      	mov	r0, r3
 8002808:	3764      	adds	r7, #100	; 0x64
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	50000100 	.word	0x50000100
 8002818:	50000300 	.word	0x50000300

0800281c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002832:	2b00      	cmp	r3, #0
 8002834:	d126      	bne.n	8002884 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800284c:	2b00      	cmp	r3, #0
 800284e:	d115      	bne.n	800287c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002854:	2b00      	cmp	r3, #0
 8002856:	d111      	bne.n	800287c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d105      	bne.n	800287c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7ff f95f 	bl	8001b40 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002882:	e004      	b.n	800288e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	4798      	blx	r3
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff f955 	bl	8001b54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	f043 0204 	orr.w	r2, r3, #4
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f7ff f945 	bl	8001b68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d108      	bne.n	8002914 <ADC_Enable+0x2c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <ADC_Enable+0x2c>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <ADC_Enable+0x2e>
 8002914:	2300      	movs	r3, #0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d13c      	bne.n	8002994 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <ADC_Enable+0xb8>)
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00d      	beq.n	8002944 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f043 0210 	orr.w	r2, r3, #16
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e028      	b.n	8002996 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002954:	f7ff f8e8 	bl	8001b28 <HAL_GetTick>
 8002958:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800295a:	e014      	b.n	8002986 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800295c:	f7ff f8e4 	bl	8001b28 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d90d      	bls.n	8002986 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f043 0210 	orr.w	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e007      	b.n	8002996 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d1e3      	bne.n	800295c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	8000003f 	.word	0x8000003f

080029a4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d108      	bne.n	80029d0 <ADC_Disable+0x2c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <ADC_Disable+0x2c>
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <ADC_Disable+0x2e>
 80029d0:	2300      	movs	r3, #0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d040      	beq.n	8002a58 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 030d 	and.w	r3, r3, #13
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d10f      	bne.n	8002a04 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0202 	orr.w	r2, r2, #2
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2203      	movs	r2, #3
 80029fa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80029fc:	f7ff f894 	bl	8001b28 <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a02:	e022      	b.n	8002a4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f043 0210 	orr.w	r2, r3, #16
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	f043 0201 	orr.w	r2, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e01c      	b.n	8002a5a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a20:	f7ff f882 	bl	8001b28 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d90d      	bls.n	8002a4a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f043 0210 	orr.w	r2, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	f043 0201 	orr.w	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e007      	b.n	8002a5a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d0e3      	beq.n	8002a20 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 030c 	and.w	r3, r3, #12
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 8093 	beq.w	8002bb0 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a98:	d12a      	bne.n	8002af0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d126      	bne.n	8002af0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d122      	bne.n	8002af0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002aaa:	230c      	movs	r3, #12
 8002aac:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002aae:	e014      	b.n	8002ada <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4a42      	ldr	r2, [pc, #264]	; (8002bbc <ADC_ConversionStop+0x158>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d90d      	bls.n	8002ad4 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	f043 0210 	orr.w	r2, r3, #16
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	f043 0201 	orr.w	r2, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e06e      	b.n	8002bb2 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae4:	2b40      	cmp	r3, #64	; 0x40
 8002ae6:	d1e3      	bne.n	8002ab0 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2240      	movs	r2, #64	; 0x40
 8002aee:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b60      	cmp	r3, #96	; 0x60
 8002af4:	d015      	beq.n	8002b22 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d10e      	bne.n	8002b22 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d107      	bne.n	8002b22 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0210 	orr.w	r2, r2, #16
 8002b20:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b0c      	cmp	r3, #12
 8002b26:	d015      	beq.n	8002b54 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d10e      	bne.n	8002b54 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d107      	bne.n	8002b54 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0220 	orr.w	r2, r2, #32
 8002b52:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2b60      	cmp	r3, #96	; 0x60
 8002b58:	d004      	beq.n	8002b64 <ADC_ConversionStop+0x100>
 8002b5a:	2b6c      	cmp	r3, #108	; 0x6c
 8002b5c:	d105      	bne.n	8002b6a <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002b5e:	230c      	movs	r3, #12
 8002b60:	617b      	str	r3, [r7, #20]
        break;
 8002b62:	e005      	b.n	8002b70 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002b64:	2308      	movs	r3, #8
 8002b66:	617b      	str	r3, [r7, #20]
        break;
 8002b68:	e002      	b.n	8002b70 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	617b      	str	r3, [r7, #20]
        break;
 8002b6e:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002b70:	f7fe ffda 	bl	8001b28 <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002b76:	e014      	b.n	8002ba2 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002b78:	f7fe ffd6 	bl	8001b28 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b0b      	cmp	r3, #11
 8002b84:	d90d      	bls.n	8002ba2 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f043 0210 	orr.w	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	f043 0201 	orr.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e007      	b.n	8002bb2 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e3      	bne.n	8002b78 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	000993ff 	.word	0x000993ff

08002bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf2:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	60d3      	str	r3, [r2, #12]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <__NVIC_GetPriorityGrouping+0x18>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	0a1b      	lsrs	r3, r3, #8
 8002c12:	f003 0307 	and.w	r3, r3, #7
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	db0b      	blt.n	8002c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	f003 021f 	and.w	r2, r3, #31
 8002c3c:	4907      	ldr	r1, [pc, #28]	; (8002c5c <__NVIC_EnableIRQ+0x38>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	2001      	movs	r0, #1
 8002c46:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e000e100 	.word	0xe000e100

08002c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	db0a      	blt.n	8002c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	490c      	ldr	r1, [pc, #48]	; (8002cac <__NVIC_SetPriority+0x4c>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	440b      	add	r3, r1
 8002c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c88:	e00a      	b.n	8002ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4908      	ldr	r1, [pc, #32]	; (8002cb0 <__NVIC_SetPriority+0x50>)
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3b04      	subs	r3, #4
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	761a      	strb	r2, [r3, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000e100 	.word	0xe000e100
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f1c3 0307 	rsb	r3, r3, #7
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	bf28      	it	cs
 8002cd2:	2304      	movcs	r3, #4
 8002cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2b06      	cmp	r3, #6
 8002cdc:	d902      	bls.n	8002ce4 <NVIC_EncodePriority+0x30>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3b03      	subs	r3, #3
 8002ce2:	e000      	b.n	8002ce6 <NVIC_EncodePriority+0x32>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	43d9      	mvns	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	4313      	orrs	r3, r2
         );
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3724      	adds	r7, #36	; 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d2c:	d301      	bcc.n	8002d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e00f      	b.n	8002d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <SysTick_Config+0x40>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d3a:	210f      	movs	r1, #15
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d40:	f7ff ff8e 	bl	8002c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <SysTick_Config+0x40>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4a:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <SysTick_Config+0x40>)
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	e000e010 	.word	0xe000e010

08002d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff29 	bl	8002bc0 <__NVIC_SetPriorityGrouping>
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d88:	f7ff ff3e 	bl	8002c08 <__NVIC_GetPriorityGrouping>
 8002d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	6978      	ldr	r0, [r7, #20]
 8002d94:	f7ff ff8e 	bl	8002cb4 <NVIC_EncodePriority>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff5d 	bl	8002c60 <__NVIC_SetPriority>
}
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff31 	bl	8002c24 <__NVIC_EnableIRQ>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff ffa2 	bl	8002d1c <SysTick_Config>
 8002dd8:	4603      	mov	r3, r0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e037      	b.n	8002e68 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f97a 	bl	8003144 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}  
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_DMA_Start_IT+0x20>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e04a      	b.n	8002f26 <HAL_DMA_Start_IT+0xb6>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d13a      	bne.n	8002f18 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f90d 	bl	80030e6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 020e 	orr.w	r2, r2, #14
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e00f      	b.n	8002f06 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 020a 	orr.w	r2, r2, #10
 8002ef4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0204 	bic.w	r2, r2, #4
 8002f04:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0201 	orr.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	e005      	b.n	8002f24 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002f20:	2302      	movs	r3, #2
 8002f22:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d008      	beq.n	8002f52 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2204      	movs	r2, #4
 8002f44:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e020      	b.n	8002f94 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 020e 	bic.w	r2, r2, #14
 8002f60:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0201 	bic.w	r2, r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f80:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d024      	beq.n	8003012 <HAL_DMA_IRQHandler+0x72>
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d01f      	beq.n	8003012 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d107      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0204 	bic.w	r2, r2, #4
 8002fee:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff8:	2104      	movs	r1, #4
 8002ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffe:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d06a      	beq.n	80030de <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003010:	e065      	b.n	80030de <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	2202      	movs	r2, #2
 8003018:	409a      	lsls	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d02c      	beq.n	800307c <HAL_DMA_IRQHandler+0xdc>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d027      	beq.n	800307c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10b      	bne.n	8003052 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 020a 	bic.w	r2, r2, #10
 8003048:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305a:	2102      	movs	r1, #2
 800305c:	fa01 f202 	lsl.w	r2, r1, r2
 8003060:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	2b00      	cmp	r3, #0
 8003070:	d035      	beq.n	80030de <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800307a:	e030      	b.n	80030de <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	2208      	movs	r2, #8
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d028      	beq.n	80030de <HAL_DMA_IRQHandler+0x13e>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d023      	beq.n	80030de <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 020e 	bic.w	r2, r2, #14
 80030a4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ae:	2101      	movs	r1, #1
 80030b0:	fa01 f202 	lsl.w	r2, r1, r2
 80030b4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d004      	beq.n	80030de <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
    }
  }
}  
 80030dc:	e7ff      	b.n	80030de <HAL_DMA_IRQHandler+0x13e>
 80030de:	bf00      	nop
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b085      	sub	sp, #20
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fc:	2101      	movs	r1, #1
 80030fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003102:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b10      	cmp	r3, #16
 8003112:	d108      	bne.n	8003126 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003124:	e007      	b.n	8003136 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	60da      	str	r2, [r3, #12]
}
 8003136:	bf00      	nop
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <DMA_CalcBaseAndBitshift+0x34>)
 8003154:	4413      	add	r3, r2
 8003156:	4a09      	ldr	r2, [pc, #36]	; (800317c <DMA_CalcBaseAndBitshift+0x38>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	009a      	lsls	r2, r3, #2
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a06      	ldr	r2, [pc, #24]	; (8003180 <DMA_CalcBaseAndBitshift+0x3c>)
 8003168:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	bffdfff8 	.word	0xbffdfff8
 800317c:	cccccccd 	.word	0xcccccccd
 8003180:	40020000 	.word	0x40020000

08003184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003192:	e14e      	b.n	8003432 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	2101      	movs	r1, #1
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	4013      	ands	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8140 	beq.w	800342c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d00b      	beq.n	80031cc <HAL_GPIO_Init+0x48>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d007      	beq.n	80031cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031c0:	2b11      	cmp	r3, #17
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b12      	cmp	r3, #18
 80031ca:	d130      	bne.n	800322e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	2203      	movs	r2, #3
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003202:	2201      	movs	r2, #1
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	f003 0201 	and.w	r2, r3, #1
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	2203      	movs	r2, #3
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d003      	beq.n	800326e <HAL_GPIO_Init+0xea>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b12      	cmp	r3, #18
 800326c:	d123      	bne.n	80032b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	08da      	lsrs	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3208      	adds	r2, #8
 8003276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800327a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	220f      	movs	r2, #15
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4013      	ands	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	08da      	lsrs	r2, r3, #3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3208      	adds	r2, #8
 80032b0:	6939      	ldr	r1, [r7, #16]
 80032b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	2203      	movs	r2, #3
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4013      	ands	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 0203 	and.w	r2, r3, #3
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 809a 	beq.w	800342c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f8:	4b55      	ldr	r3, [pc, #340]	; (8003450 <HAL_GPIO_Init+0x2cc>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	4a54      	ldr	r2, [pc, #336]	; (8003450 <HAL_GPIO_Init+0x2cc>)
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	6193      	str	r3, [r2, #24]
 8003304:	4b52      	ldr	r3, [pc, #328]	; (8003450 <HAL_GPIO_Init+0x2cc>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003310:	4a50      	ldr	r2, [pc, #320]	; (8003454 <HAL_GPIO_Init+0x2d0>)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	089b      	lsrs	r3, r3, #2
 8003316:	3302      	adds	r3, #2
 8003318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	220f      	movs	r2, #15
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800333a:	d013      	beq.n	8003364 <HAL_GPIO_Init+0x1e0>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a46      	ldr	r2, [pc, #280]	; (8003458 <HAL_GPIO_Init+0x2d4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d00d      	beq.n	8003360 <HAL_GPIO_Init+0x1dc>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a45      	ldr	r2, [pc, #276]	; (800345c <HAL_GPIO_Init+0x2d8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d007      	beq.n	800335c <HAL_GPIO_Init+0x1d8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a44      	ldr	r2, [pc, #272]	; (8003460 <HAL_GPIO_Init+0x2dc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d101      	bne.n	8003358 <HAL_GPIO_Init+0x1d4>
 8003354:	2303      	movs	r3, #3
 8003356:	e006      	b.n	8003366 <HAL_GPIO_Init+0x1e2>
 8003358:	2305      	movs	r3, #5
 800335a:	e004      	b.n	8003366 <HAL_GPIO_Init+0x1e2>
 800335c:	2302      	movs	r3, #2
 800335e:	e002      	b.n	8003366 <HAL_GPIO_Init+0x1e2>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <HAL_GPIO_Init+0x1e2>
 8003364:	2300      	movs	r3, #0
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	f002 0203 	and.w	r2, r2, #3
 800336c:	0092      	lsls	r2, r2, #2
 800336e:	4093      	lsls	r3, r2
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003376:	4937      	ldr	r1, [pc, #220]	; (8003454 <HAL_GPIO_Init+0x2d0>)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	3302      	adds	r3, #2
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003384:	4b37      	ldr	r3, [pc, #220]	; (8003464 <HAL_GPIO_Init+0x2e0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	43db      	mvns	r3, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033a8:	4a2e      	ldr	r2, [pc, #184]	; (8003464 <HAL_GPIO_Init+0x2e0>)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033ae:	4b2d      	ldr	r3, [pc, #180]	; (8003464 <HAL_GPIO_Init+0x2e0>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033d2:	4a24      	ldr	r2, [pc, #144]	; (8003464 <HAL_GPIO_Init+0x2e0>)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033d8:	4b22      	ldr	r3, [pc, #136]	; (8003464 <HAL_GPIO_Init+0x2e0>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4013      	ands	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033fc:	4a19      	ldr	r2, [pc, #100]	; (8003464 <HAL_GPIO_Init+0x2e0>)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003402:	4b18      	ldr	r3, [pc, #96]	; (8003464 <HAL_GPIO_Init+0x2e0>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	43db      	mvns	r3, r3
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4013      	ands	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003426:	4a0f      	ldr	r2, [pc, #60]	; (8003464 <HAL_GPIO_Init+0x2e0>)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	3301      	adds	r3, #1
 8003430:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	f47f aea9 	bne.w	8003194 <HAL_GPIO_Init+0x10>
  }
}
 8003442:	bf00      	nop
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000
 8003454:	40010000 	.word	0x40010000
 8003458:	48000400 	.word	0x48000400
 800345c:	48000800 	.word	0x48000800
 8003460:	48000c00 	.word	0x48000c00
 8003464:	40010400 	.word	0x40010400

08003468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	807b      	strh	r3, [r7, #2]
 8003474:	4613      	mov	r3, r2
 8003476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003478:	787b      	ldrb	r3, [r7, #1]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800347e:	887a      	ldrh	r2, [r7, #2]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003484:	e002      	b.n	800348c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003486:	887a      	ldrh	r2, [r7, #2]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034aa:	887a      	ldrh	r2, [r7, #2]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4013      	ands	r3, r2
 80034b0:	041a      	lsls	r2, r3, #16
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	43d9      	mvns	r1, r3
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	400b      	ands	r3, r1
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	619a      	str	r2, [r3, #24]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e0ba      	b.n	8003654 <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2202      	movs	r2, #2
 80034e2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d02e      	beq.n	8003580 <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a4d      	ldr	r2, [pc, #308]	; (800365c <HAL_HRTIM_Init+0x190>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d10b      	bne.n	8003544 <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 800352c:	4b4c      	ldr	r3, [pc, #304]	; (8003660 <HAL_HRTIM_Init+0x194>)
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	4a4b      	ldr	r2, [pc, #300]	; (8003660 <HAL_HRTIM_Init+0x194>)
 8003532:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003536:	6193      	str	r3, [r2, #24]
 8003538:	4b49      	ldr	r3, [pc, #292]	; (8003660 <HAL_HRTIM_Init+0x194>)
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003552:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003568:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7fe f8f9 	bl	8001778 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d012      	beq.n	80035b8 <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80035c8:	2300      	movs	r3, #0
 80035ca:	75fb      	strb	r3, [r7, #23]
 80035cc:	e03e      	b.n	800364c <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80035ce:	7dfa      	ldrb	r2, [r7, #23]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3318      	adds	r3, #24
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80035e2:	7dfa      	ldrb	r2, [r7, #23]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	331c      	adds	r3, #28
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80035f6:	7dfa      	ldrb	r2, [r7, #23]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	3320      	adds	r3, #32
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800360a:	7dfa      	ldrb	r2, [r7, #23]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	3324      	adds	r3, #36	; 0x24
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 800361e:	7dfa      	ldrb	r2, [r7, #23]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	3328      	adds	r3, #40	; 0x28
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8003632:	7dfa      	ldrb	r2, [r7, #23]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	3330      	adds	r3, #48	; 0x30
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	3301      	adds	r3, #1
 800364a:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800364c:	7dfb      	ldrb	r3, [r7, #23]
 800364e:	2b05      	cmp	r3, #5
 8003650:	d9bd      	bls.n	80035ce <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40017400 	.word	0x40017400
 8003660:	40021000 	.word	0x40021000

08003664 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d101      	bne.n	8003680 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 800367c:	2302      	movs	r3, #2
 800367e:	e015      	b.n	80036ac <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b05      	cmp	r3, #5
 800368c:	d104      	bne.n	8003698 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 fb26 	bl	8003ce2 <HRTIM_MasterBase_Config>
 8003696:	e004      	b.n	80036a2 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 fb4f 	bl	8003d40 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d101      	bne.n	80036d0 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80036cc:	2302      	movs	r3, #2
 80036ce:	e05f      	b.n	8003790 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80036da:	2302      	movs	r3, #2
 80036dc:	e058      	b.n	8003790 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2202      	movs	r2, #2
 80036ea:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b05      	cmp	r3, #5
 80036f2:	d104      	bne.n	80036fe <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fb62 	bl	8003dc0 <HRTIM_MasterWaveform_Config>
 80036fc:	e004      	b.n	8003708 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fbc2 	bl	8003e8c <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6819      	ldr	r1, [r3, #0]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4403      	add	r3, r0
 800371a:	3320      	adds	r3, #32
 800371c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6859      	ldr	r1, [r3, #4]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	4613      	mov	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4403      	add	r3, r0
 8003730:	3324      	adds	r3, #36	; 0x24
 8003732:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6899      	ldr	r1, [r3, #8]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4403      	add	r3, r0
 8003746:	3328      	adds	r3, #40	; 0x28
 8003748:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68d9      	ldr	r1, [r3, #12]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	4613      	mov	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4403      	add	r3, r0
 800375c:	332c      	adds	r3, #44	; 0x2c
 800375e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6919      	ldr	r1, [r3, #16]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	4613      	mov	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4403      	add	r3, r0
 8003772:	3330      	adds	r3, #48	; 0x30
 8003774:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fd7d 	bl	8004278 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d101      	bne.n	80037b4 <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
     return HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
 80037b2:	e067      	b.n	8003884 <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_HRTIM_DeadTimeConfig+0x2a>
 80037be:	2302      	movs	r3, #2
 80037c0:	e060      	b.n	8003884 <HAL_HRTIM_DeadTimeConfig+0xec>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2202      	movs	r2, #2
 80037ce:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80037da:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	041a      	lsls	r2, r3, #16
 800381a:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_HRTIM_DeadTimeConfig+0xf8>)
 800381c:	4013      	ands	r3, r2
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	01db      	lsls	r3, r3, #7
 8003856:	4413      	add	r3, r2
 8003858:	33b8      	adds	r3, #184	; 0xb8
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <HAL_HRTIM_DeadTimeConfig+0xfc>)
 800385e:	4013      	ands	r3, r2
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	6811      	ldr	r1, [r2, #0]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	431a      	orrs	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	01db      	lsls	r3, r3, #7
 800386c:	440b      	add	r3, r1
 800386e:	33b8      	adds	r3, #184	; 0xb8
 8003870:	601a      	str	r2, [r3, #0]
                 HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
                 HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	01ff0000 	.word	0x01ff0000
 8003894:	3c002000 	.word	0x3c002000

08003898 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d101      	bne.n	80038b6 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80038b2:	2302      	movs	r3, #2
 80038b4:	e157      	b.n	8003b66 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e150      	b.n	8003b66 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d140      	bne.n	800395c <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3b01      	subs	r3, #1
 80038de:	2b07      	cmp	r3, #7
 80038e0:	d82a      	bhi.n	8003938 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80038e2:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80038e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e8:	08003909 	.word	0x08003909
 80038ec:	08003915 	.word	0x08003915
 80038f0:	08003939 	.word	0x08003939
 80038f4:	08003921 	.word	0x08003921
 80038f8:	08003939 	.word	0x08003939
 80038fc:	08003939 	.word	0x08003939
 8003900:	08003939 	.word	0x08003939
 8003904:	0800392d 	.word	0x0800392d
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	61da      	str	r2, [r3, #28]
        break;
 8003912:	e01a      	b.n	800394a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800391e:	e014      	b.n	800394a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800392a:	e00e      	b.n	800394a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8003936:	e008      	b.n	800394a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2207      	movs	r2, #7
 800393c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8003948:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b07      	cmp	r3, #7
 8003954:	f040 80fe 	bne.w	8003b54 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e104      	b.n	8003b66 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3b01      	subs	r3, #1
 8003960:	2b07      	cmp	r3, #7
 8003962:	f200 80e3 	bhi.w	8003b2c <HAL_HRTIM_WaveformCompareConfig+0x294>
 8003966:	a201      	add	r2, pc, #4	; (adr r2, 800396c <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8003968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396c:	0800398d 	.word	0x0800398d
 8003970:	080039a1 	.word	0x080039a1
 8003974:	08003b2d 	.word	0x08003b2d
 8003978:	08003a5d 	.word	0x08003a5d
 800397c:	08003b2d 	.word	0x08003b2d
 8003980:	08003b2d 	.word	0x08003b2d
 8003984:	08003b2d 	.word	0x08003b2d
 8003988:	08003a71 	.word	0x08003a71
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6819      	ldr	r1, [r3, #0]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	01db      	lsls	r3, r3, #7
 8003998:	440b      	add	r3, r1
 800399a:	339c      	adds	r3, #156	; 0x9c
 800399c:	601a      	str	r2, [r3, #0]
        break;
 800399e:	e0d1      	b.n	8003b44 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6819      	ldr	r1, [r3, #0]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	01db      	lsls	r3, r3, #7
 80039ac:	440b      	add	r3, r1
 80039ae:	33a4      	adds	r3, #164	; 0xa4
 80039b0:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d03f      	beq.n	8003a3a <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	3301      	adds	r3, #1
 80039c2:	01db      	lsls	r3, r3, #7
 80039c4:	4413      	add	r3, r2
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	6811      	ldr	r1, [r2, #0]
 80039cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	3301      	adds	r3, #1
 80039d4:	01db      	lsls	r3, r3, #7
 80039d6:	440b      	add	r3, r1
 80039d8:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	3301      	adds	r3, #1
 80039e2:	01db      	lsls	r3, r3, #7
 80039e4:	4413      	add	r3, r2
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	68f9      	ldr	r1, [r7, #12]
 80039ee:	6809      	ldr	r1, [r1, #0]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	3301      	adds	r3, #1
 80039f6:	01db      	lsls	r3, r3, #7
 80039f8:	440b      	add	r3, r1
 80039fa:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a04:	d109      	bne.n	8003a1a <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6819      	ldr	r1, [r3, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	01db      	lsls	r3, r3, #7
 8003a12:	440b      	add	r3, r1
 8003a14:	339c      	adds	r3, #156	; 0x9c
 8003a16:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8003a18:	e091      	b.n	8003b3e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a22:	f040 808c 	bne.w	8003b3e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6819      	ldr	r1, [r3, #0]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	01db      	lsls	r3, r3, #7
 8003a32:	440b      	add	r3, r1
 8003a34:	33a8      	adds	r3, #168	; 0xa8
 8003a36:	601a      	str	r2, [r3, #0]
         break;
 8003a38:	e081      	b.n	8003b3e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	3301      	adds	r3, #1
 8003a42:	01db      	lsls	r3, r3, #7
 8003a44:	4413      	add	r3, r2
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	6811      	ldr	r1, [r2, #0]
 8003a4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	3301      	adds	r3, #1
 8003a54:	01db      	lsls	r3, r3, #7
 8003a56:	440b      	add	r3, r1
 8003a58:	601a      	str	r2, [r3, #0]
         break;
 8003a5a:	e070      	b.n	8003b3e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6819      	ldr	r1, [r3, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	01db      	lsls	r3, r3, #7
 8003a68:	440b      	add	r3, r1
 8003a6a:	33a8      	adds	r3, #168	; 0xa8
 8003a6c:	601a      	str	r2, [r3, #0]
        break;
 8003a6e:	e069      	b.n	8003b44 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6819      	ldr	r1, [r3, #0]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	01db      	lsls	r3, r3, #7
 8003a7c:	440b      	add	r3, r1
 8003a7e:	33ac      	adds	r3, #172	; 0xac
 8003a80:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d03f      	beq.n	8003b0a <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	3301      	adds	r3, #1
 8003a92:	01db      	lsls	r3, r3, #7
 8003a94:	4413      	add	r3, r2
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	6811      	ldr	r1, [r2, #0]
 8003a9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	01db      	lsls	r3, r3, #7
 8003aa6:	440b      	add	r3, r1
 8003aa8:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	01db      	lsls	r3, r3, #7
 8003ab4:	4413      	add	r3, r2
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	68f9      	ldr	r1, [r7, #12]
 8003ac0:	6809      	ldr	r1, [r1, #0]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	01db      	lsls	r3, r3, #7
 8003aca:	440b      	add	r3, r1
 8003acc:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ad6:	d109      	bne.n	8003aec <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6819      	ldr	r1, [r3, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	01db      	lsls	r3, r3, #7
 8003ae4:	440b      	add	r3, r1
 8003ae6:	339c      	adds	r3, #156	; 0x9c
 8003ae8:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8003aea:	e02a      	b.n	8003b42 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003af4:	d125      	bne.n	8003b42 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6819      	ldr	r1, [r3, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	01db      	lsls	r3, r3, #7
 8003b02:	440b      	add	r3, r1
 8003b04:	33a8      	adds	r3, #168	; 0xa8
 8003b06:	601a      	str	r2, [r3, #0]
         break;
 8003b08:	e01b      	b.n	8003b42 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	3301      	adds	r3, #1
 8003b12:	01db      	lsls	r3, r3, #7
 8003b14:	4413      	add	r3, r2
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	6811      	ldr	r1, [r2, #0]
 8003b1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	3301      	adds	r3, #1
 8003b24:	01db      	lsls	r3, r3, #7
 8003b26:	440b      	add	r3, r1
 8003b28:	601a      	str	r2, [r3, #0]
         break;
 8003b2a:	e00a      	b.n	8003b42 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2207      	movs	r2, #7
 8003b30:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8003b3c:	e002      	b.n	8003b44 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8003b3e:	bf00      	nop
 8003b40:	e000      	b.n	8003b44 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8003b42:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b07      	cmp	r3, #7
 8003b4e:	d101      	bne.n	8003b54 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e008      	b.n	8003b66 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop

08003b74 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d101      	bne.n	8003b92 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e01d      	b.n	8003bce <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e016      	b.n	8003bce <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 faa8 	bl	800410c <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_HRTIM_WaveformOutputStart+0x18>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e01a      	b.n	8003c24 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_HRTIM_WaveformCountStart+0x18>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e018      	b.n	8003c7a <HAL_HRTIM_WaveformCountStart+0x4a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6819      	ldr	r1, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_HRTIM_UpdateEnable>:
  *                   @arg HRTIM_TIMERUPDATE_E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_UpdateEnable(HRTIM_HandleTypeDef *hhrtim,
                                          uint32_t Timers)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMERUPDATE(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_HRTIM_UpdateEnable+0x18>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e01b      	b.n	8003cd6 <HAL_HRTIM_UpdateEnable+0x50>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable timer(s) registers update */
  hhrtim->Instance->sCommonRegs.CR1 &= ~(Timers);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f8d3 1380 	ldr.w	r1, [r3, #896]	; 0x380
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	43da      	mvns	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	400a      	ands	r2, r1
 8003cc0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
  }
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0307 	bic.w	r3, r3, #7
 8003cfa:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f023 0318 	bic.w	r3, r3, #24
 8003d0c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	6852      	ldr	r2, [r2, #4]
 8003d32:	619a      	str	r2, [r3, #24]
}
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	3301      	adds	r3, #1
 8003d54:	01db      	lsls	r3, r3, #7
 8003d56:	4413      	add	r3, r2
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 0307 	bic.w	r3, r3, #7
 8003d62:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f023 0318 	bic.w	r3, r3, #24
 8003d74:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	3301      	adds	r3, #1
 8003d88:	01db      	lsls	r3, r3, #7
 8003d8a:	4413      	add	r3, r2
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6819      	ldr	r1, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	01db      	lsls	r3, r3, #7
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3394      	adds	r3, #148	; 0x94
 8003da0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6819      	ldr	r1, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	01db      	lsls	r3, r3, #7
 8003dae:	440b      	add	r3, r1
 8003db0:	3398      	adds	r3, #152	; 0x98
 8003db2:	601a      	str	r2, [r3, #0]
}
 8003db4:	bf00      	nop
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003dda:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0320 	bic.w	r3, r3, #32
 8003de2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003df4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e06:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e18:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003e2a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e3c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003e50:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e62:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b08b      	sub	sp, #44	; 0x2c
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	01db      	lsls	r3, r3, #7
 8003ea2:	4413      	add	r3, r2
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	6811      	ldr	r1, [r2, #0]
 8003eaa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	01db      	lsls	r3, r3, #7
 8003eb4:	440b      	add	r3, r1
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	01db      	lsls	r3, r3, #7
 8003ec2:	4413      	add	r3, r2
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	01db      	lsls	r3, r3, #7
 8003ed0:	4413      	add	r3, r2
 8003ed2:	33e8      	adds	r3, #232	; 0xe8
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	01db      	lsls	r3, r3, #7
 8003ee0:	4413      	add	r3, r2
 8003ee2:	33e4      	adds	r3, #228	; 0xe4
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003ef0:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	f023 0320 	bic.w	r3, r3, #32
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f00:	4313      	orrs	r3, r2
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f12:	4313      	orrs	r3, r2
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f24:	4313      	orrs	r3, r2
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f36:	4313      	orrs	r3, r2
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f6e:	d103      	bne.n	8003f78 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f86:	4313      	orrs	r3, r2
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003faa:	4313      	orrs	r3, r2
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f023 031f 	bic.w	r3, r3, #31
 8003fb4:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fca:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d108      	bne.n	8003ff0 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe4:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	6a3a      	ldr	r2, [r7, #32]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff4:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8003ff8:	d004      	beq.n	8004004 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8004002:	d103      	bne.n	800400c <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004008:	2b40      	cmp	r3, #64	; 0x40
 800400a:	d108      	bne.n	800401e <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8004012:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004018:	6a3a      	ldr	r2, [r7, #32]
 800401a:	4313      	orrs	r3, r2
 800401c:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004022:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b04      	cmp	r3, #4
 8004028:	d843      	bhi.n	80040b2 <HRTIM_TimingUnitWaveform_Config+0x226>
 800402a:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 800402c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004030:	08004045 	.word	0x08004045
 8004034:	0800405b 	.word	0x0800405b
 8004038:	08004071 	.word	0x08004071
 800403c:	08004087 	.word	0x08004087
 8004040:	0800409d 	.word	0x0800409d
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800404a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	4313      	orrs	r3, r2
 8004056:	61fb      	str	r3, [r7, #28]
      break;
 8004058:	e02c      	b.n	80040b4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004060:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	4313      	orrs	r3, r2
 800406c:	61fb      	str	r3, [r7, #28]
      break;
 800406e:	e021      	b.n	80040b4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004076:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	4313      	orrs	r3, r2
 8004082:	61fb      	str	r3, [r7, #28]
      break;
 8004084:	e016      	b.n	80040b4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800408c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	4313      	orrs	r3, r2
 8004098:	61fb      	str	r3, [r7, #28]
      break;
 800409a:	e00b      	b.n	80040b4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040a2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	015b      	lsls	r3, r3, #5
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61fb      	str	r3, [r7, #28]
      break;
 80040b0:	e000      	b.n	80040b4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80040b2:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	3301      	adds	r3, #1
 80040bc:	01db      	lsls	r3, r3, #7
 80040be:	4413      	add	r3, r2
 80040c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	01db      	lsls	r3, r3, #7
 80040cc:	4413      	add	r3, r2
 80040ce:	33e8      	adds	r3, #232	; 0xe8
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	01db      	lsls	r3, r3, #7
 80040dc:	4413      	add	r3, r2
 80040de:	33e4      	adds	r3, #228	; 0xe4
 80040e0:	6a3a      	ldr	r2, [r7, #32]
 80040e2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	01db      	lsls	r3, r3, #7
 80040ec:	4413      	add	r3, r2
 80040ee:	33d4      	adds	r3, #212	; 0xd4
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80040fe:	bf00      	nop
 8004100:	372c      	adds	r7, #44	; 0x2c
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop

0800410c <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800410c:	b480      	push	{r7}
 800410e:	b089      	sub	sp, #36	; 0x24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	01db      	lsls	r3, r3, #7
 8004126:	4413      	add	r3, r2
 8004128:	33e4      	adds	r3, #228	; 0xe4
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	01db      	lsls	r3, r3, #7
 8004136:	4413      	add	r3, r2
 8004138:	33b8      	adds	r3, #184	; 0xb8
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	617b      	str	r3, [r7, #20]

  switch (Output)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b10      	cmp	r3, #16
 8004142:	d01d      	beq.n	8004180 <HRTIM_OutputConfig+0x74>
 8004144:	2b10      	cmp	r3, #16
 8004146:	d80b      	bhi.n	8004160 <HRTIM_OutputConfig+0x54>
 8004148:	2b02      	cmp	r3, #2
 800414a:	d02c      	beq.n	80041a6 <HRTIM_OutputConfig+0x9a>
 800414c:	2b02      	cmp	r3, #2
 800414e:	d802      	bhi.n	8004156 <HRTIM_OutputConfig+0x4a>
 8004150:	2b01      	cmp	r3, #1
 8004152:	d015      	beq.n	8004180 <HRTIM_OutputConfig+0x74>
      shift = 16U;
      break;
    }

  default:
    break;
 8004154:	e03c      	b.n	80041d0 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 8004156:	2b04      	cmp	r3, #4
 8004158:	d012      	beq.n	8004180 <HRTIM_OutputConfig+0x74>
 800415a:	2b08      	cmp	r3, #8
 800415c:	d023      	beq.n	80041a6 <HRTIM_OutputConfig+0x9a>
    break;
 800415e:	e037      	b.n	80041d0 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 8004160:	2b80      	cmp	r3, #128	; 0x80
 8004162:	d020      	beq.n	80041a6 <HRTIM_OutputConfig+0x9a>
 8004164:	2b80      	cmp	r3, #128	; 0x80
 8004166:	d804      	bhi.n	8004172 <HRTIM_OutputConfig+0x66>
 8004168:	2b20      	cmp	r3, #32
 800416a:	d01c      	beq.n	80041a6 <HRTIM_OutputConfig+0x9a>
 800416c:	2b40      	cmp	r3, #64	; 0x40
 800416e:	d007      	beq.n	8004180 <HRTIM_OutputConfig+0x74>
    break;
 8004170:	e02e      	b.n	80041d0 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 8004172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004176:	d003      	beq.n	8004180 <HRTIM_OutputConfig+0x74>
 8004178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800417c:	d013      	beq.n	80041a6 <HRTIM_OutputConfig+0x9a>
    break;
 800417e:	e027      	b.n	80041d0 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6819      	ldr	r1, [r3, #0]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	01db      	lsls	r3, r3, #7
 800418c:	440b      	add	r3, r1
 800418e:	33bc      	adds	r3, #188	; 0xbc
 8004190:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6819      	ldr	r1, [r3, #0]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	01db      	lsls	r3, r3, #7
 800419e:	440b      	add	r3, r1
 80041a0:	33c0      	adds	r3, #192	; 0xc0
 80041a2:	601a      	str	r2, [r3, #0]
      break;
 80041a4:	e014      	b.n	80041d0 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6819      	ldr	r1, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	01db      	lsls	r3, r3, #7
 80041b2:	440b      	add	r3, r1
 80041b4:	33c4      	adds	r3, #196	; 0xc4
 80041b6:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6819      	ldr	r1, [r3, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	01db      	lsls	r3, r3, #7
 80041c4:	440b      	add	r3, r1
 80041c6:	33c8      	adds	r3, #200	; 0xc8
 80041c8:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80041ca:	2310      	movs	r3, #16
 80041cc:	61bb      	str	r3, [r7, #24]
      break;
 80041ce:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80041d0:	22fe      	movs	r2, #254	; 0xfe
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80041d8:	43db      	mvns	r3, r3
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	4013      	ands	r3, r2
 80041de:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	4313      	orrs	r3, r2
 800420e:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	695a      	ldr	r2, [r3, #20]
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	69fa      	ldr	r2, [r7, #28]
 800421c:	4313      	orrs	r3, r2
 800421e:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	699a      	ldr	r2, [r3, #24]
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	4313      	orrs	r3, r2
 800422e:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	2b08      	cmp	r3, #8
 8004236:	d111      	bne.n	800425c <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10c      	bne.n	800425c <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004248:	2b00      	cmp	r3, #0
 800424a:	d107      	bne.n	800425c <HRTIM_OutputConfig+0x150>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	4313      	orrs	r3, r2
 800425a:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	01db      	lsls	r3, r3, #7
 8004264:	4413      	add	r3, r2
 8004266:	33e4      	adds	r3, #228	; 0xe4
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	601a      	str	r2, [r3, #0]
}
 800426c:	bf00      	nop
 800426e:	3724      	adds	r7, #36	; 0x24
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b05      	cmp	r3, #5
 8004286:	d851      	bhi.n	800432c <HRTIM_ForceRegistersUpdate+0xb4>
 8004288:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <HRTIM_ForceRegistersUpdate+0x18>)
 800428a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428e:	bf00      	nop
 8004290:	080042bf 	.word	0x080042bf
 8004294:	080042d5 	.word	0x080042d5
 8004298:	080042eb 	.word	0x080042eb
 800429c:	08004301 	.word	0x08004301
 80042a0:	08004317 	.word	0x08004317
 80042a4:	080042a9 	.word	0x080042a9
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042bc:	e037      	b.n	800432e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0202 	orr.w	r2, r2, #2
 80042ce:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042d2:	e02c      	b.n	800432e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0204 	orr.w	r2, r2, #4
 80042e4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042e8:	e021      	b.n	800432e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0208 	orr.w	r2, r2, #8
 80042fa:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042fe:	e016      	b.n	800432e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0210 	orr.w	r2, r2, #16
 8004310:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004314:	e00b      	b.n	800432e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0220 	orr.w	r2, r2, #32
 8004326:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800432a:	e000      	b.n	800432e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 800432c:	bf00      	nop
  }
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop

0800433c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004342:	af00      	add	r7, sp, #0
 8004344:	1d3b      	adds	r3, r7, #4
 8004346:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004348:	1d3b      	adds	r3, r7, #4
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d102      	bne.n	8004356 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f000 bef4 	b.w	800513e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004356:	1d3b      	adds	r3, r7, #4
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 816a 	beq.w	800463a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004366:	4bb3      	ldr	r3, [pc, #716]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b04      	cmp	r3, #4
 8004370:	d00c      	beq.n	800438c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004372:	4bb0      	ldr	r3, [pc, #704]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b08      	cmp	r3, #8
 800437c:	d159      	bne.n	8004432 <HAL_RCC_OscConfig+0xf6>
 800437e:	4bad      	ldr	r3, [pc, #692]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800438a:	d152      	bne.n	8004432 <HAL_RCC_OscConfig+0xf6>
 800438c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004390:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004394:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004398:	fa93 f3a3 	rbit	r3, r3
 800439c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043a0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a4:	fab3 f383 	clz	r3, r3
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d102      	bne.n	80043be <HAL_RCC_OscConfig+0x82>
 80043b8:	4b9e      	ldr	r3, [pc, #632]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	e015      	b.n	80043ea <HAL_RCC_OscConfig+0xae>
 80043be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043c2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80043ca:	fa93 f3a3 	rbit	r3, r3
 80043ce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80043d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043d6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80043da:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80043e6:	4b93      	ldr	r3, [pc, #588]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043ee:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80043f2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80043f6:	fa92 f2a2 	rbit	r2, r2
 80043fa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80043fe:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004402:	fab2 f282 	clz	r2, r2
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	f042 0220 	orr.w	r2, r2, #32
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	f002 021f 	and.w	r2, r2, #31
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f202 	lsl.w	r2, r1, r2
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 810c 	beq.w	8004638 <HAL_RCC_OscConfig+0x2fc>
 8004420:	1d3b      	adds	r3, r7, #4
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f040 8106 	bne.w	8004638 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	f000 be86 	b.w	800513e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004432:	1d3b      	adds	r3, r7, #4
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443c:	d106      	bne.n	800444c <HAL_RCC_OscConfig+0x110>
 800443e:	4b7d      	ldr	r3, [pc, #500]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a7c      	ldr	r2, [pc, #496]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 8004444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	e030      	b.n	80044ae <HAL_RCC_OscConfig+0x172>
 800444c:	1d3b      	adds	r3, r7, #4
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10c      	bne.n	8004470 <HAL_RCC_OscConfig+0x134>
 8004456:	4b77      	ldr	r3, [pc, #476]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a76      	ldr	r2, [pc, #472]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 800445c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	4b74      	ldr	r3, [pc, #464]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a73      	ldr	r2, [pc, #460]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 8004468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	e01e      	b.n	80044ae <HAL_RCC_OscConfig+0x172>
 8004470:	1d3b      	adds	r3, r7, #4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800447a:	d10c      	bne.n	8004496 <HAL_RCC_OscConfig+0x15a>
 800447c:	4b6d      	ldr	r3, [pc, #436]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a6c      	ldr	r2, [pc, #432]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 8004482:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	4b6a      	ldr	r3, [pc, #424]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a69      	ldr	r2, [pc, #420]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 800448e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	e00b      	b.n	80044ae <HAL_RCC_OscConfig+0x172>
 8004496:	4b67      	ldr	r3, [pc, #412]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a66      	ldr	r2, [pc, #408]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 800449c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	4b64      	ldr	r3, [pc, #400]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a63      	ldr	r2, [pc, #396]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 80044a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ac:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044ae:	4b61      	ldr	r3, [pc, #388]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	f023 020f 	bic.w	r2, r3, #15
 80044b6:	1d3b      	adds	r3, r7, #4
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	495d      	ldr	r1, [pc, #372]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c2:	1d3b      	adds	r3, r7, #4
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d059      	beq.n	8004580 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044cc:	f7fd fb2c 	bl	8001b28 <HAL_GetTick>
 80044d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d4:	e00a      	b.n	80044ec <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d6:	f7fd fb27 	bl	8001b28 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	; 0x64
 80044e4:	d902      	bls.n	80044ec <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	f000 be29 	b.w	800513e <HAL_RCC_OscConfig+0xe02>
 80044ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044f0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80044f8:	fa93 f3a3 	rbit	r3, r3
 80044fc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004500:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004504:	fab3 f383 	clz	r3, r3
 8004508:	b2db      	uxtb	r3, r3
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	b2db      	uxtb	r3, r3
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	d102      	bne.n	800451e <HAL_RCC_OscConfig+0x1e2>
 8004518:	4b46      	ldr	r3, [pc, #280]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	e015      	b.n	800454a <HAL_RCC_OscConfig+0x20e>
 800451e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004522:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800452a:	fa93 f3a3 	rbit	r3, r3
 800452e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004532:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004536:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800453a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800453e:	fa93 f3a3 	rbit	r3, r3
 8004542:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004546:	4b3b      	ldr	r3, [pc, #236]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800454e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004552:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004556:	fa92 f2a2 	rbit	r2, r2
 800455a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800455e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004562:	fab2 f282 	clz	r2, r2
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	f042 0220 	orr.w	r2, r2, #32
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	f002 021f 	and.w	r2, r2, #31
 8004572:	2101      	movs	r1, #1
 8004574:	fa01 f202 	lsl.w	r2, r1, r2
 8004578:	4013      	ands	r3, r2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0ab      	beq.n	80044d6 <HAL_RCC_OscConfig+0x19a>
 800457e:	e05c      	b.n	800463a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7fd fad2 	bl	8001b28 <HAL_GetTick>
 8004584:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004588:	e00a      	b.n	80045a0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800458a:	f7fd facd 	bl	8001b28 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	; 0x64
 8004598:	d902      	bls.n	80045a0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	f000 bdcf 	b.w	800513e <HAL_RCC_OscConfig+0xe02>
 80045a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80045ac:	fa93 f3a3 	rbit	r3, r3
 80045b0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80045b4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b8:	fab3 f383 	clz	r3, r3
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d102      	bne.n	80045d2 <HAL_RCC_OscConfig+0x296>
 80045cc:	4b19      	ldr	r3, [pc, #100]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	e015      	b.n	80045fe <HAL_RCC_OscConfig+0x2c2>
 80045d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045da:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80045de:	fa93 f3a3 	rbit	r3, r3
 80045e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80045e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80045ee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80045f2:	fa93 f3a3 	rbit	r3, r3
 80045f6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80045fa:	4b0e      	ldr	r3, [pc, #56]	; (8004634 <HAL_RCC_OscConfig+0x2f8>)
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004602:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004606:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800460a:	fa92 f2a2 	rbit	r2, r2
 800460e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004612:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004616:	fab2 f282 	clz	r2, r2
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	f042 0220 	orr.w	r2, r2, #32
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	f002 021f 	and.w	r2, r2, #31
 8004626:	2101      	movs	r1, #1
 8004628:	fa01 f202 	lsl.w	r2, r1, r2
 800462c:	4013      	ands	r3, r2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1ab      	bne.n	800458a <HAL_RCC_OscConfig+0x24e>
 8004632:	e002      	b.n	800463a <HAL_RCC_OscConfig+0x2fe>
 8004634:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800463a:	1d3b      	adds	r3, r7, #4
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 816f 	beq.w	8004928 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800464a:	4bd0      	ldr	r3, [pc, #832]	; (800498c <HAL_RCC_OscConfig+0x650>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00b      	beq.n	800466e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004656:	4bcd      	ldr	r3, [pc, #820]	; (800498c <HAL_RCC_OscConfig+0x650>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f003 030c 	and.w	r3, r3, #12
 800465e:	2b08      	cmp	r3, #8
 8004660:	d16c      	bne.n	800473c <HAL_RCC_OscConfig+0x400>
 8004662:	4bca      	ldr	r3, [pc, #808]	; (800498c <HAL_RCC_OscConfig+0x650>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d166      	bne.n	800473c <HAL_RCC_OscConfig+0x400>
 800466e:	2302      	movs	r3, #2
 8004670:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004678:	fa93 f3a3 	rbit	r3, r3
 800467c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004680:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004684:	fab3 f383 	clz	r3, r3
 8004688:	b2db      	uxtb	r3, r3
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	b2db      	uxtb	r3, r3
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d102      	bne.n	800469e <HAL_RCC_OscConfig+0x362>
 8004698:	4bbc      	ldr	r3, [pc, #752]	; (800498c <HAL_RCC_OscConfig+0x650>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	e013      	b.n	80046c6 <HAL_RCC_OscConfig+0x38a>
 800469e:	2302      	movs	r3, #2
 80046a0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80046a8:	fa93 f3a3 	rbit	r3, r3
 80046ac:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80046b0:	2302      	movs	r3, #2
 80046b2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80046b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80046ba:	fa93 f3a3 	rbit	r3, r3
 80046be:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80046c2:	4bb2      	ldr	r3, [pc, #712]	; (800498c <HAL_RCC_OscConfig+0x650>)
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	2202      	movs	r2, #2
 80046c8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80046cc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80046d0:	fa92 f2a2 	rbit	r2, r2
 80046d4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80046d8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80046dc:	fab2 f282 	clz	r2, r2
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	f042 0220 	orr.w	r2, r2, #32
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	f002 021f 	and.w	r2, r2, #31
 80046ec:	2101      	movs	r1, #1
 80046ee:	fa01 f202 	lsl.w	r2, r1, r2
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_RCC_OscConfig+0x3cc>
 80046f8:	1d3b      	adds	r3, r7, #4
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d002      	beq.n	8004708 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	f000 bd1b 	b.w	800513e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004708:	4ba0      	ldr	r3, [pc, #640]	; (800498c <HAL_RCC_OscConfig+0x650>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004710:	1d3b      	adds	r3, r7, #4
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	21f8      	movs	r1, #248	; 0xf8
 8004718:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004720:	fa91 f1a1 	rbit	r1, r1
 8004724:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004728:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800472c:	fab1 f181 	clz	r1, r1
 8004730:	b2c9      	uxtb	r1, r1
 8004732:	408b      	lsls	r3, r1
 8004734:	4995      	ldr	r1, [pc, #596]	; (800498c <HAL_RCC_OscConfig+0x650>)
 8004736:	4313      	orrs	r3, r2
 8004738:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800473a:	e0f5      	b.n	8004928 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800473c:	1d3b      	adds	r3, r7, #4
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8085 	beq.w	8004852 <HAL_RCC_OscConfig+0x516>
 8004748:	2301      	movs	r3, #1
 800474a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004752:	fa93 f3a3 	rbit	r3, r3
 8004756:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800475a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800475e:	fab3 f383 	clz	r3, r3
 8004762:	b2db      	uxtb	r3, r3
 8004764:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004768:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	461a      	mov	r2, r3
 8004770:	2301      	movs	r3, #1
 8004772:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004774:	f7fd f9d8 	bl	8001b28 <HAL_GetTick>
 8004778:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477c:	e00a      	b.n	8004794 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800477e:	f7fd f9d3 	bl	8001b28 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d902      	bls.n	8004794 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	f000 bcd5 	b.w	800513e <HAL_RCC_OscConfig+0xe02>
 8004794:	2302      	movs	r3, #2
 8004796:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800479e:	fa93 f3a3 	rbit	r3, r3
 80047a2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80047a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047aa:	fab3 f383 	clz	r3, r3
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d102      	bne.n	80047c4 <HAL_RCC_OscConfig+0x488>
 80047be:	4b73      	ldr	r3, [pc, #460]	; (800498c <HAL_RCC_OscConfig+0x650>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	e013      	b.n	80047ec <HAL_RCC_OscConfig+0x4b0>
 80047c4:	2302      	movs	r3, #2
 80047c6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80047ce:	fa93 f3a3 	rbit	r3, r3
 80047d2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80047d6:	2302      	movs	r3, #2
 80047d8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80047dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80047e0:	fa93 f3a3 	rbit	r3, r3
 80047e4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80047e8:	4b68      	ldr	r3, [pc, #416]	; (800498c <HAL_RCC_OscConfig+0x650>)
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	2202      	movs	r2, #2
 80047ee:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80047f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80047f6:	fa92 f2a2 	rbit	r2, r2
 80047fa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80047fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004802:	fab2 f282 	clz	r2, r2
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	f042 0220 	orr.w	r2, r2, #32
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	f002 021f 	and.w	r2, r2, #31
 8004812:	2101      	movs	r1, #1
 8004814:	fa01 f202 	lsl.w	r2, r1, r2
 8004818:	4013      	ands	r3, r2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0af      	beq.n	800477e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481e:	4b5b      	ldr	r3, [pc, #364]	; (800498c <HAL_RCC_OscConfig+0x650>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004826:	1d3b      	adds	r3, r7, #4
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	21f8      	movs	r1, #248	; 0xf8
 800482e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004832:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004836:	fa91 f1a1 	rbit	r1, r1
 800483a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800483e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004842:	fab1 f181 	clz	r1, r1
 8004846:	b2c9      	uxtb	r1, r1
 8004848:	408b      	lsls	r3, r1
 800484a:	4950      	ldr	r1, [pc, #320]	; (800498c <HAL_RCC_OscConfig+0x650>)
 800484c:	4313      	orrs	r3, r2
 800484e:	600b      	str	r3, [r1, #0]
 8004850:	e06a      	b.n	8004928 <HAL_RCC_OscConfig+0x5ec>
 8004852:	2301      	movs	r3, #1
 8004854:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004858:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800485c:	fa93 f3a3 	rbit	r3, r3
 8004860:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004864:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004868:	fab3 f383 	clz	r3, r3
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004872:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	461a      	mov	r2, r3
 800487a:	2300      	movs	r3, #0
 800487c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487e:	f7fd f953 	bl	8001b28 <HAL_GetTick>
 8004882:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004886:	e00a      	b.n	800489e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004888:	f7fd f94e 	bl	8001b28 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d902      	bls.n	800489e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	f000 bc50 	b.w	800513e <HAL_RCC_OscConfig+0xe02>
 800489e:	2302      	movs	r3, #2
 80048a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80048a8:	fa93 f3a3 	rbit	r3, r3
 80048ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80048b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b4:	fab3 f383 	clz	r3, r3
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d102      	bne.n	80048ce <HAL_RCC_OscConfig+0x592>
 80048c8:	4b30      	ldr	r3, [pc, #192]	; (800498c <HAL_RCC_OscConfig+0x650>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	e013      	b.n	80048f6 <HAL_RCC_OscConfig+0x5ba>
 80048ce:	2302      	movs	r3, #2
 80048d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048d8:	fa93 f3a3 	rbit	r3, r3
 80048dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048e0:	2302      	movs	r3, #2
 80048e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80048e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80048ea:	fa93 f3a3 	rbit	r3, r3
 80048ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80048f2:	4b26      	ldr	r3, [pc, #152]	; (800498c <HAL_RCC_OscConfig+0x650>)
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	2202      	movs	r2, #2
 80048f8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80048fc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004900:	fa92 f2a2 	rbit	r2, r2
 8004904:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004908:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800490c:	fab2 f282 	clz	r2, r2
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	f042 0220 	orr.w	r2, r2, #32
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	f002 021f 	and.w	r2, r2, #31
 800491c:	2101      	movs	r1, #1
 800491e:	fa01 f202 	lsl.w	r2, r1, r2
 8004922:	4013      	ands	r3, r2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1af      	bne.n	8004888 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004928:	1d3b      	adds	r3, r7, #4
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80da 	beq.w	8004aec <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004938:	1d3b      	adds	r3, r7, #4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d069      	beq.n	8004a16 <HAL_RCC_OscConfig+0x6da>
 8004942:	2301      	movs	r3, #1
 8004944:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004948:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800494c:	fa93 f3a3 	rbit	r3, r3
 8004950:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004958:	fab3 f383 	clz	r3, r3
 800495c:	b2db      	uxtb	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <HAL_RCC_OscConfig+0x654>)
 8004962:	4413      	add	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	461a      	mov	r2, r3
 8004968:	2301      	movs	r3, #1
 800496a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800496c:	f7fd f8dc 	bl	8001b28 <HAL_GetTick>
 8004970:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004974:	e00e      	b.n	8004994 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004976:	f7fd f8d7 	bl	8001b28 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d906      	bls.n	8004994 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e3d9      	b.n	800513e <HAL_RCC_OscConfig+0xe02>
 800498a:	bf00      	nop
 800498c:	40021000 	.word	0x40021000
 8004990:	10908120 	.word	0x10908120
 8004994:	2302      	movs	r3, #2
 8004996:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800499e:	fa93 f3a3 	rbit	r3, r3
 80049a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80049aa:	2202      	movs	r2, #2
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	fa93 f2a3 	rbit	r2, r3
 80049b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80049c2:	2202      	movs	r2, #2
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	fa93 f2a3 	rbit	r2, r3
 80049d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80049d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d6:	4ba5      	ldr	r3, [pc, #660]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 80049d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80049de:	2102      	movs	r1, #2
 80049e0:	6019      	str	r1, [r3, #0]
 80049e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	fa93 f1a3 	rbit	r1, r3
 80049ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80049f0:	6019      	str	r1, [r3, #0]
  return result;
 80049f2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	fab3 f383 	clz	r3, r3
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	2101      	movs	r1, #1
 8004a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0b0      	beq.n	8004976 <HAL_RCC_OscConfig+0x63a>
 8004a14:	e06a      	b.n	8004aec <HAL_RCC_OscConfig+0x7b0>
 8004a16:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	fa93 f2a3 	rbit	r2, r3
 8004a28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004a2c:	601a      	str	r2, [r3, #0]
  return result;
 8004a2e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004a32:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a34:	fab3 f383 	clz	r3, r3
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	4b8c      	ldr	r3, [pc, #560]	; (8004c70 <HAL_RCC_OscConfig+0x934>)
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	461a      	mov	r2, r3
 8004a44:	2300      	movs	r3, #0
 8004a46:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a48:	f7fd f86e 	bl	8001b28 <HAL_GetTick>
 8004a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a50:	e009      	b.n	8004a66 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a52:	f7fd f869 	bl	8001b28 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e36b      	b.n	800513e <HAL_RCC_OscConfig+0xe02>
 8004a66:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	fa93 f2a3 	rbit	r2, r3
 8004a78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004a82:	2202      	movs	r2, #2
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	fa93 f2a3 	rbit	r2, r3
 8004a90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	fa93 f2a3 	rbit	r2, r3
 8004aa8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004aac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aae:	4b6f      	ldr	r3, [pc, #444]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ab2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004ab6:	2102      	movs	r1, #2
 8004ab8:	6019      	str	r1, [r3, #0]
 8004aba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	fa93 f1a3 	rbit	r1, r3
 8004ac4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004ac8:	6019      	str	r1, [r3, #0]
  return result;
 8004aca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	fab3 f383 	clz	r3, r3
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	f003 031f 	and.w	r3, r3, #31
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1b2      	bne.n	8004a52 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aec:	1d3b      	adds	r3, r7, #4
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 8158 	beq.w	8004dac <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004afc:	2300      	movs	r3, #0
 8004afe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b02:	4b5a      	ldr	r3, [pc, #360]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d112      	bne.n	8004b34 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b0e:	4b57      	ldr	r3, [pc, #348]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	4a56      	ldr	r2, [pc, #344]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b18:	61d3      	str	r3, [r2, #28]
 8004b1a:	4b54      	ldr	r3, [pc, #336]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004b22:	f107 0308 	add.w	r3, r7, #8
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	f107 0308 	add.w	r3, r7, #8
 8004b2c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b34:	4b4f      	ldr	r3, [pc, #316]	; (8004c74 <HAL_RCC_OscConfig+0x938>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d11a      	bne.n	8004b76 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b40:	4b4c      	ldr	r3, [pc, #304]	; (8004c74 <HAL_RCC_OscConfig+0x938>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a4b      	ldr	r2, [pc, #300]	; (8004c74 <HAL_RCC_OscConfig+0x938>)
 8004b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b4c:	f7fc ffec 	bl	8001b28 <HAL_GetTick>
 8004b50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b54:	e009      	b.n	8004b6a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b56:	f7fc ffe7 	bl	8001b28 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b64      	cmp	r3, #100	; 0x64
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e2e9      	b.n	800513e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6a:	4b42      	ldr	r3, [pc, #264]	; (8004c74 <HAL_RCC_OscConfig+0x938>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0ef      	beq.n	8004b56 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b76:	1d3b      	adds	r3, r7, #4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d106      	bne.n	8004b8e <HAL_RCC_OscConfig+0x852>
 8004b80:	4b3a      	ldr	r3, [pc, #232]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	4a39      	ldr	r2, [pc, #228]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	6213      	str	r3, [r2, #32]
 8004b8c:	e02f      	b.n	8004bee <HAL_RCC_OscConfig+0x8b2>
 8004b8e:	1d3b      	adds	r3, r7, #4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10c      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x876>
 8004b98:	4b34      	ldr	r3, [pc, #208]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	4a33      	ldr	r2, [pc, #204]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004b9e:	f023 0301 	bic.w	r3, r3, #1
 8004ba2:	6213      	str	r3, [r2, #32]
 8004ba4:	4b31      	ldr	r3, [pc, #196]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	4a30      	ldr	r2, [pc, #192]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004baa:	f023 0304 	bic.w	r3, r3, #4
 8004bae:	6213      	str	r3, [r2, #32]
 8004bb0:	e01d      	b.n	8004bee <HAL_RCC_OscConfig+0x8b2>
 8004bb2:	1d3b      	adds	r3, r7, #4
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	2b05      	cmp	r3, #5
 8004bba:	d10c      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x89a>
 8004bbc:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	4a2a      	ldr	r2, [pc, #168]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004bc2:	f043 0304 	orr.w	r3, r3, #4
 8004bc6:	6213      	str	r3, [r2, #32]
 8004bc8:	4b28      	ldr	r3, [pc, #160]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	4a27      	ldr	r2, [pc, #156]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	6213      	str	r3, [r2, #32]
 8004bd4:	e00b      	b.n	8004bee <HAL_RCC_OscConfig+0x8b2>
 8004bd6:	4b25      	ldr	r3, [pc, #148]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	4a24      	ldr	r2, [pc, #144]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	6213      	str	r3, [r2, #32]
 8004be2:	4b22      	ldr	r3, [pc, #136]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	4a21      	ldr	r2, [pc, #132]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004be8:	f023 0304 	bic.w	r3, r3, #4
 8004bec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bee:	1d3b      	adds	r3, r7, #4
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d06b      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf8:	f7fc ff96 	bl	8001b28 <HAL_GetTick>
 8004bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c00:	e00b      	b.n	8004c1a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c02:	f7fc ff91 	bl	8001b28 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e291      	b.n	800513e <HAL_RCC_OscConfig+0xe02>
 8004c1a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004c1e:	2202      	movs	r2, #2
 8004c20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	fa93 f2a3 	rbit	r2, r3
 8004c2c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004c36:	2202      	movs	r2, #2
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	fa93 f2a3 	rbit	r2, r3
 8004c44:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004c48:	601a      	str	r2, [r3, #0]
  return result;
 8004c4a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004c4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c50:	fab3 f383 	clz	r3, r3
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	f043 0302 	orr.w	r3, r3, #2
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d109      	bne.n	8004c78 <HAL_RCC_OscConfig+0x93c>
 8004c64:	4b01      	ldr	r3, [pc, #4]	; (8004c6c <HAL_RCC_OscConfig+0x930>)
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	e014      	b.n	8004c94 <HAL_RCC_OscConfig+0x958>
 8004c6a:	bf00      	nop
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	10908120 	.word	0x10908120
 8004c74:	40007000 	.word	0x40007000
 8004c78:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c80:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	fa93 f2a3 	rbit	r2, r3
 8004c8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	4bbb      	ldr	r3, [pc, #748]	; (8004f80 <HAL_RCC_OscConfig+0xc44>)
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004c98:	2102      	movs	r1, #2
 8004c9a:	6011      	str	r1, [r2, #0]
 8004c9c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004ca0:	6812      	ldr	r2, [r2, #0]
 8004ca2:	fa92 f1a2 	rbit	r1, r2
 8004ca6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004caa:	6011      	str	r1, [r2, #0]
  return result;
 8004cac:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004cb0:	6812      	ldr	r2, [r2, #0]
 8004cb2:	fab2 f282 	clz	r2, r2
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	f002 021f 	and.w	r2, r2, #31
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc8:	4013      	ands	r3, r2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d099      	beq.n	8004c02 <HAL_RCC_OscConfig+0x8c6>
 8004cce:	e063      	b.n	8004d98 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd0:	f7fc ff2a 	bl	8001b28 <HAL_GetTick>
 8004cd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd8:	e00b      	b.n	8004cf2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cda:	f7fc ff25 	bl	8001b28 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e225      	b.n	800513e <HAL_RCC_OscConfig+0xe02>
 8004cf2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	fa93 f2a3 	rbit	r2, r3
 8004d04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004d0e:	2202      	movs	r2, #2
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	fa93 f2a3 	rbit	r2, r3
 8004d1c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004d20:	601a      	str	r2, [r3, #0]
  return result;
 8004d22:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004d26:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d28:	fab3 f383 	clz	r3, r3
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	f043 0302 	orr.w	r3, r3, #2
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d102      	bne.n	8004d42 <HAL_RCC_OscConfig+0xa06>
 8004d3c:	4b90      	ldr	r3, [pc, #576]	; (8004f80 <HAL_RCC_OscConfig+0xc44>)
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	e00d      	b.n	8004d5e <HAL_RCC_OscConfig+0xa22>
 8004d42:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004d46:	2202      	movs	r2, #2
 8004d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	fa93 f2a3 	rbit	r2, r3
 8004d54:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	4b89      	ldr	r3, [pc, #548]	; (8004f80 <HAL_RCC_OscConfig+0xc44>)
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d62:	2102      	movs	r1, #2
 8004d64:	6011      	str	r1, [r2, #0]
 8004d66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	fa92 f1a2 	rbit	r1, r2
 8004d70:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004d74:	6011      	str	r1, [r2, #0]
  return result;
 8004d76:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004d7a:	6812      	ldr	r2, [r2, #0]
 8004d7c:	fab2 f282 	clz	r2, r2
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	f002 021f 	and.w	r2, r2, #31
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1a0      	bne.n	8004cda <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d98:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d105      	bne.n	8004dac <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da0:	4b77      	ldr	r3, [pc, #476]	; (8004f80 <HAL_RCC_OscConfig+0xc44>)
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	4a76      	ldr	r2, [pc, #472]	; (8004f80 <HAL_RCC_OscConfig+0xc44>)
 8004da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004daa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dac:	1d3b      	adds	r3, r7, #4
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 81c2 	beq.w	800513c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004db8:	4b71      	ldr	r3, [pc, #452]	; (8004f80 <HAL_RCC_OscConfig+0xc44>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 030c 	and.w	r3, r3, #12
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	f000 819c 	beq.w	80050fe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dc6:	1d3b      	adds	r3, r7, #4
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	f040 8114 	bne.w	8004ffa <HAL_RCC_OscConfig+0xcbe>
 8004dd2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004dd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004dda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ddc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	fa93 f2a3 	rbit	r2, r3
 8004de6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004dea:	601a      	str	r2, [r3, #0]
  return result;
 8004dec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004df0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df2:	fab3 f383 	clz	r3, r3
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004dfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	461a      	mov	r2, r3
 8004e04:	2300      	movs	r3, #0
 8004e06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e08:	f7fc fe8e 	bl	8001b28 <HAL_GetTick>
 8004e0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e10:	e009      	b.n	8004e26 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e12:	f7fc fe89 	bl	8001b28 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e18b      	b.n	800513e <HAL_RCC_OscConfig+0xe02>
 8004e26:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004e2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e30:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	fa93 f2a3 	rbit	r2, r3
 8004e3a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e3e:	601a      	str	r2, [r3, #0]
  return result;
 8004e40:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e46:	fab3 f383 	clz	r3, r3
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	f043 0301 	orr.w	r3, r3, #1
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d102      	bne.n	8004e60 <HAL_RCC_OscConfig+0xb24>
 8004e5a:	4b49      	ldr	r3, [pc, #292]	; (8004f80 <HAL_RCC_OscConfig+0xc44>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	e01b      	b.n	8004e98 <HAL_RCC_OscConfig+0xb5c>
 8004e60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004e64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	fa93 f2a3 	rbit	r2, r3
 8004e74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004e7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	fa93 f2a3 	rbit	r2, r3
 8004e8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	4b3a      	ldr	r3, [pc, #232]	; (8004f80 <HAL_RCC_OscConfig+0xc44>)
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004e9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ea0:	6011      	str	r1, [r2, #0]
 8004ea2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	fa92 f1a2 	rbit	r1, r2
 8004eac:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004eb0:	6011      	str	r1, [r2, #0]
  return result;
 8004eb2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004eb6:	6812      	ldr	r2, [r2, #0]
 8004eb8:	fab2 f282 	clz	r2, r2
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	f042 0220 	orr.w	r2, r2, #32
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	f002 021f 	and.w	r2, r2, #31
 8004ec8:	2101      	movs	r1, #1
 8004eca:	fa01 f202 	lsl.w	r2, r1, r2
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d19e      	bne.n	8004e12 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ed4:	4b2a      	ldr	r3, [pc, #168]	; (8004f80 <HAL_RCC_OscConfig+0xc44>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004edc:	1d3b      	adds	r3, r7, #4
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004ee2:	1d3b      	adds	r3, r7, #4
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	4925      	ldr	r1, [pc, #148]	; (8004f80 <HAL_RCC_OscConfig+0xc44>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	604b      	str	r3, [r1, #4]
 8004ef0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	fa93 f2a3 	rbit	r2, r3
 8004f04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004f08:	601a      	str	r2, [r3, #0]
  return result;
 8004f0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004f0e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f10:	fab3 f383 	clz	r3, r3
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	461a      	mov	r2, r3
 8004f22:	2301      	movs	r3, #1
 8004f24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f26:	f7fc fdff 	bl	8001b28 <HAL_GetTick>
 8004f2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f2e:	e009      	b.n	8004f44 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f30:	f7fc fdfa 	bl	8001b28 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e0fc      	b.n	800513e <HAL_RCC_OscConfig+0xe02>
 8004f44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004f48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	fa93 f2a3 	rbit	r2, r3
 8004f58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004f5c:	601a      	str	r2, [r3, #0]
  return result;
 8004f5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004f62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f64:	fab3 f383 	clz	r3, r3
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d105      	bne.n	8004f84 <HAL_RCC_OscConfig+0xc48>
 8004f78:	4b01      	ldr	r3, [pc, #4]	; (8004f80 <HAL_RCC_OscConfig+0xc44>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	e01e      	b.n	8004fbc <HAL_RCC_OscConfig+0xc80>
 8004f7e:	bf00      	nop
 8004f80:	40021000 	.word	0x40021000
 8004f84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	fa93 f2a3 	rbit	r2, r3
 8004f98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004fa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	fa93 f2a3 	rbit	r2, r3
 8004fb2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	4b63      	ldr	r3, [pc, #396]	; (8005148 <HAL_RCC_OscConfig+0xe0c>)
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004fc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004fc4:	6011      	str	r1, [r2, #0]
 8004fc6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	fa92 f1a2 	rbit	r1, r2
 8004fd0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004fd4:	6011      	str	r1, [r2, #0]
  return result;
 8004fd6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	fab2 f282 	clz	r2, r2
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	f042 0220 	orr.w	r2, r2, #32
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	f002 021f 	and.w	r2, r2, #31
 8004fec:	2101      	movs	r1, #1
 8004fee:	fa01 f202 	lsl.w	r2, r1, r2
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d09b      	beq.n	8004f30 <HAL_RCC_OscConfig+0xbf4>
 8004ff8:	e0a0      	b.n	800513c <HAL_RCC_OscConfig+0xe00>
 8004ffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ffe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005004:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	fa93 f2a3 	rbit	r2, r3
 800500e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005012:	601a      	str	r2, [r3, #0]
  return result;
 8005014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005018:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800501a:	fab3 f383 	clz	r3, r3
 800501e:	b2db      	uxtb	r3, r3
 8005020:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005024:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	461a      	mov	r2, r3
 800502c:	2300      	movs	r3, #0
 800502e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005030:	f7fc fd7a 	bl	8001b28 <HAL_GetTick>
 8005034:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005038:	e009      	b.n	800504e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800503a:	f7fc fd75 	bl	8001b28 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e077      	b.n	800513e <HAL_RCC_OscConfig+0xe02>
 800504e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005058:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	fa93 f2a3 	rbit	r2, r3
 8005062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005066:	601a      	str	r2, [r3, #0]
  return result;
 8005068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800506c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800506e:	fab3 f383 	clz	r3, r3
 8005072:	b2db      	uxtb	r3, r3
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f043 0301 	orr.w	r3, r3, #1
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b01      	cmp	r3, #1
 8005080:	d102      	bne.n	8005088 <HAL_RCC_OscConfig+0xd4c>
 8005082:	4b31      	ldr	r3, [pc, #196]	; (8005148 <HAL_RCC_OscConfig+0xe0c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	e01b      	b.n	80050c0 <HAL_RCC_OscConfig+0xd84>
 8005088:	f107 0320 	add.w	r3, r7, #32
 800508c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005090:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005092:	f107 0320 	add.w	r3, r7, #32
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	fa93 f2a3 	rbit	r2, r3
 800509c:	f107 031c 	add.w	r3, r7, #28
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	f107 0318 	add.w	r3, r7, #24
 80050a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	f107 0318 	add.w	r3, r7, #24
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	fa93 f2a3 	rbit	r2, r3
 80050b6:	f107 0314 	add.w	r3, r7, #20
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	4b22      	ldr	r3, [pc, #136]	; (8005148 <HAL_RCC_OscConfig+0xe0c>)
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	f107 0210 	add.w	r2, r7, #16
 80050c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050c8:	6011      	str	r1, [r2, #0]
 80050ca:	f107 0210 	add.w	r2, r7, #16
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	fa92 f1a2 	rbit	r1, r2
 80050d4:	f107 020c 	add.w	r2, r7, #12
 80050d8:	6011      	str	r1, [r2, #0]
  return result;
 80050da:	f107 020c 	add.w	r2, r7, #12
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	fab2 f282 	clz	r2, r2
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	f042 0220 	orr.w	r2, r2, #32
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	f002 021f 	and.w	r2, r2, #31
 80050f0:	2101      	movs	r1, #1
 80050f2:	fa01 f202 	lsl.w	r2, r1, r2
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d19e      	bne.n	800503a <HAL_RCC_OscConfig+0xcfe>
 80050fc:	e01e      	b.n	800513c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050fe:	1d3b      	adds	r3, r7, #4
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e018      	b.n	800513e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800510c:	4b0e      	ldr	r3, [pc, #56]	; (8005148 <HAL_RCC_OscConfig+0xe0c>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005114:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005118:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800511c:	1d3b      	adds	r3, r7, #4
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	429a      	cmp	r2, r3
 8005124:	d108      	bne.n	8005138 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005126:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800512a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800512e:	1d3b      	adds	r3, r7, #4
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005134:	429a      	cmp	r2, r3
 8005136:	d001      	beq.n	800513c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40021000 	.word	0x40021000

0800514c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b09e      	sub	sp, #120	; 0x78
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e162      	b.n	800542a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005164:	4b90      	ldr	r3, [pc, #576]	; (80053a8 <HAL_RCC_ClockConfig+0x25c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d910      	bls.n	8005194 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005172:	4b8d      	ldr	r3, [pc, #564]	; (80053a8 <HAL_RCC_ClockConfig+0x25c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 0207 	bic.w	r2, r3, #7
 800517a:	498b      	ldr	r1, [pc, #556]	; (80053a8 <HAL_RCC_ClockConfig+0x25c>)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	4313      	orrs	r3, r2
 8005180:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005182:	4b89      	ldr	r3, [pc, #548]	; (80053a8 <HAL_RCC_ClockConfig+0x25c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d001      	beq.n	8005194 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e14a      	b.n	800542a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a0:	4b82      	ldr	r3, [pc, #520]	; (80053ac <HAL_RCC_ClockConfig+0x260>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	497f      	ldr	r1, [pc, #508]	; (80053ac <HAL_RCC_ClockConfig+0x260>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 80dc 	beq.w	8005378 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d13c      	bne.n	8005242 <HAL_RCC_ClockConfig+0xf6>
 80051c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051d0:	fa93 f3a3 	rbit	r3, r3
 80051d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80051d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051d8:	fab3 f383 	clz	r3, r3
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	f043 0301 	orr.w	r3, r3, #1
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d102      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xa6>
 80051ec:	4b6f      	ldr	r3, [pc, #444]	; (80053ac <HAL_RCC_ClockConfig+0x260>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	e00f      	b.n	8005212 <HAL_RCC_ClockConfig+0xc6>
 80051f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051fa:	fa93 f3a3 	rbit	r3, r3
 80051fe:	667b      	str	r3, [r7, #100]	; 0x64
 8005200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005204:	663b      	str	r3, [r7, #96]	; 0x60
 8005206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005208:	fa93 f3a3 	rbit	r3, r3
 800520c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800520e:	4b67      	ldr	r3, [pc, #412]	; (80053ac <HAL_RCC_ClockConfig+0x260>)
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005216:	65ba      	str	r2, [r7, #88]	; 0x58
 8005218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800521a:	fa92 f2a2 	rbit	r2, r2
 800521e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005222:	fab2 f282 	clz	r2, r2
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	f042 0220 	orr.w	r2, r2, #32
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	f002 021f 	and.w	r2, r2, #31
 8005232:	2101      	movs	r1, #1
 8005234:	fa01 f202 	lsl.w	r2, r1, r2
 8005238:	4013      	ands	r3, r2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d17b      	bne.n	8005336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e0f3      	b.n	800542a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d13c      	bne.n	80052c4 <HAL_RCC_ClockConfig+0x178>
 800524a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800524e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005252:	fa93 f3a3 	rbit	r3, r3
 8005256:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525a:	fab3 f383 	clz	r3, r3
 800525e:	b2db      	uxtb	r3, r3
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	d102      	bne.n	8005274 <HAL_RCC_ClockConfig+0x128>
 800526e:	4b4f      	ldr	r3, [pc, #316]	; (80053ac <HAL_RCC_ClockConfig+0x260>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	e00f      	b.n	8005294 <HAL_RCC_ClockConfig+0x148>
 8005274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005278:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800527c:	fa93 f3a3 	rbit	r3, r3
 8005280:	647b      	str	r3, [r7, #68]	; 0x44
 8005282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005286:	643b      	str	r3, [r7, #64]	; 0x40
 8005288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800528a:	fa93 f3a3 	rbit	r3, r3
 800528e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005290:	4b46      	ldr	r3, [pc, #280]	; (80053ac <HAL_RCC_ClockConfig+0x260>)
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005298:	63ba      	str	r2, [r7, #56]	; 0x38
 800529a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800529c:	fa92 f2a2 	rbit	r2, r2
 80052a0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80052a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052a4:	fab2 f282 	clz	r2, r2
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	f042 0220 	orr.w	r2, r2, #32
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	f002 021f 	and.w	r2, r2, #31
 80052b4:	2101      	movs	r1, #1
 80052b6:	fa01 f202 	lsl.w	r2, r1, r2
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d13a      	bne.n	8005336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0b2      	b.n	800542a <HAL_RCC_ClockConfig+0x2de>
 80052c4:	2302      	movs	r3, #2
 80052c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	fa93 f3a3 	rbit	r3, r3
 80052ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80052d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d2:	fab3 f383 	clz	r3, r3
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	095b      	lsrs	r3, r3, #5
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	f043 0301 	orr.w	r3, r3, #1
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d102      	bne.n	80052ec <HAL_RCC_ClockConfig+0x1a0>
 80052e6:	4b31      	ldr	r3, [pc, #196]	; (80053ac <HAL_RCC_ClockConfig+0x260>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	e00d      	b.n	8005308 <HAL_RCC_ClockConfig+0x1bc>
 80052ec:	2302      	movs	r3, #2
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	fa93 f3a3 	rbit	r3, r3
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
 80052f8:	2302      	movs	r3, #2
 80052fa:	623b      	str	r3, [r7, #32]
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	fa93 f3a3 	rbit	r3, r3
 8005302:	61fb      	str	r3, [r7, #28]
 8005304:	4b29      	ldr	r3, [pc, #164]	; (80053ac <HAL_RCC_ClockConfig+0x260>)
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	2202      	movs	r2, #2
 800530a:	61ba      	str	r2, [r7, #24]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	fa92 f2a2 	rbit	r2, r2
 8005312:	617a      	str	r2, [r7, #20]
  return result;
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	fab2 f282 	clz	r2, r2
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	f042 0220 	orr.w	r2, r2, #32
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	f002 021f 	and.w	r2, r2, #31
 8005326:	2101      	movs	r1, #1
 8005328:	fa01 f202 	lsl.w	r2, r1, r2
 800532c:	4013      	ands	r3, r2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e079      	b.n	800542a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005336:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <HAL_RCC_ClockConfig+0x260>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f023 0203 	bic.w	r2, r3, #3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	491a      	ldr	r1, [pc, #104]	; (80053ac <HAL_RCC_ClockConfig+0x260>)
 8005344:	4313      	orrs	r3, r2
 8005346:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005348:	f7fc fbee 	bl	8001b28 <HAL_GetTick>
 800534c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534e:	e00a      	b.n	8005366 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005350:	f7fc fbea 	bl	8001b28 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	; 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e061      	b.n	800542a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005366:	4b11      	ldr	r3, [pc, #68]	; (80053ac <HAL_RCC_ClockConfig+0x260>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f003 020c 	and.w	r2, r3, #12
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	429a      	cmp	r2, r3
 8005376:	d1eb      	bne.n	8005350 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005378:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <HAL_RCC_ClockConfig+0x25c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d214      	bcs.n	80053b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005386:	4b08      	ldr	r3, [pc, #32]	; (80053a8 <HAL_RCC_ClockConfig+0x25c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f023 0207 	bic.w	r2, r3, #7
 800538e:	4906      	ldr	r1, [pc, #24]	; (80053a8 <HAL_RCC_ClockConfig+0x25c>)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	4313      	orrs	r3, r2
 8005394:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005396:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <HAL_RCC_ClockConfig+0x25c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d005      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e040      	b.n	800542a <HAL_RCC_ClockConfig+0x2de>
 80053a8:	40022000 	.word	0x40022000
 80053ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053bc:	4b1d      	ldr	r3, [pc, #116]	; (8005434 <HAL_RCC_ClockConfig+0x2e8>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	491a      	ldr	r1, [pc, #104]	; (8005434 <HAL_RCC_ClockConfig+0x2e8>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053da:	4b16      	ldr	r3, [pc, #88]	; (8005434 <HAL_RCC_ClockConfig+0x2e8>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	4912      	ldr	r1, [pc, #72]	; (8005434 <HAL_RCC_ClockConfig+0x2e8>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80053ee:	f000 f829 	bl	8005444 <HAL_RCC_GetSysClockFreq>
 80053f2:	4601      	mov	r1, r0
 80053f4:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <HAL_RCC_ClockConfig+0x2e8>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053fc:	22f0      	movs	r2, #240	; 0xf0
 80053fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	fa92 f2a2 	rbit	r2, r2
 8005406:	60fa      	str	r2, [r7, #12]
  return result;
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	fab2 f282 	clz	r2, r2
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	40d3      	lsrs	r3, r2
 8005412:	4a09      	ldr	r2, [pc, #36]	; (8005438 <HAL_RCC_ClockConfig+0x2ec>)
 8005414:	5cd3      	ldrb	r3, [r2, r3]
 8005416:	fa21 f303 	lsr.w	r3, r1, r3
 800541a:	4a08      	ldr	r2, [pc, #32]	; (800543c <HAL_RCC_ClockConfig+0x2f0>)
 800541c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800541e:	4b08      	ldr	r3, [pc, #32]	; (8005440 <HAL_RCC_ClockConfig+0x2f4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f7fc fb3c 	bl	8001aa0 <HAL_InitTick>
  
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3778      	adds	r7, #120	; 0x78
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40021000 	.word	0x40021000
 8005438:	0800615c 	.word	0x0800615c
 800543c:	20000030 	.word	0x20000030
 8005440:	20000034 	.word	0x20000034

08005444 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005444:	b480      	push	{r7}
 8005446:	b08b      	sub	sp, #44	; 0x2c
 8005448:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	61fb      	str	r3, [r7, #28]
 800544e:	2300      	movs	r3, #0
 8005450:	61bb      	str	r3, [r7, #24]
 8005452:	2300      	movs	r3, #0
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800545e:	4b29      	ldr	r3, [pc, #164]	; (8005504 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f003 030c 	and.w	r3, r3, #12
 800546a:	2b04      	cmp	r3, #4
 800546c:	d002      	beq.n	8005474 <HAL_RCC_GetSysClockFreq+0x30>
 800546e:	2b08      	cmp	r3, #8
 8005470:	d003      	beq.n	800547a <HAL_RCC_GetSysClockFreq+0x36>
 8005472:	e03c      	b.n	80054ee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005474:	4b24      	ldr	r3, [pc, #144]	; (8005508 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005476:	623b      	str	r3, [r7, #32]
      break;
 8005478:	e03c      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005480:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005484:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	fa92 f2a2 	rbit	r2, r2
 800548c:	607a      	str	r2, [r7, #4]
  return result;
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	fab2 f282 	clz	r2, r2
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	40d3      	lsrs	r3, r2
 8005498:	4a1c      	ldr	r2, [pc, #112]	; (800550c <HAL_RCC_GetSysClockFreq+0xc8>)
 800549a:	5cd3      	ldrb	r3, [r2, r3]
 800549c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800549e:	4b19      	ldr	r3, [pc, #100]	; (8005504 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	220f      	movs	r2, #15
 80054a8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	fa92 f2a2 	rbit	r2, r2
 80054b0:	60fa      	str	r2, [r7, #12]
  return result;
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	fab2 f282 	clz	r2, r2
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	40d3      	lsrs	r3, r2
 80054bc:	4a14      	ldr	r2, [pc, #80]	; (8005510 <HAL_RCC_GetSysClockFreq+0xcc>)
 80054be:	5cd3      	ldrb	r3, [r2, r3]
 80054c0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d008      	beq.n	80054de <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054cc:	4a0e      	ldr	r2, [pc, #56]	; (8005508 <HAL_RCC_GetSysClockFreq+0xc4>)
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
 80054dc:	e004      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	4a0c      	ldr	r2, [pc, #48]	; (8005514 <HAL_RCC_GetSysClockFreq+0xd0>)
 80054e2:	fb02 f303 	mul.w	r3, r2, r3
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	623b      	str	r3, [r7, #32]
      break;
 80054ec:	e002      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054ee:	4b06      	ldr	r3, [pc, #24]	; (8005508 <HAL_RCC_GetSysClockFreq+0xc4>)
 80054f0:	623b      	str	r3, [r7, #32]
      break;
 80054f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054f4:	6a3b      	ldr	r3, [r7, #32]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	372c      	adds	r7, #44	; 0x2c
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40021000 	.word	0x40021000
 8005508:	007a1200 	.word	0x007a1200
 800550c:	08006174 	.word	0x08006174
 8005510:	08006184 	.word	0x08006184
 8005514:	003d0900 	.word	0x003d0900

08005518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800551c:	4b03      	ldr	r3, [pc, #12]	; (800552c <HAL_RCC_GetHCLKFreq+0x14>)
 800551e:	681b      	ldr	r3, [r3, #0]
}
 8005520:	4618      	mov	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	20000030 	.word	0x20000030

08005530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005536:	f7ff ffef 	bl	8005518 <HAL_RCC_GetHCLKFreq>
 800553a:	4601      	mov	r1, r0
 800553c:	4b0b      	ldr	r3, [pc, #44]	; (800556c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005544:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005548:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	fa92 f2a2 	rbit	r2, r2
 8005550:	603a      	str	r2, [r7, #0]
  return result;
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	fab2 f282 	clz	r2, r2
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	40d3      	lsrs	r3, r2
 800555c:	4a04      	ldr	r2, [pc, #16]	; (8005570 <HAL_RCC_GetPCLK1Freq+0x40>)
 800555e:	5cd3      	ldrb	r3, [r2, r3]
 8005560:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005564:	4618      	mov	r0, r3
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40021000 	.word	0x40021000
 8005570:	0800616c 	.word	0x0800616c

08005574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800557a:	f7ff ffcd 	bl	8005518 <HAL_RCC_GetHCLKFreq>
 800557e:	4601      	mov	r1, r0
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005588:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800558c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	fa92 f2a2 	rbit	r2, r2
 8005594:	603a      	str	r2, [r7, #0]
  return result;
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	fab2 f282 	clz	r2, r2
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	40d3      	lsrs	r3, r2
 80055a0:	4a04      	ldr	r2, [pc, #16]	; (80055b4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80055a2:	5cd3      	ldrb	r3, [r2, r3]
 80055a4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40021000 	.word	0x40021000
 80055b4:	0800616c 	.word	0x0800616c

080055b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b092      	sub	sp, #72	; 0x48
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 80d0 	beq.w	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80055d6:	2300      	movs	r3, #0
 80055d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055dc:	4b8e      	ldr	r3, [pc, #568]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10e      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055e8:	4b8b      	ldr	r3, [pc, #556]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	4a8a      	ldr	r2, [pc, #552]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f2:	61d3      	str	r3, [r2, #28]
 80055f4:	4b88      	ldr	r3, [pc, #544]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005600:	2301      	movs	r3, #1
 8005602:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005606:	4b85      	ldr	r3, [pc, #532]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560e:	2b00      	cmp	r3, #0
 8005610:	d118      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005612:	4b82      	ldr	r3, [pc, #520]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a81      	ldr	r2, [pc, #516]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800561c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800561e:	f7fc fa83 	bl	8001b28 <HAL_GetTick>
 8005622:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005624:	e008      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005626:	f7fc fa7f 	bl	8001b28 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b64      	cmp	r3, #100	; 0x64
 8005632:	d901      	bls.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e0ea      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005638:	4b78      	ldr	r3, [pc, #480]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0f0      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005644:	4b74      	ldr	r3, [pc, #464]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800564c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800564e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d07d      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800565e:	429a      	cmp	r2, r3
 8005660:	d076      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005662:	4b6d      	ldr	r3, [pc, #436]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800566a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800566c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005670:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005674:	fa93 f3a3 	rbit	r3, r3
 8005678:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800567c:	fab3 f383 	clz	r3, r3
 8005680:	b2db      	uxtb	r3, r3
 8005682:	461a      	mov	r2, r3
 8005684:	4b66      	ldr	r3, [pc, #408]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	461a      	mov	r2, r3
 800568c:	2301      	movs	r3, #1
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005694:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005698:	fa93 f3a3 	rbit	r3, r3
 800569c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800569e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056a0:	fab3 f383 	clz	r3, r3
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	461a      	mov	r2, r3
 80056a8:	4b5d      	ldr	r3, [pc, #372]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	461a      	mov	r2, r3
 80056b0:	2300      	movs	r3, #0
 80056b2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056b4:	4a58      	ldr	r2, [pc, #352]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d045      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c4:	f7fc fa30 	bl	8001b28 <HAL_GetTick>
 80056c8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ca:	e00a      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056cc:	f7fc fa2c 	bl	8001b28 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e095      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x256>
 80056e2:	2302      	movs	r3, #2
 80056e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	fa93 f3a3 	rbit	r3, r3
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
 80056ee:	2302      	movs	r3, #2
 80056f0:	623b      	str	r3, [r7, #32]
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	fa93 f3a3 	rbit	r3, r3
 80056f8:	61fb      	str	r3, [r7, #28]
  return result;
 80056fa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056fc:	fab3 f383 	clz	r3, r3
 8005700:	b2db      	uxtb	r3, r3
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	b2db      	uxtb	r3, r3
 8005706:	f043 0302 	orr.w	r3, r3, #2
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d102      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005710:	4b41      	ldr	r3, [pc, #260]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	e007      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005716:	2302      	movs	r3, #2
 8005718:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	fa93 f3a3 	rbit	r3, r3
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	4b3d      	ldr	r3, [pc, #244]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	2202      	movs	r2, #2
 8005728:	613a      	str	r2, [r7, #16]
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	fa92 f2a2 	rbit	r2, r2
 8005730:	60fa      	str	r2, [r7, #12]
  return result;
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	fab2 f282 	clz	r2, r2
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	f002 021f 	and.w	r2, r2, #31
 8005744:	2101      	movs	r1, #1
 8005746:	fa01 f202 	lsl.w	r2, r1, r2
 800574a:	4013      	ands	r3, r2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0bd      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005750:	4b31      	ldr	r3, [pc, #196]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	492e      	ldr	r1, [pc, #184]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800575e:	4313      	orrs	r3, r2
 8005760:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005762:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005766:	2b01      	cmp	r3, #1
 8005768:	d105      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800576a:	4b2b      	ldr	r3, [pc, #172]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	4a2a      	ldr	r2, [pc, #168]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005774:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d008      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005782:	4b25      	ldr	r3, [pc, #148]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	f023 0203 	bic.w	r2, r3, #3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	4922      	ldr	r1, [pc, #136]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005790:	4313      	orrs	r3, r2
 8005792:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057a0:	4b1d      	ldr	r3, [pc, #116]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	f023 0210 	bic.w	r2, r3, #16
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	491a      	ldr	r1, [pc, #104]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d008      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057be:	4b16      	ldr	r3, [pc, #88]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	4913      	ldr	r1, [pc, #76]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80057dc:	4b0e      	ldr	r3, [pc, #56]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	490b      	ldr	r1, [pc, #44]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d008      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80057fa:	4b07      	ldr	r3, [pc, #28]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	4904      	ldr	r1, [pc, #16]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005808:	4313      	orrs	r3, r2
 800580a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3748      	adds	r7, #72	; 0x48
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40021000 	.word	0x40021000
 800581c:	40007000 	.word	0x40007000
 8005820:	10908100 	.word	0x10908100

08005824 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e07c      	b.n	8005930 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d106      	bne.n	8005856 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7fb ffe9 	bl	8001828 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2202      	movs	r2, #2
 800585a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800586c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005876:	d902      	bls.n	800587e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005878:	2300      	movs	r3, #0
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	e002      	b.n	8005884 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800587e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005882:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800588c:	d007      	beq.n	800589e <HAL_SPI_Init+0x7a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005896:	d002      	beq.n	800589e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10b      	bne.n	80058be <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058ae:	d903      	bls.n	80058b8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	631a      	str	r2, [r3, #48]	; 0x30
 80058b6:	e002      	b.n	80058be <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	ea42 0103 	orr.w	r1, r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	0c1b      	lsrs	r3, r3, #16
 80058fe:	f003 0204 	and.w	r2, r3, #4
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	ea42 0103 	orr.w	r1, r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	430a      	orrs	r2, r1
 800591e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e040      	b.n	80059cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fb ffc6 	bl	80018ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2224      	movs	r2, #36	; 0x24
 8005964:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0201 	bic.w	r2, r2, #1
 8005974:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f82c 	bl	80059d4 <UART_SetConfig>
 800597c:	4603      	mov	r3, r0
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e022      	b.n	80059cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f9a2 	bl	8005cd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fa29 	bl	8005e1c <UART_CheckIdleState>
 80059ca:	4603      	mov	r3, r0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80059dc:	2300      	movs	r3, #0
 80059de:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80059e0:	2300      	movs	r3, #0
 80059e2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	4ba2      	ldr	r3, [pc, #648]	; (8005c8c <UART_SetConfig+0x2b8>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6812      	ldr	r2, [r2, #0]
 8005a0a:	6939      	ldr	r1, [r7, #16]
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a90      	ldr	r2, [pc, #576]	; (8005c90 <UART_SetConfig+0x2bc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d121      	bne.n	8005a98 <UART_SetConfig+0xc4>
 8005a54:	4b8f      	ldr	r3, [pc, #572]	; (8005c94 <UART_SetConfig+0x2c0>)
 8005a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a58:	f003 0303 	and.w	r3, r3, #3
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d817      	bhi.n	8005a90 <UART_SetConfig+0xbc>
 8005a60:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <UART_SetConfig+0x94>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005a79 	.word	0x08005a79
 8005a6c:	08005a85 	.word	0x08005a85
 8005a70:	08005a8b 	.word	0x08005a8b
 8005a74:	08005a7f 	.word	0x08005a7f
 8005a78:	2300      	movs	r3, #0
 8005a7a:	77fb      	strb	r3, [r7, #31]
 8005a7c:	e01e      	b.n	8005abc <UART_SetConfig+0xe8>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	77fb      	strb	r3, [r7, #31]
 8005a82:	e01b      	b.n	8005abc <UART_SetConfig+0xe8>
 8005a84:	2304      	movs	r3, #4
 8005a86:	77fb      	strb	r3, [r7, #31]
 8005a88:	e018      	b.n	8005abc <UART_SetConfig+0xe8>
 8005a8a:	2308      	movs	r3, #8
 8005a8c:	77fb      	strb	r3, [r7, #31]
 8005a8e:	e015      	b.n	8005abc <UART_SetConfig+0xe8>
 8005a90:	2310      	movs	r3, #16
 8005a92:	77fb      	strb	r3, [r7, #31]
 8005a94:	bf00      	nop
 8005a96:	e011      	b.n	8005abc <UART_SetConfig+0xe8>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a7e      	ldr	r2, [pc, #504]	; (8005c98 <UART_SetConfig+0x2c4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d102      	bne.n	8005aa8 <UART_SetConfig+0xd4>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	77fb      	strb	r3, [r7, #31]
 8005aa6:	e009      	b.n	8005abc <UART_SetConfig+0xe8>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a7b      	ldr	r2, [pc, #492]	; (8005c9c <UART_SetConfig+0x2c8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d102      	bne.n	8005ab8 <UART_SetConfig+0xe4>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	77fb      	strb	r3, [r7, #31]
 8005ab6:	e001      	b.n	8005abc <UART_SetConfig+0xe8>
 8005ab8:	2310      	movs	r3, #16
 8005aba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac4:	f040 8082 	bne.w	8005bcc <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8005ac8:	7ffb      	ldrb	r3, [r7, #31]
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d85e      	bhi.n	8005b8c <UART_SetConfig+0x1b8>
 8005ace:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <UART_SetConfig+0x100>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005af9 	.word	0x08005af9
 8005ad8:	08005b19 	.word	0x08005b19
 8005adc:	08005b39 	.word	0x08005b39
 8005ae0:	08005b8d 	.word	0x08005b8d
 8005ae4:	08005b55 	.word	0x08005b55
 8005ae8:	08005b8d 	.word	0x08005b8d
 8005aec:	08005b8d 	.word	0x08005b8d
 8005af0:	08005b8d 	.word	0x08005b8d
 8005af4:	08005b75 	.word	0x08005b75
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af8:	f7ff fd1a 	bl	8005530 <HAL_RCC_GetPCLK1Freq>
 8005afc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	005a      	lsls	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	085b      	lsrs	r3, r3, #1
 8005b08:	441a      	add	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	61bb      	str	r3, [r7, #24]
        break;
 8005b16:	e03c      	b.n	8005b92 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b18:	f7ff fd2c 	bl	8005574 <HAL_RCC_GetPCLK2Freq>
 8005b1c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	005a      	lsls	r2, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	441a      	add	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	61bb      	str	r3, [r7, #24]
        break;
 8005b36:	e02c      	b.n	8005b92 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	085b      	lsrs	r3, r3, #1
 8005b3e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005b42:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6852      	ldr	r2, [r2, #4]
 8005b4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	61bb      	str	r3, [r7, #24]
        break;
 8005b52:	e01e      	b.n	8005b92 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b54:	f7ff fc76 	bl	8005444 <HAL_RCC_GetSysClockFreq>
 8005b58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	005a      	lsls	r2, r3, #1
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	085b      	lsrs	r3, r3, #1
 8005b64:	441a      	add	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	61bb      	str	r3, [r7, #24]
        break;
 8005b72:	e00e      	b.n	8005b92 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	085b      	lsrs	r3, r3, #1
 8005b7a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	61bb      	str	r3, [r7, #24]
        break;
 8005b8a:	e002      	b.n	8005b92 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	75fb      	strb	r3, [r7, #23]
        break;
 8005b90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b0f      	cmp	r3, #15
 8005b96:	d916      	bls.n	8005bc6 <UART_SetConfig+0x1f2>
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b9e:	d212      	bcs.n	8005bc6 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f023 030f 	bic.w	r3, r3, #15
 8005ba8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	085b      	lsrs	r3, r3, #1
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	897b      	ldrh	r3, [r7, #10]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	897a      	ldrh	r2, [r7, #10]
 8005bc2:	60da      	str	r2, [r3, #12]
 8005bc4:	e07d      	b.n	8005cc2 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	75fb      	strb	r3, [r7, #23]
 8005bca:	e07a      	b.n	8005cc2 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8005bcc:	7ffb      	ldrb	r3, [r7, #31]
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d866      	bhi.n	8005ca0 <UART_SetConfig+0x2cc>
 8005bd2:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <UART_SetConfig+0x204>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005c1b 	.word	0x08005c1b
 8005be0:	08005c39 	.word	0x08005c39
 8005be4:	08005ca1 	.word	0x08005ca1
 8005be8:	08005c55 	.word	0x08005c55
 8005bec:	08005ca1 	.word	0x08005ca1
 8005bf0:	08005ca1 	.word	0x08005ca1
 8005bf4:	08005ca1 	.word	0x08005ca1
 8005bf8:	08005c73 	.word	0x08005c73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bfc:	f7ff fc98 	bl	8005530 <HAL_RCC_GetPCLK1Freq>
 8005c00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	085a      	lsrs	r2, r3, #1
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	441a      	add	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	61bb      	str	r3, [r7, #24]
        break;
 8005c18:	e045      	b.n	8005ca6 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c1a:	f7ff fcab 	bl	8005574 <HAL_RCC_GetPCLK2Freq>
 8005c1e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	085a      	lsrs	r2, r3, #1
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	441a      	add	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	61bb      	str	r3, [r7, #24]
        break;
 8005c36:	e036      	b.n	8005ca6 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	085b      	lsrs	r3, r3, #1
 8005c3e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005c42:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6852      	ldr	r2, [r2, #4]
 8005c4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	61bb      	str	r3, [r7, #24]
        break;
 8005c52:	e028      	b.n	8005ca6 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c54:	f7ff fbf6 	bl	8005444 <HAL_RCC_GetSysClockFreq>
 8005c58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	085a      	lsrs	r2, r3, #1
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	441a      	add	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	61bb      	str	r3, [r7, #24]
        break;
 8005c70:	e019      	b.n	8005ca6 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	085b      	lsrs	r3, r3, #1
 8005c78:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	61bb      	str	r3, [r7, #24]
        break;
 8005c88:	e00d      	b.n	8005ca6 <UART_SetConfig+0x2d2>
 8005c8a:	bf00      	nop
 8005c8c:	efff69f3 	.word	0xefff69f3
 8005c90:	40013800 	.word	0x40013800
 8005c94:	40021000 	.word	0x40021000
 8005c98:	40004400 	.word	0x40004400
 8005c9c:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	75fb      	strb	r3, [r7, #23]
        break;
 8005ca4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	2b0f      	cmp	r3, #15
 8005caa:	d908      	bls.n	8005cbe <UART_SetConfig+0x2ea>
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb2:	d204      	bcs.n	8005cbe <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	60da      	str	r2, [r3, #12]
 8005cbc:	e001      	b.n	8005cc2 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3720      	adds	r7, #32
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	f003 0310 	and.w	r3, r3, #16
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01a      	beq.n	8005dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd6:	d10a      	bne.n	8005dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	605a      	str	r2, [r3, #4]
  }
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005e2a:	f7fb fe7d 	bl	8001b28 <HAL_GetTick>
 8005e2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d10e      	bne.n	8005e5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f82a 	bl	8005ea6 <UART_WaitOnFlagUntilTimeout>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e020      	b.n	8005e9e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d10e      	bne.n	8005e88 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f814 	bl	8005ea6 <UART_WaitOnFlagUntilTimeout>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e00a      	b.n	8005e9e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	60f8      	str	r0, [r7, #12]
 8005eae:	60b9      	str	r1, [r7, #8]
 8005eb0:	603b      	str	r3, [r7, #0]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb6:	e05d      	b.n	8005f74 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ebe:	d059      	beq.n	8005f74 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec0:	f7fb fe32 	bl	8001b28 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d302      	bcc.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d11b      	bne.n	8005f0e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ee4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0201 	bic.w	r2, r2, #1
 8005ef4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2220      	movs	r2, #32
 8005f00:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e042      	b.n	8005f94 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d02b      	beq.n	8005f74 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f2a:	d123      	bne.n	8005f74 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f34:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f44:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0201 	bic.w	r2, r2, #1
 8005f54:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2220      	movs	r2, #32
 8005f66:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e00f      	b.n	8005f94 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69da      	ldr	r2, [r3, #28]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	bf0c      	ite	eq
 8005f84:	2301      	moveq	r3, #1
 8005f86:	2300      	movne	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d092      	beq.n	8005eb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <arm_pid_init_f32>:
 8005f9c:	edd0 6a08 	vldr	s13, [r0, #32]
 8005fa0:	edd0 7a06 	vldr	s15, [r0, #24]
 8005fa4:	ed90 7a07 	vldr	s14, [r0, #28]
 8005fa8:	edc0 6a02 	vstr	s13, [r0, #8]
 8005fac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fb0:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8005fb4:	eef1 7a67 	vneg.f32	s15, s15
 8005fb8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005fbc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005fc0:	ed80 7a00 	vstr	s14, [r0]
 8005fc4:	edc0 7a01 	vstr	s15, [r0, #4]
 8005fc8:	b119      	cbz	r1, 8005fd2 <arm_pid_init_f32+0x36>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60c3      	str	r3, [r0, #12]
 8005fce:	6103      	str	r3, [r0, #16]
 8005fd0:	6143      	str	r3, [r0, #20]
 8005fd2:	4770      	bx	lr

08005fd4 <arm_sub_f32>:
 8005fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fd6:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8005fda:	d033      	beq.n	8006044 <arm_sub_f32+0x70>
 8005fdc:	f100 0610 	add.w	r6, r0, #16
 8005fe0:	f101 0510 	add.w	r5, r1, #16
 8005fe4:	f102 0410 	add.w	r4, r2, #16
 8005fe8:	4677      	mov	r7, lr
 8005fea:	ed16 6a03 	vldr	s12, [r6, #-12]
 8005fee:	ed15 4a03 	vldr	s8, [r5, #-12]
 8005ff2:	ed56 6a02 	vldr	s13, [r6, #-8]
 8005ff6:	ed55 4a02 	vldr	s9, [r5, #-8]
 8005ffa:	ed16 7a01 	vldr	s14, [r6, #-4]
 8005ffe:	ed15 5a01 	vldr	s10, [r5, #-4]
 8006002:	ed56 7a04 	vldr	s15, [r6, #-16]
 8006006:	ed55 5a04 	vldr	s11, [r5, #-16]
 800600a:	ee36 6a44 	vsub.f32	s12, s12, s8
 800600e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8006012:	ee37 7a45 	vsub.f32	s14, s14, s10
 8006016:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800601a:	3f01      	subs	r7, #1
 800601c:	ed04 6a03 	vstr	s12, [r4, #-12]
 8006020:	ed44 6a02 	vstr	s13, [r4, #-8]
 8006024:	ed04 7a01 	vstr	s14, [r4, #-4]
 8006028:	ed44 7a04 	vstr	s15, [r4, #-16]
 800602c:	f106 0610 	add.w	r6, r6, #16
 8006030:	f105 0510 	add.w	r5, r5, #16
 8006034:	f104 0410 	add.w	r4, r4, #16
 8006038:	d1d7      	bne.n	8005fea <arm_sub_f32+0x16>
 800603a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800603e:	4420      	add	r0, r4
 8006040:	4421      	add	r1, r4
 8006042:	4422      	add	r2, r4
 8006044:	f013 0303 	ands.w	r3, r3, #3
 8006048:	d009      	beq.n	800605e <arm_sub_f32+0x8a>
 800604a:	ecf0 7a01 	vldmia	r0!, {s15}
 800604e:	ecb1 7a01 	vldmia	r1!, {s14}
 8006052:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006056:	3b01      	subs	r3, #1
 8006058:	ece2 7a01 	vstmia	r2!, {s15}
 800605c:	d1f5      	bne.n	800604a <arm_sub_f32+0x76>
 800605e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006060 <arm_mult_f32>:
 8006060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006062:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8006066:	d033      	beq.n	80060d0 <arm_mult_f32+0x70>
 8006068:	f100 0610 	add.w	r6, r0, #16
 800606c:	f101 0510 	add.w	r5, r1, #16
 8006070:	f102 0410 	add.w	r4, r2, #16
 8006074:	4677      	mov	r7, lr
 8006076:	ed16 6a04 	vldr	s12, [r6, #-16]
 800607a:	ed55 4a04 	vldr	s9, [r5, #-16]
 800607e:	ed56 6a02 	vldr	s13, [r6, #-8]
 8006082:	ed15 5a02 	vldr	s10, [r5, #-8]
 8006086:	ed16 7a03 	vldr	s14, [r6, #-12]
 800608a:	ed55 5a03 	vldr	s11, [r5, #-12]
 800608e:	ed56 7a01 	vldr	s15, [r6, #-4]
 8006092:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006096:	ee66 6a85 	vmul.f32	s13, s13, s10
 800609a:	ed04 6a04 	vstr	s12, [r4, #-16]
 800609e:	ed15 6a01 	vldr	s12, [r5, #-4]
 80060a2:	ed44 6a02 	vstr	s13, [r4, #-8]
 80060a6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80060aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80060ae:	3f01      	subs	r7, #1
 80060b0:	ed04 7a03 	vstr	s14, [r4, #-12]
 80060b4:	ed44 7a01 	vstr	s15, [r4, #-4]
 80060b8:	f106 0610 	add.w	r6, r6, #16
 80060bc:	f105 0510 	add.w	r5, r5, #16
 80060c0:	f104 0410 	add.w	r4, r4, #16
 80060c4:	d1d7      	bne.n	8006076 <arm_mult_f32+0x16>
 80060c6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80060ca:	4420      	add	r0, r4
 80060cc:	4421      	add	r1, r4
 80060ce:	4422      	add	r2, r4
 80060d0:	f013 0303 	ands.w	r3, r3, #3
 80060d4:	d009      	beq.n	80060ea <arm_mult_f32+0x8a>
 80060d6:	ecf0 7a01 	vldmia	r0!, {s15}
 80060da:	ecb1 7a01 	vldmia	r1!, {s14}
 80060de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060e2:	3b01      	subs	r3, #1
 80060e4:	ece2 7a01 	vstmia	r2!, {s15}
 80060e8:	d1f5      	bne.n	80060d6 <arm_mult_f32+0x76>
 80060ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060ec <__libc_init_array>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	4e0d      	ldr	r6, [pc, #52]	; (8006124 <__libc_init_array+0x38>)
 80060f0:	4c0d      	ldr	r4, [pc, #52]	; (8006128 <__libc_init_array+0x3c>)
 80060f2:	1ba4      	subs	r4, r4, r6
 80060f4:	10a4      	asrs	r4, r4, #2
 80060f6:	2500      	movs	r5, #0
 80060f8:	42a5      	cmp	r5, r4
 80060fa:	d109      	bne.n	8006110 <__libc_init_array+0x24>
 80060fc:	4e0b      	ldr	r6, [pc, #44]	; (800612c <__libc_init_array+0x40>)
 80060fe:	4c0c      	ldr	r4, [pc, #48]	; (8006130 <__libc_init_array+0x44>)
 8006100:	f000 f820 	bl	8006144 <_init>
 8006104:	1ba4      	subs	r4, r4, r6
 8006106:	10a4      	asrs	r4, r4, #2
 8006108:	2500      	movs	r5, #0
 800610a:	42a5      	cmp	r5, r4
 800610c:	d105      	bne.n	800611a <__libc_init_array+0x2e>
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006114:	4798      	blx	r3
 8006116:	3501      	adds	r5, #1
 8006118:	e7ee      	b.n	80060f8 <__libc_init_array+0xc>
 800611a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800611e:	4798      	blx	r3
 8006120:	3501      	adds	r5, #1
 8006122:	e7f2      	b.n	800610a <__libc_init_array+0x1e>
 8006124:	08006194 	.word	0x08006194
 8006128:	08006194 	.word	0x08006194
 800612c:	08006194 	.word	0x08006194
 8006130:	08006198 	.word	0x08006198

08006134 <memset>:
 8006134:	4402      	add	r2, r0
 8006136:	4603      	mov	r3, r0
 8006138:	4293      	cmp	r3, r2
 800613a:	d100      	bne.n	800613e <memset+0xa>
 800613c:	4770      	bx	lr
 800613e:	f803 1b01 	strb.w	r1, [r3], #1
 8006142:	e7f9      	b.n	8006138 <memset+0x4>

08006144 <_init>:
 8006144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006146:	bf00      	nop
 8006148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800614a:	bc08      	pop	{r3}
 800614c:	469e      	mov	lr, r3
 800614e:	4770      	bx	lr

08006150 <_fini>:
 8006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006152:	bf00      	nop
 8006154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006156:	bc08      	pop	{r3}
 8006158:	469e      	mov	lr, r3
 800615a:	4770      	bx	lr
