
Test_LED_Amine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086a4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800887c  0800887c  0001887c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088a0  080088a0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080088a0  080088a0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088a0  080088a0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088a0  080088a0  000188a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088a4  080088a4  000188a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080088a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000068  08008910  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08008910  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025ae1  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030c1  00000000  00000000  00045b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017d8  00000000  00000000  00048c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001658  00000000  00000000  0004a418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b3bd  00000000  00000000  0004ba70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014186  00000000  00000000  00076e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012ca85  00000000  00000000  0008afb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b7a38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067cc  00000000  00000000  001b7ab4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008864 	.word	0x08008864

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08008864 	.word	0x08008864

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fe:	2003      	movs	r0, #3
 8000a00:	f001 fdfd 	bl	80025fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a04:	2000      	movs	r0, #0
 8000a06:	f007 fbdf 	bl	80081c8 <HAL_InitTick>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	71fb      	strb	r3, [r7, #7]
 8000a14:	e001      	b.n	8000a1a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a16:	f007 fa27 	bl	8007e68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a1a:	79fb      	ldrb	r3, [r7, #7]

}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_IncTick+0x1c>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_IncTick+0x20>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4413      	add	r3, r2
 8000a32:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <HAL_IncTick+0x1c>)
 8000a34:	6013      	str	r3, [r2, #0]
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	20000090 	.word	0x20000090
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <HAL_GetTick+0x14>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000090 	.word	0x20000090

08000a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a68:	f7ff ffee 	bl	8000a48 <HAL_GetTick>
 8000a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a78:	d004      	beq.n	8000a84 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_Delay+0x40>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	4413      	add	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a84:	bf00      	nop
 8000a86:	f7ff ffdf 	bl	8000a48 <HAL_GetTick>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d8f7      	bhi.n	8000a86 <HAL_Delay+0x26>
  {
  }
}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8000ab4:	4904      	ldr	r1, [pc, #16]	; (8000ac8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	600b      	str	r3, [r1, #0]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	40010030 	.word	0x40010030

08000acc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f023 0202 	bic.w	r2, r3, #2
 8000adc:	4904      	ldr	r1, [pc, #16]	; (8000af0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	600b      	str	r3, [r1, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	40010030 	.word	0x40010030

08000af4 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000b06:	f7ff ff9f 	bl	8000a48 <HAL_GetTick>
 8000b0a:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000b0c:	e008      	b.n	8000b20 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8000b0e:	f7ff ff9b 	bl	8000a48 <HAL_GetTick>
 8000b12:	4602      	mov	r2, r0
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	2b0a      	cmp	r3, #10
 8000b1a:	d901      	bls.n	8000b20 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	e006      	b.n	8000b2e <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d0f0      	beq.n	8000b0e <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40010030 	.word	0x40010030

08000b3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	431a      	orrs	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	609a      	str	r2, [r3, #8]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	431a      	orrs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3360      	adds	r3, #96	; 0x60
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <LL_ADC_SetOffset+0x44>)
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000bdc:	bf00      	nop
 8000bde:	371c      	adds	r7, #28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	03fff000 	.word	0x03fff000

08000bec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3360      	adds	r3, #96	; 0x60
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3360      	adds	r3, #96	; 0x60
 8000c28:	461a      	mov	r2, r3
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000c42:	bf00      	nop
 8000c44:	371c      	adds	r7, #28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b087      	sub	sp, #28
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	60f8      	str	r0, [r7, #12]
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	3360      	adds	r3, #96	; 0x60
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	431a      	orrs	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000c78:	bf00      	nop
 8000c7a:	371c      	adds	r7, #28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b087      	sub	sp, #28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3360      	adds	r3, #96	; 0x60
 8000c94:	461a      	mov	r2, r3
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000cae:	bf00      	nop
 8000cb0:	371c      	adds	r7, #28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	615a      	str	r2, [r3, #20]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d101      	bne.n	8000cf8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e000      	b.n	8000cfa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b087      	sub	sp, #28
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	3330      	adds	r3, #48	; 0x30
 8000d16:	461a      	mov	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	0a1b      	lsrs	r3, r3, #8
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	f003 030c 	and.w	r3, r3, #12
 8000d22:	4413      	add	r3, r2
 8000d24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	f003 031f 	and.w	r3, r3, #31
 8000d30:	211f      	movs	r1, #31
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	401a      	ands	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	0e9b      	lsrs	r3, r3, #26
 8000d3e:	f003 011f 	and.w	r1, r3, #31
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	f003 031f 	and.w	r3, r3, #31
 8000d48:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d52:	bf00      	nop
 8000d54:	371c      	adds	r7, #28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3314      	adds	r3, #20
 8000d94:	461a      	mov	r2, r3
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	0e5b      	lsrs	r3, r3, #25
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	4413      	add	r3, r2
 8000da2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	0d1b      	lsrs	r3, r3, #20
 8000dac:	f003 031f 	and.w	r3, r3, #31
 8000db0:	2107      	movs	r1, #7
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	401a      	ands	r2, r3
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	0d1b      	lsrs	r3, r3, #20
 8000dbe:	f003 031f 	and.w	r3, r3, #31
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000dce:	bf00      	nop
 8000dd0:	371c      	adds	r7, #28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000df4:	43db      	mvns	r3, r3
 8000df6:	401a      	ands	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0318 	and.w	r3, r3, #24
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e00:	40d9      	lsrs	r1, r3
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	400b      	ands	r3, r1
 8000e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	0007ffff 	.word	0x0007ffff

08000e24 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f003 031f 	and.w	r3, r3, #31
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000e6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6093      	str	r3, [r2, #8]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e94:	d101      	bne.n	8000e9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000eb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ebc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ee4:	d101      	bne.n	8000eea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f0c:	f043 0201 	orr.w	r2, r3, #1
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d101      	bne.n	8000f38 <LL_ADC_IsEnabled+0x18>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <LL_ADC_IsEnabled+0x1a>
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f5a:	f043 0204 	orr.w	r2, r3, #4
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	d101      	bne.n	8000f86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 0308 	and.w	r3, r3, #8
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d101      	bne.n	8000fac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e000      	b.n	8000fae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e1af      	b.n	8001336 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d109      	bne.n	8000ff8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f006 ff6b 	bl	8007ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff3f 	bl	8000e80 <LL_ADC_IsDeepPowerDownEnabled>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d004      	beq.n	8001012 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff25 	bl	8000e5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff5a 	bl	8000ed0 <LL_ADC_IsInternalRegulatorEnabled>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d115      	bne.n	800104e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff3e 	bl	8000ea8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800102c:	4b9f      	ldr	r3, [pc, #636]	; (80012ac <HAL_ADC_Init+0x2f0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	099b      	lsrs	r3, r3, #6
 8001032:	4a9f      	ldr	r2, [pc, #636]	; (80012b0 <HAL_ADC_Init+0x2f4>)
 8001034:	fba2 2303 	umull	r2, r3, r2, r3
 8001038:	099b      	lsrs	r3, r3, #6
 800103a:	3301      	adds	r3, #1
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001040:	e002      	b.n	8001048 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	3b01      	subs	r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f9      	bne.n	8001042 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff3c 	bl	8000ed0 <LL_ADC_IsInternalRegulatorEnabled>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10d      	bne.n	800107a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001062:	f043 0210 	orr.w	r2, r3, #16
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106e:	f043 0201 	orr.w	r2, r3, #1
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff75 	bl	8000f6e <LL_ADC_REG_IsConversionOngoing>
 8001084:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	f040 8148 	bne.w	8001324 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f040 8144 	bne.w	8001324 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010a4:	f043 0202 	orr.w	r2, r3, #2
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff35 	bl	8000f20 <LL_ADC_IsEnabled>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d141      	bne.n	8001140 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010c4:	d004      	beq.n	80010d0 <HAL_ADC_Init+0x114>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a7a      	ldr	r2, [pc, #488]	; (80012b4 <HAL_ADC_Init+0x2f8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d10f      	bne.n	80010f0 <HAL_ADC_Init+0x134>
 80010d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80010d4:	f7ff ff24 	bl	8000f20 <LL_ADC_IsEnabled>
 80010d8:	4604      	mov	r4, r0
 80010da:	4876      	ldr	r0, [pc, #472]	; (80012b4 <HAL_ADC_Init+0x2f8>)
 80010dc:	f7ff ff20 	bl	8000f20 <LL_ADC_IsEnabled>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4323      	orrs	r3, r4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	bf0c      	ite	eq
 80010e8:	2301      	moveq	r3, #1
 80010ea:	2300      	movne	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	e012      	b.n	8001116 <HAL_ADC_Init+0x15a>
 80010f0:	4871      	ldr	r0, [pc, #452]	; (80012b8 <HAL_ADC_Init+0x2fc>)
 80010f2:	f7ff ff15 	bl	8000f20 <LL_ADC_IsEnabled>
 80010f6:	4604      	mov	r4, r0
 80010f8:	4870      	ldr	r0, [pc, #448]	; (80012bc <HAL_ADC_Init+0x300>)
 80010fa:	f7ff ff11 	bl	8000f20 <LL_ADC_IsEnabled>
 80010fe:	4603      	mov	r3, r0
 8001100:	431c      	orrs	r4, r3
 8001102:	486f      	ldr	r0, [pc, #444]	; (80012c0 <HAL_ADC_Init+0x304>)
 8001104:	f7ff ff0c 	bl	8000f20 <LL_ADC_IsEnabled>
 8001108:	4603      	mov	r3, r0
 800110a:	4323      	orrs	r3, r4
 800110c:	2b00      	cmp	r3, #0
 800110e:	bf0c      	ite	eq
 8001110:	2301      	moveq	r3, #1
 8001112:	2300      	movne	r3, #0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d012      	beq.n	8001140 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001122:	d004      	beq.n	800112e <HAL_ADC_Init+0x172>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a62      	ldr	r2, [pc, #392]	; (80012b4 <HAL_ADC_Init+0x2f8>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d101      	bne.n	8001132 <HAL_ADC_Init+0x176>
 800112e:	4a65      	ldr	r2, [pc, #404]	; (80012c4 <HAL_ADC_Init+0x308>)
 8001130:	e000      	b.n	8001134 <HAL_ADC_Init+0x178>
 8001132:	4a65      	ldr	r2, [pc, #404]	; (80012c8 <HAL_ADC_Init+0x30c>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	4619      	mov	r1, r3
 800113a:	4610      	mov	r0, r2
 800113c:	f7ff fcfe 	bl	8000b3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7f5b      	ldrb	r3, [r3, #29]
 8001144:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800114a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001150:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001156:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800115e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800116a:	2b01      	cmp	r3, #1
 800116c:	d106      	bne.n	800117c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001172:	3b01      	subs	r3, #1
 8001174:	045b      	lsls	r3, r3, #17
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001180:	2b00      	cmp	r3, #0
 8001182:	d009      	beq.n	8001198 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001188:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <HAL_ADC_Init+0x310>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	69b9      	ldr	r1, [r7, #24]
 80011a8:	430b      	orrs	r3, r1
 80011aa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	430a      	orrs	r2, r1
 80011c0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fed1 	bl	8000f6e <LL_ADC_REG_IsConversionOngoing>
 80011cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fede 	bl	8000f94 <LL_ADC_INJ_IsConversionOngoing>
 80011d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d17f      	bne.n	80012e0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d17c      	bne.n	80012e0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011f2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001202:	f023 0302 	bic.w	r3, r3, #2
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6812      	ldr	r2, [r2, #0]
 800120a:	69b9      	ldr	r1, [r7, #24]
 800120c:	430b      	orrs	r3, r1
 800120e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d017      	beq.n	8001248 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001226:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001230:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001234:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6911      	ldr	r1, [r2, #16]
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	430b      	orrs	r3, r1
 8001242:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001246:	e013      	b.n	8001270 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	691a      	ldr	r2, [r3, #16]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001256:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6812      	ldr	r2, [r2, #0]
 8001264:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800126c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001276:	2b01      	cmp	r3, #1
 8001278:	d12a      	bne.n	80012d0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001284:	f023 0304 	bic.w	r3, r3, #4
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001290:	4311      	orrs	r1, r2
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001296:	4311      	orrs	r1, r2
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800129c:	430a      	orrs	r2, r1
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f042 0201 	orr.w	r2, r2, #1
 80012a8:	611a      	str	r2, [r3, #16]
 80012aa:	e019      	b.n	80012e0 <HAL_ADC_Init+0x324>
 80012ac:	2000002c 	.word	0x2000002c
 80012b0:	053e2d63 	.word	0x053e2d63
 80012b4:	50000100 	.word	0x50000100
 80012b8:	50000400 	.word	0x50000400
 80012bc:	50000500 	.word	0x50000500
 80012c0:	50000600 	.word	0x50000600
 80012c4:	50000300 	.word	0x50000300
 80012c8:	50000700 	.word	0x50000700
 80012cc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	691a      	ldr	r2, [r3, #16]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0201 	bic.w	r2, r2, #1
 80012de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d10c      	bne.n	8001302 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f023 010f 	bic.w	r1, r3, #15
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	1e5a      	subs	r2, r3, #1
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001300:	e007      	b.n	8001312 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 020f 	bic.w	r2, r2, #15
 8001310:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001316:	f023 0303 	bic.w	r3, r3, #3
 800131a:	f043 0201 	orr.w	r2, r3, #1
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	65da      	str	r2, [r3, #92]	; 0x5c
 8001322:	e007      	b.n	8001334 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001328:	f043 0210 	orr.w	r2, r3, #16
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001334:	7ffb      	ldrb	r3, [r7, #31]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd90      	pop	{r4, r7, pc}
 800133e:	bf00      	nop

08001340 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001354:	d004      	beq.n	8001360 <HAL_ADC_Start_DMA+0x20>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a58      	ldr	r2, [pc, #352]	; (80014bc <HAL_ADC_Start_DMA+0x17c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d101      	bne.n	8001364 <HAL_ADC_Start_DMA+0x24>
 8001360:	4b57      	ldr	r3, [pc, #348]	; (80014c0 <HAL_ADC_Start_DMA+0x180>)
 8001362:	e000      	b.n	8001366 <HAL_ADC_Start_DMA+0x26>
 8001364:	4b57      	ldr	r3, [pc, #348]	; (80014c4 <HAL_ADC_Start_DMA+0x184>)
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fd5c 	bl	8000e24 <LL_ADC_GetMultimode>
 800136c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fdfb 	bl	8000f6e <LL_ADC_REG_IsConversionOngoing>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 8096 	bne.w	80014ac <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <HAL_ADC_Start_DMA+0x4e>
 800138a:	2302      	movs	r3, #2
 800138c:	e091      	b.n	80014b2 <HAL_ADC_Start_DMA+0x172>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	2b05      	cmp	r3, #5
 80013a0:	d002      	beq.n	80013a8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	2b09      	cmp	r3, #9
 80013a6:	d17a      	bne.n	800149e <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f000 ff53 	bl	8002254 <ADC_Enable>
 80013ae:	4603      	mov	r3, r0
 80013b0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d16d      	bne.n	8001494 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013c0:	f023 0301 	bic.w	r3, r3, #1
 80013c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a3a      	ldr	r2, [pc, #232]	; (80014bc <HAL_ADC_Start_DMA+0x17c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d009      	beq.n	80013ea <HAL_ADC_Start_DMA+0xaa>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a3b      	ldr	r2, [pc, #236]	; (80014c8 <HAL_ADC_Start_DMA+0x188>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d002      	beq.n	80013e6 <HAL_ADC_Start_DMA+0xa6>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	e003      	b.n	80013ee <HAL_ADC_Start_DMA+0xae>
 80013e6:	4b39      	ldr	r3, [pc, #228]	; (80014cc <HAL_ADC_Start_DMA+0x18c>)
 80013e8:	e001      	b.n	80013ee <HAL_ADC_Start_DMA+0xae>
 80013ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d002      	beq.n	80013fc <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d105      	bne.n	8001408 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001400:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001418:	f023 0206 	bic.w	r2, r3, #6
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	661a      	str	r2, [r3, #96]	; 0x60
 8001420:	e002      	b.n	8001428 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142c:	4a28      	ldr	r2, [pc, #160]	; (80014d0 <HAL_ADC_Start_DMA+0x190>)
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001434:	4a27      	ldr	r2, [pc, #156]	; (80014d4 <HAL_ADC_Start_DMA+0x194>)
 8001436:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143c:	4a26      	ldr	r2, [pc, #152]	; (80014d8 <HAL_ADC_Start_DMA+0x198>)
 800143e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	221c      	movs	r2, #28
 8001446:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0210 	orr.w	r2, r2, #16
 800145e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68da      	ldr	r2, [r3, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0201 	orr.w	r2, r2, #1
 800146e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3340      	adds	r3, #64	; 0x40
 800147a:	4619      	mov	r1, r3
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f001 fbdc 	bl	8002c3c <HAL_DMA_Start_IT>
 8001484:	4603      	mov	r3, r0
 8001486:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fd5a 	bl	8000f46 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001492:	e00d      	b.n	80014b0 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800149c:	e008      	b.n	80014b0 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80014aa:	e001      	b.n	80014b0 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014ac:	2302      	movs	r3, #2
 80014ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	50000100 	.word	0x50000100
 80014c0:	50000300 	.word	0x50000300
 80014c4:	50000700 	.word	0x50000700
 80014c8:	50000500 	.word	0x50000500
 80014cc:	50000400 	.word	0x50000400
 80014d0:	08002319 	.word	0x08002319
 80014d4:	080023f1 	.word	0x080023f1
 80014d8:	0800240d 	.word	0x0800240d

080014dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800151c:	d004      	beq.n	8001528 <HAL_ADC_IRQHandler+0x30>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a95      	ldr	r2, [pc, #596]	; (8001778 <HAL_ADC_IRQHandler+0x280>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d101      	bne.n	800152c <HAL_ADC_IRQHandler+0x34>
 8001528:	4b94      	ldr	r3, [pc, #592]	; (800177c <HAL_ADC_IRQHandler+0x284>)
 800152a:	e000      	b.n	800152e <HAL_ADC_IRQHandler+0x36>
 800152c:	4b94      	ldr	r3, [pc, #592]	; (8001780 <HAL_ADC_IRQHandler+0x288>)
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fc78 	bl	8000e24 <LL_ADC_GetMultimode>
 8001534:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d017      	beq.n	8001570 <HAL_ADC_IRQHandler+0x78>
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d012      	beq.n	8001570 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	2b00      	cmp	r3, #0
 8001554:	d105      	bne.n	8001562 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 ff94 	bl	8002490 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2202      	movs	r2, #2
 800156e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <HAL_ADC_IRQHandler+0x8c>
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10b      	bne.n	800159c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 8094 	beq.w	80016b8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 808e 	beq.w	80016b8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d105      	bne.n	80015b4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fb91 	bl	8000ce0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d072      	beq.n	80016aa <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a6b      	ldr	r2, [pc, #428]	; (8001778 <HAL_ADC_IRQHandler+0x280>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d009      	beq.n	80015e2 <HAL_ADC_IRQHandler+0xea>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a6c      	ldr	r2, [pc, #432]	; (8001784 <HAL_ADC_IRQHandler+0x28c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d002      	beq.n	80015de <HAL_ADC_IRQHandler+0xe6>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	e003      	b.n	80015e6 <HAL_ADC_IRQHandler+0xee>
 80015de:	4b6a      	ldr	r3, [pc, #424]	; (8001788 <HAL_ADC_IRQHandler+0x290>)
 80015e0:	e001      	b.n	80015e6 <HAL_ADC_IRQHandler+0xee>
 80015e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d008      	beq.n	8001600 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d002      	beq.n	8001600 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b09      	cmp	r3, #9
 80015fe:	d104      	bne.n	800160a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	623b      	str	r3, [r7, #32]
 8001608:	e014      	b.n	8001634 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a5a      	ldr	r2, [pc, #360]	; (8001778 <HAL_ADC_IRQHandler+0x280>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d009      	beq.n	8001628 <HAL_ADC_IRQHandler+0x130>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a5a      	ldr	r2, [pc, #360]	; (8001784 <HAL_ADC_IRQHandler+0x28c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d002      	beq.n	8001624 <HAL_ADC_IRQHandler+0x12c>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	e003      	b.n	800162c <HAL_ADC_IRQHandler+0x134>
 8001624:	4b58      	ldr	r3, [pc, #352]	; (8001788 <HAL_ADC_IRQHandler+0x290>)
 8001626:	e001      	b.n	800162c <HAL_ADC_IRQHandler+0x134>
 8001628:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800162c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d135      	bne.n	80016aa <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b08      	cmp	r3, #8
 800164a:	d12e      	bne.n	80016aa <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fc8c 	bl	8000f6e <LL_ADC_REG_IsConversionOngoing>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d11a      	bne.n	8001692 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 020c 	bic.w	r2, r2, #12
 800166a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001670:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d112      	bne.n	80016aa <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001688:	f043 0201 	orr.w	r2, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001690:	e00b      	b.n	80016aa <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001696:	f043 0210 	orr.w	r2, r3, #16
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a2:	f043 0201 	orr.w	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f006 ff88 	bl	80085c0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	220c      	movs	r2, #12
 80016b6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 0320 	and.w	r3, r3, #32
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d004      	beq.n	80016cc <HAL_ADC_IRQHandler+0x1d4>
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	f003 0320 	and.w	r3, r3, #32
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10b      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 80b2 	beq.w	800183c <HAL_ADC_IRQHandler+0x344>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80ac 	beq.w	800183c <HAL_ADC_IRQHandler+0x344>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d105      	bne.n	80016fc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fb2c 	bl	8000d5e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001706:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fae7 	bl	8000ce0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001712:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_ADC_IRQHandler+0x280>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d009      	beq.n	8001732 <HAL_ADC_IRQHandler+0x23a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a18      	ldr	r2, [pc, #96]	; (8001784 <HAL_ADC_IRQHandler+0x28c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d002      	beq.n	800172e <HAL_ADC_IRQHandler+0x236>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	e003      	b.n	8001736 <HAL_ADC_IRQHandler+0x23e>
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <HAL_ADC_IRQHandler+0x290>)
 8001730:	e001      	b.n	8001736 <HAL_ADC_IRQHandler+0x23e>
 8001732:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	4293      	cmp	r3, r2
 800173c:	d008      	beq.n	8001750 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2b06      	cmp	r3, #6
 8001748:	d002      	beq.n	8001750 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b07      	cmp	r3, #7
 800174e:	d104      	bne.n	800175a <HAL_ADC_IRQHandler+0x262>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	623b      	str	r3, [r7, #32]
 8001758:	e01e      	b.n	8001798 <HAL_ADC_IRQHandler+0x2a0>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a06      	ldr	r2, [pc, #24]	; (8001778 <HAL_ADC_IRQHandler+0x280>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d013      	beq.n	800178c <HAL_ADC_IRQHandler+0x294>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <HAL_ADC_IRQHandler+0x28c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d002      	beq.n	8001774 <HAL_ADC_IRQHandler+0x27c>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	e00d      	b.n	8001790 <HAL_ADC_IRQHandler+0x298>
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <HAL_ADC_IRQHandler+0x290>)
 8001776:	e00b      	b.n	8001790 <HAL_ADC_IRQHandler+0x298>
 8001778:	50000100 	.word	0x50000100
 800177c:	50000300 	.word	0x50000300
 8001780:	50000700 	.word	0x50000700
 8001784:	50000500 	.word	0x50000500
 8001788:	50000400 	.word	0x50000400
 800178c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001790:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d047      	beq.n	800182e <HAL_ADC_IRQHandler+0x336>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d007      	beq.n	80017b8 <HAL_ADC_IRQHandler+0x2c0>
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d03f      	beq.n	800182e <HAL_ADC_IRQHandler+0x336>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d13a      	bne.n	800182e <HAL_ADC_IRQHandler+0x336>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c2:	2b40      	cmp	r3, #64	; 0x40
 80017c4:	d133      	bne.n	800182e <HAL_ADC_IRQHandler+0x336>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d12e      	bne.n	800182e <HAL_ADC_IRQHandler+0x336>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fbdd 	bl	8000f94 <LL_ADC_INJ_IsConversionOngoing>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d11a      	bne.n	8001816 <HAL_ADC_IRQHandler+0x31e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80017ee:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d112      	bne.n	800182e <HAL_ADC_IRQHandler+0x336>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	f043 0201 	orr.w	r2, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	65da      	str	r2, [r3, #92]	; 0x5c
 8001814:	e00b      	b.n	800182e <HAL_ADC_IRQHandler+0x336>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181a:	f043 0210 	orr.w	r2, r3, #16
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001826:	f043 0201 	orr.w	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 fe06 	bl	8002440 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2260      	movs	r2, #96	; 0x60
 800183a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001842:	2b00      	cmp	r3, #0
 8001844:	d011      	beq.n	800186a <HAL_ADC_IRQHandler+0x372>
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00c      	beq.n	800186a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001854:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f8a5 	bl	80019ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2280      	movs	r2, #128	; 0x80
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001870:	2b00      	cmp	r3, #0
 8001872:	d012      	beq.n	800189a <HAL_ADC_IRQHandler+0x3a2>
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00d      	beq.n	800189a <HAL_ADC_IRQHandler+0x3a2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001882:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fdec 	bl	8002468 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d012      	beq.n	80018ca <HAL_ADC_IRQHandler+0x3d2>
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00d      	beq.n	80018ca <HAL_ADC_IRQHandler+0x3d2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 fdde 	bl	800247c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d043      	beq.n	800195c <HAL_ADC_IRQHandler+0x464>
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d03e      	beq.n	800195c <HAL_ADC_IRQHandler+0x464>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d102      	bne.n	80018ec <HAL_ADC_IRQHandler+0x3f4>
    {
      overrun_error = 1UL;
 80018e6:	2301      	movs	r3, #1
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ea:	e021      	b.n	8001930 <HAL_ADC_IRQHandler+0x438>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d015      	beq.n	800191e <HAL_ADC_IRQHandler+0x426>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018fa:	d004      	beq.n	8001906 <HAL_ADC_IRQHandler+0x40e>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a27      	ldr	r2, [pc, #156]	; (80019a0 <HAL_ADC_IRQHandler+0x4a8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d101      	bne.n	800190a <HAL_ADC_IRQHandler+0x412>
 8001906:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <HAL_ADC_IRQHandler+0x4ac>)
 8001908:	e000      	b.n	800190c <HAL_ADC_IRQHandler+0x414>
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <HAL_ADC_IRQHandler+0x4b0>)
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fa97 	bl	8000e40 <LL_ADC_GetMultiDMATransfer>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00b      	beq.n	8001930 <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 8001918:	2301      	movs	r3, #1
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
 800191c:	e008      	b.n	8001930 <HAL_ADC_IRQHandler+0x438>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 800192c:	2301      	movs	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	2b01      	cmp	r3, #1
 8001934:	d10e      	bne.n	8001954 <HAL_ADC_IRQHandler+0x45c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001946:	f043 0202 	orr.w	r2, r3, #2
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f836 	bl	80019c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2210      	movs	r2, #16
 800195a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001962:	2b00      	cmp	r3, #0
 8001964:	d018      	beq.n	8001998 <HAL_ADC_IRQHandler+0x4a0>
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196c:	2b00      	cmp	r3, #0
 800196e:	d013      	beq.n	8001998 <HAL_ADC_IRQHandler+0x4a0>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001974:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001980:	f043 0208 	orr.w	r2, r3, #8
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001990:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fd5e 	bl	8002454 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001998:	bf00      	nop
 800199a:	3728      	adds	r7, #40	; 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	50000100 	.word	0x50000100
 80019a4:	50000300 	.word	0x50000300
 80019a8:	50000700 	.word	0x50000700

080019ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b0b6      	sub	sp, #216	; 0xd8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d102      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x24>
 80019f2:	2302      	movs	r3, #2
 80019f4:	f000 bc13 	b.w	800221e <HAL_ADC_ConfigChannel+0x84a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fab2 	bl	8000f6e <LL_ADC_REG_IsConversionOngoing>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f040 83f3 	bne.w	80021f8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6818      	ldr	r0, [r3, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6859      	ldr	r1, [r3, #4]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f7ff f971 	bl	8000d06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff faa0 	bl	8000f6e <LL_ADC_REG_IsConversionOngoing>
 8001a2e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff faac 	bl	8000f94 <LL_ADC_INJ_IsConversionOngoing>
 8001a3c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f040 81d9 	bne.w	8001dfc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f040 81d4 	bne.w	8001dfc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a5c:	d10f      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2200      	movs	r2, #0
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f7ff f98b 	bl	8000d84 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f91f 	bl	8000cba <LL_ADC_SetSamplingTimeCommonConfig>
 8001a7c:	e00e      	b.n	8001a9c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6819      	ldr	r1, [r3, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f7ff f97a 	bl	8000d84 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f90f 	bl	8000cba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	695a      	ldr	r2, [r3, #20]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	08db      	lsrs	r3, r3, #3
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d022      	beq.n	8001b04 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6919      	ldr	r1, [r3, #16]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ace:	f7ff f869 	bl	8000ba4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	6919      	ldr	r1, [r3, #16]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f7ff f8b5 	bl	8000c4e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	6919      	ldr	r1, [r3, #16]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	7f1b      	ldrb	r3, [r3, #28]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d102      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x126>
 8001af4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001af8:	e000      	b.n	8001afc <HAL_ADC_ConfigChannel+0x128>
 8001afa:	2300      	movs	r3, #0
 8001afc:	461a      	mov	r2, r3
 8001afe:	f7ff f8c1 	bl	8000c84 <LL_ADC_SetOffsetSaturation>
 8001b02:	e17b      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f86e 	bl	8000bec <LL_ADC_GetOffsetChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10a      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x15c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff f863 	bl	8000bec <LL_ADC_GetOffsetChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	0e9b      	lsrs	r3, r3, #26
 8001b2a:	f003 021f 	and.w	r2, r3, #31
 8001b2e:	e01e      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x19a>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f858 	bl	8000bec <LL_ADC_GetOffsetChannel>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001b5e:	2320      	movs	r3, #32
 8001b60:	e004      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001b62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d105      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x1b2>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	0e9b      	lsrs	r3, r3, #26
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	e018      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x1e4>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001ba2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001baa:	2320      	movs	r3, #32
 8001bac:	e004      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001bae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d106      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff f827 	bl	8000c18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2101      	movs	r1, #1
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f80b 	bl	8000bec <LL_ADC_GetOffsetChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10a      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x222>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2101      	movs	r1, #1
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f800 	bl	8000bec <LL_ADC_GetOffsetChannel>
 8001bec:	4603      	mov	r3, r0
 8001bee:	0e9b      	lsrs	r3, r3, #26
 8001bf0:	f003 021f 	and.w	r2, r3, #31
 8001bf4:	e01e      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x260>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fff5 	bl	8000bec <LL_ADC_GetOffsetChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c0c:	fa93 f3a3 	rbit	r3, r3
 8001c10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001c24:	2320      	movs	r3, #32
 8001c26:	e004      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001c28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c2c:	fab3 f383 	clz	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d105      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x278>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0e9b      	lsrs	r3, r3, #26
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	e018      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x2aa>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001c70:	2320      	movs	r3, #32
 8001c72:	e004      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c78:	fab3 f383 	clz	r3, r3
 8001c7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d106      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2200      	movs	r2, #0
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe ffc4 	bl	8000c18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2102      	movs	r1, #2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe ffa8 	bl	8000bec <LL_ADC_GetOffsetChannel>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10a      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x2e8>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2102      	movs	r1, #2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe ff9d 	bl	8000bec <LL_ADC_GetOffsetChannel>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	0e9b      	lsrs	r3, r3, #26
 8001cb6:	f003 021f 	and.w	r2, r3, #31
 8001cba:	e01e      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x326>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe ff92 	bl	8000bec <LL_ADC_GetOffsetChannel>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001cda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001cea:	2320      	movs	r3, #32
 8001cec:	e004      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001cee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d105      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x33e>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	0e9b      	lsrs	r3, r3, #26
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	e016      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x36c>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001d32:	2320      	movs	r3, #32
 8001d34:	e004      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001d36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d106      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2102      	movs	r1, #2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe ff63 	bl	8000c18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2103      	movs	r1, #3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe ff47 	bl	8000bec <LL_ADC_GetOffsetChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10a      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x3aa>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2103      	movs	r1, #3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe ff3c 	bl	8000bec <LL_ADC_GetOffsetChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	0e9b      	lsrs	r3, r3, #26
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	e017      	b.n	8001dae <HAL_ADC_ConfigChannel+0x3da>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2103      	movs	r1, #3
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe ff31 	bl	8000bec <LL_ADC_GetOffsetChannel>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d98:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001da0:	2320      	movs	r3, #32
 8001da2:	e003      	b.n	8001dac <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d105      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x3f2>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	0e9b      	lsrs	r3, r3, #26
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	e011      	b.n	8001dea <HAL_ADC_ConfigChannel+0x416>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001dde:	2320      	movs	r3, #32
 8001de0:	e003      	b.n	8001dea <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d106      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2200      	movs	r2, #0
 8001df4:	2103      	movs	r1, #3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe ff0e 	bl	8000c18 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f88d 	bl	8000f20 <LL_ADC_IsEnabled>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f040 813d 	bne.w	8002088 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	6819      	ldr	r1, [r3, #0]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f7fe ffde 	bl	8000ddc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4aa2      	ldr	r2, [pc, #648]	; (80020b0 <HAL_ADC_ConfigChannel+0x6dc>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	f040 812e 	bne.w	8002088 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10b      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x480>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	0e9b      	lsrs	r3, r3, #26
 8001e42:	3301      	adds	r3, #1
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	2b09      	cmp	r3, #9
 8001e4a:	bf94      	ite	ls
 8001e4c:	2301      	movls	r3, #1
 8001e4e:	2300      	movhi	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	e019      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x4b4>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e64:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001e6c:	2320      	movs	r3, #32
 8001e6e:	e003      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001e70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	2b09      	cmp	r3, #9
 8001e80:	bf94      	ite	ls
 8001e82:	2301      	movls	r3, #1
 8001e84:	2300      	movhi	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d079      	beq.n	8001f80 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d107      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x4d4>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0e9b      	lsrs	r3, r3, #26
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	069b      	lsls	r3, r3, #26
 8001ea2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ea6:	e015      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x500>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eb8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	e003      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	3301      	adds	r3, #1
 8001ece:	069b      	lsls	r3, r3, #26
 8001ed0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d109      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x520>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	0e9b      	lsrs	r3, r3, #26
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	e017      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x550>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f04:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001f0c:	2320      	movs	r3, #32
 8001f0e:	e003      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	2101      	movs	r1, #1
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	ea42 0103 	orr.w	r1, r2, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10a      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x576>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0e9b      	lsrs	r3, r3, #26
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	051b      	lsls	r3, r3, #20
 8001f48:	e018      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x5a8>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001f62:	2320      	movs	r3, #32
 8001f64:	e003      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f68:	fab3 f383 	clz	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	e07e      	b.n	800207e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d107      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x5c8>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0e9b      	lsrs	r3, r3, #26
 8001f92:	3301      	adds	r3, #1
 8001f94:	069b      	lsls	r3, r3, #26
 8001f96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f9a:	e015      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x5f4>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa4:	fa93 f3a3 	rbit	r3, r3
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fac:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	e003      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	069b      	lsls	r3, r3, #26
 8001fc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x614>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0e9b      	lsrs	r3, r3, #26
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	e017      	b.n	8002018 <HAL_ADC_ConfigChannel+0x644>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	fa93 f3a3 	rbit	r3, r3
 8001ff4:	61fb      	str	r3, [r7, #28]
  return result;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002000:	2320      	movs	r3, #32
 8002002:	e003      	b.n	800200c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	3301      	adds	r3, #1
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	ea42 0103 	orr.w	r1, r2, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10d      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x670>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0e9b      	lsrs	r3, r3, #26
 800202e:	3301      	adds	r3, #1
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	3b1e      	subs	r3, #30
 800203c:	051b      	lsls	r3, r3, #20
 800203e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002042:	e01b      	b.n	800207c <HAL_ADC_ConfigChannel+0x6a8>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	613b      	str	r3, [r7, #16]
  return result;
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800205c:	2320      	movs	r3, #32
 800205e:	e003      	b.n	8002068 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	3301      	adds	r3, #1
 800206a:	f003 021f 	and.w	r2, r3, #31
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	3b1e      	subs	r3, #30
 8002076:	051b      	lsls	r3, r3, #20
 8002078:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800207c:	430b      	orrs	r3, r1
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	6892      	ldr	r2, [r2, #8]
 8002082:	4619      	mov	r1, r3
 8002084:	f7fe fe7e 	bl	8000d84 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_ADC_ConfigChannel+0x6e0>)
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80be 	beq.w	8002212 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800209e:	d004      	beq.n	80020aa <HAL_ADC_ConfigChannel+0x6d6>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <HAL_ADC_ConfigChannel+0x6e4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d10a      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x6ec>
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <HAL_ADC_ConfigChannel+0x6e8>)
 80020ac:	e009      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x6ee>
 80020ae:	bf00      	nop
 80020b0:	407f0000 	.word	0x407f0000
 80020b4:	80080000 	.word	0x80080000
 80020b8:	50000100 	.word	0x50000100
 80020bc:	50000300 	.word	0x50000300
 80020c0:	4b59      	ldr	r3, [pc, #356]	; (8002228 <HAL_ADC_ConfigChannel+0x854>)
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fd60 	bl	8000b88 <LL_ADC_GetCommonPathInternalCh>
 80020c8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a56      	ldr	r2, [pc, #344]	; (800222c <HAL_ADC_ConfigChannel+0x858>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d004      	beq.n	80020e0 <HAL_ADC_ConfigChannel+0x70c>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a55      	ldr	r2, [pc, #340]	; (8002230 <HAL_ADC_ConfigChannel+0x85c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d13a      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d134      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020f4:	d005      	beq.n	8002102 <HAL_ADC_ConfigChannel+0x72e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a4e      	ldr	r2, [pc, #312]	; (8002234 <HAL_ADC_ConfigChannel+0x860>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	f040 8085 	bne.w	800220c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800210a:	d004      	beq.n	8002116 <HAL_ADC_ConfigChannel+0x742>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a49      	ldr	r2, [pc, #292]	; (8002238 <HAL_ADC_ConfigChannel+0x864>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d101      	bne.n	800211a <HAL_ADC_ConfigChannel+0x746>
 8002116:	4a49      	ldr	r2, [pc, #292]	; (800223c <HAL_ADC_ConfigChannel+0x868>)
 8002118:	e000      	b.n	800211c <HAL_ADC_ConfigChannel+0x748>
 800211a:	4a43      	ldr	r2, [pc, #268]	; (8002228 <HAL_ADC_ConfigChannel+0x854>)
 800211c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002120:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002124:	4619      	mov	r1, r3
 8002126:	4610      	mov	r0, r2
 8002128:	f7fe fd1b 	bl	8000b62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800212c:	4b44      	ldr	r3, [pc, #272]	; (8002240 <HAL_ADC_ConfigChannel+0x86c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	099b      	lsrs	r3, r3, #6
 8002132:	4a44      	ldr	r2, [pc, #272]	; (8002244 <HAL_ADC_ConfigChannel+0x870>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	099b      	lsrs	r3, r3, #6
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002146:	e002      	b.n	800214e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3b01      	subs	r3, #1
 800214c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f9      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002154:	e05a      	b.n	800220c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a3b      	ldr	r2, [pc, #236]	; (8002248 <HAL_ADC_ConfigChannel+0x874>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d125      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x7d8>
 8002160:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d11f      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a31      	ldr	r2, [pc, #196]	; (8002238 <HAL_ADC_ConfigChannel+0x864>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d104      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x7ac>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a34      	ldr	r2, [pc, #208]	; (800224c <HAL_ADC_ConfigChannel+0x878>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d047      	beq.n	8002210 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002188:	d004      	beq.n	8002194 <HAL_ADC_ConfigChannel+0x7c0>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a2a      	ldr	r2, [pc, #168]	; (8002238 <HAL_ADC_ConfigChannel+0x864>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d101      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x7c4>
 8002194:	4a29      	ldr	r2, [pc, #164]	; (800223c <HAL_ADC_ConfigChannel+0x868>)
 8002196:	e000      	b.n	800219a <HAL_ADC_ConfigChannel+0x7c6>
 8002198:	4a23      	ldr	r2, [pc, #140]	; (8002228 <HAL_ADC_ConfigChannel+0x854>)
 800219a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800219e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a2:	4619      	mov	r1, r3
 80021a4:	4610      	mov	r0, r2
 80021a6:	f7fe fcdc 	bl	8000b62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021aa:	e031      	b.n	8002210 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a27      	ldr	r2, [pc, #156]	; (8002250 <HAL_ADC_ConfigChannel+0x87c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d12d      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d127      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <HAL_ADC_ConfigChannel+0x864>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d022      	beq.n	8002212 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021d4:	d004      	beq.n	80021e0 <HAL_ADC_ConfigChannel+0x80c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a17      	ldr	r2, [pc, #92]	; (8002238 <HAL_ADC_ConfigChannel+0x864>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x810>
 80021e0:	4a16      	ldr	r2, [pc, #88]	; (800223c <HAL_ADC_ConfigChannel+0x868>)
 80021e2:	e000      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x812>
 80021e4:	4a10      	ldr	r2, [pc, #64]	; (8002228 <HAL_ADC_ConfigChannel+0x854>)
 80021e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021ee:	4619      	mov	r1, r3
 80021f0:	4610      	mov	r0, r2
 80021f2:	f7fe fcb6 	bl	8000b62 <LL_ADC_SetCommonPathInternalCh>
 80021f6:	e00c      	b.n	8002212 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fc:	f043 0220 	orr.w	r2, r3, #32
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800220a:	e002      	b.n	8002212 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800220c:	bf00      	nop
 800220e:	e000      	b.n	8002212 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002210:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800221a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800221e:	4618      	mov	r0, r3
 8002220:	37d8      	adds	r7, #216	; 0xd8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	50000700 	.word	0x50000700
 800222c:	c3210000 	.word	0xc3210000
 8002230:	90c00010 	.word	0x90c00010
 8002234:	50000600 	.word	0x50000600
 8002238:	50000100 	.word	0x50000100
 800223c:	50000300 	.word	0x50000300
 8002240:	2000002c 	.word	0x2000002c
 8002244:	053e2d63 	.word	0x053e2d63
 8002248:	c7520000 	.word	0xc7520000
 800224c:	50000500 	.word	0x50000500
 8002250:	cb840000 	.word	0xcb840000

08002254 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fe5d 	bl	8000f20 <LL_ADC_IsEnabled>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d14d      	bne.n	8002308 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	4b28      	ldr	r3, [pc, #160]	; (8002314 <ADC_Enable+0xc0>)
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227e:	f043 0210 	orr.w	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e039      	b.n	800230a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fe2c 	bl	8000ef8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80022a0:	f7fe fbd2 	bl	8000a48 <HAL_GetTick>
 80022a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022a6:	e028      	b.n	80022fa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe fe37 	bl	8000f20 <LL_ADC_IsEnabled>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d104      	bne.n	80022c2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe fe1b 	bl	8000ef8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022c2:	f7fe fbc1 	bl	8000a48 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d914      	bls.n	80022fa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d00d      	beq.n	80022fa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e2:	f043 0210 	orr.w	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ee:	f043 0201 	orr.w	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e007      	b.n	800230a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d1cf      	bne.n	80022a8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	8000003f 	.word	0x8000003f

08002318 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800232e:	2b00      	cmp	r3, #0
 8002330:	d14b      	bne.n	80023ca <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d021      	beq.n	8002390 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe fcc5 	bl	8000ce0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d032      	beq.n	80023c2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d12b      	bne.n	80023c2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d11f      	bne.n	80023c2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002386:	f043 0201 	orr.w	r2, r3, #1
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	65da      	str	r2, [r3, #92]	; 0x5c
 800238e:	e018      	b.n	80023c2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d111      	bne.n	80023c2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d105      	bne.n	80023c2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ba:	f043 0201 	orr.w	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f006 f8fc 	bl	80085c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023c8:	e00e      	b.n	80023e8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f7ff faf2 	bl	80019c0 <HAL_ADC_ErrorCallback>
}
 80023dc:	e004      	b.n	80023e8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f006 f924 	bl	800864c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242a:	f043 0204 	orr.w	r2, r3, #4
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f7ff fac4 	bl	80019c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c0:	4013      	ands	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d6:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	60d3      	str	r3, [r2, #12]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <__NVIC_GetPriorityGrouping+0x18>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	f003 0307 	and.w	r3, r3, #7
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	2b00      	cmp	r3, #0
 8002518:	db0b      	blt.n	8002532 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	f003 021f 	and.w	r2, r3, #31
 8002520:	4907      	ldr	r1, [pc, #28]	; (8002540 <__NVIC_EnableIRQ+0x38>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2001      	movs	r0, #1
 800252a:	fa00 f202 	lsl.w	r2, r0, r2
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000e100 	.word	0xe000e100

08002544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002554:	2b00      	cmp	r3, #0
 8002556:	db0a      	blt.n	800256e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	490c      	ldr	r1, [pc, #48]	; (8002590 <__NVIC_SetPriority+0x4c>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	0112      	lsls	r2, r2, #4
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	440b      	add	r3, r1
 8002568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800256c:	e00a      	b.n	8002584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4908      	ldr	r1, [pc, #32]	; (8002594 <__NVIC_SetPriority+0x50>)
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	3b04      	subs	r3, #4
 800257c:	0112      	lsls	r2, r2, #4
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	440b      	add	r3, r1
 8002582:	761a      	strb	r2, [r3, #24]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000e100 	.word	0xe000e100
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f1c3 0307 	rsb	r3, r3, #7
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	bf28      	it	cs
 80025b6:	2304      	movcs	r3, #4
 80025b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3304      	adds	r3, #4
 80025be:	2b06      	cmp	r3, #6
 80025c0:	d902      	bls.n	80025c8 <NVIC_EncodePriority+0x30>
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3b03      	subs	r3, #3
 80025c6:	e000      	b.n	80025ca <NVIC_EncodePriority+0x32>
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	401a      	ands	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43d9      	mvns	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	4313      	orrs	r3, r2
         );
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	; 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ff4c 	bl	80024a4 <__NVIC_SetPriorityGrouping>
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002622:	f7ff ff63 	bl	80024ec <__NVIC_GetPriorityGrouping>
 8002626:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	68b9      	ldr	r1, [r7, #8]
 800262c:	6978      	ldr	r0, [r7, #20]
 800262e:	f7ff ffb3 	bl	8002598 <NVIC_EncodePriority>
 8002632:	4602      	mov	r2, r0
 8002634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff82 	bl	8002544 <__NVIC_SetPriority>
}
 8002640:	bf00      	nop
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ff56 	bl	8002508 <__NVIC_EnableIRQ>
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e014      	b.n	80026a0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	791b      	ldrb	r3, [r3, #4]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d105      	bne.n	800268c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f005 fcaa 	bl	8007fe0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	795b      	ldrb	r3, [r3, #5]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_DAC_Start+0x16>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e043      	b.n	8002746 <HAL_DAC_Start+0x9e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6819      	ldr	r1, [r3, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2201      	movs	r2, #1
 80026d8:	409a      	lsls	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80026e2:	2001      	movs	r0, #1
 80026e4:	f7fe f9bc 	bl	8000a60 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10f      	bne.n	800270e <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d11d      	bne.n	8002738 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	e014      	b.n	8002738 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2102      	movs	r1, #2
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	429a      	cmp	r2, r3
 8002726:	d107      	bne.n	8002738 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0202 	orr.w	r2, r2, #2
 8002736:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800274e:	b480      	push	{r7}
 8002750:	b087      	sub	sp, #28
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d105      	bne.n	800277e <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4413      	add	r3, r2
 8002778:	3308      	adds	r3, #8
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e004      	b.n	8002788 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4413      	add	r3, r2
 8002784:	3314      	adds	r3, #20
 8002786:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	461a      	mov	r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	795b      	ldrb	r3, [r3, #5]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_DAC_ConfigChannel+0x18>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e190      	b.n	8002ada <HAL_DAC_ConfigChannel+0x33a>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2202      	movs	r2, #2
 80027c2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d174      	bne.n	80028b6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80027cc:	f7fe f93c 	bl	8000a48 <HAL_GetTick>
 80027d0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d134      	bne.n	8002842 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80027d8:	e011      	b.n	80027fe <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80027da:	f7fe f935 	bl	8000a48 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d90a      	bls.n	80027fe <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	f043 0208 	orr.w	r2, r3, #8
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2203      	movs	r2, #3
 80027f8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e16d      	b.n	8002ada <HAL_DAC_ConfigChannel+0x33a>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1e6      	bne.n	80027da <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800280c:	2001      	movs	r0, #1
 800280e:	f7fe f927 	bl	8000a60 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800281a:	641a      	str	r2, [r3, #64]	; 0x40
 800281c:	e01e      	b.n	800285c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800281e:	f7fe f913 	bl	8000a48 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d90a      	bls.n	8002842 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f043 0208 	orr.w	r2, r3, #8
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2203      	movs	r2, #3
 800283c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e14b      	b.n	8002ada <HAL_DAC_ConfigChannel+0x33a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002848:	2b00      	cmp	r3, #0
 800284a:	dbe8      	blt.n	800281e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800284c:	2001      	movs	r0, #1
 800284e:	f7fe f907 	bl	8000a60 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800285a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	ea02 0103 	and.w	r1, r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	409a      	lsls	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	21ff      	movs	r1, #255	; 0xff
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	ea02 0103 	and.w	r1, r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	409a      	lsls	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d11d      	bne.n	80028fa <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	221f      	movs	r2, #31
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d6:	4013      	ands	r3, r2
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ee:	4313      	orrs	r3, r2
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2207      	movs	r2, #7
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002912:	4013      	ands	r3, r2
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d102      	bne.n	8002924 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
 8002922:	e00f      	b.n	8002944 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d102      	bne.n	8002932 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800292c:	2301      	movs	r3, #1
 800292e:	623b      	str	r3, [r7, #32]
 8002930:	e008      	b.n	8002944 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d102      	bne.n	8002940 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800293a:	2301      	movs	r3, #1
 800293c:	623b      	str	r3, [r7, #32]
 800293e:	e001      	b.n	8002944 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002940:	2300      	movs	r3, #0
 8002942:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	6a3a      	ldr	r2, [r7, #32]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002966:	4013      	ands	r3, r2
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	791b      	ldrb	r3, [r3, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d102      	bne.n	8002978 <HAL_DAC_ConfigChannel+0x1d8>
 8002972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002976:	e000      	b.n	800297a <HAL_DAC_ConfigChannel+0x1da>
 8002978:	2300      	movs	r3, #0
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002992:	4013      	ands	r3, r2
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	795b      	ldrb	r3, [r3, #5]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d102      	bne.n	80029a4 <HAL_DAC_ConfigChannel+0x204>
 800299e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029a2:	e000      	b.n	80029a6 <HAL_DAC_ConfigChannel+0x206>
 80029a4:	2300      	movs	r3, #0
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d114      	bne.n	80029e6 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80029bc:	f002 fdc2 	bl	8005544 <HAL_RCC_GetHCLKFreq>
 80029c0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	4a47      	ldr	r2, [pc, #284]	; (8002ae4 <HAL_DAC_ConfigChannel+0x344>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d904      	bls.n	80029d4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
 80029d2:	e00d      	b.n	80029f0 <HAL_DAC_ConfigChannel+0x250>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	4a44      	ldr	r2, [pc, #272]	; (8002ae8 <HAL_DAC_ConfigChannel+0x348>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d909      	bls.n	80029f0 <HAL_DAC_ConfigChannel+0x250>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
 80029e4:	e004      	b.n	80029f0 <HAL_DAC_ConfigChannel+0x250>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ec:	4313      	orrs	r3, r2
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fe:	4313      	orrs	r3, r2
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	400a      	ands	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a42:	4013      	ands	r3, r2
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a64:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6819      	ldr	r1, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	22c0      	movs	r2, #192	; 0xc0
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	400a      	ands	r2, r1
 8002a80:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	f640 710f 	movw	r1, #3855	; 0xf0f
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	ea02 0103 	and.w	r1, r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3728      	adds	r7, #40	; 0x28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	09896800 	.word	0x09896800
 8002ae8:	04c4b400 	.word	0x04c4b400

08002aec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e08d      	b.n	8002c1a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b47      	ldr	r3, [pc, #284]	; (8002c24 <HAL_DMA_Init+0x138>)
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d80f      	bhi.n	8002b2a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b45      	ldr	r3, [pc, #276]	; (8002c28 <HAL_DMA_Init+0x13c>)
 8002b12:	4413      	add	r3, r2
 8002b14:	4a45      	ldr	r2, [pc, #276]	; (8002c2c <HAL_DMA_Init+0x140>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	091b      	lsrs	r3, r3, #4
 8002b1c:	009a      	lsls	r2, r3, #2
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a42      	ldr	r2, [pc, #264]	; (8002c30 <HAL_DMA_Init+0x144>)
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40
 8002b28:	e00e      	b.n	8002b48 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4b40      	ldr	r3, [pc, #256]	; (8002c34 <HAL_DMA_Init+0x148>)
 8002b32:	4413      	add	r3, r2
 8002b34:	4a3d      	ldr	r2, [pc, #244]	; (8002c2c <HAL_DMA_Init+0x140>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	009a      	lsls	r2, r3, #2
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a3c      	ldr	r2, [pc, #240]	; (8002c38 <HAL_DMA_Init+0x14c>)
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f9b6 	bl	8002f0c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ba8:	d102      	bne.n	8002bb0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bc4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d010      	beq.n	8002bf0 <HAL_DMA_Init+0x104>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d80c      	bhi.n	8002bf0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f9d6 	bl	8002f88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	e008      	b.n	8002c02 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40020407 	.word	0x40020407
 8002c28:	bffdfff8 	.word	0xbffdfff8
 8002c2c:	cccccccd 	.word	0xcccccccd
 8002c30:	40020000 	.word	0x40020000
 8002c34:	bffdfbf8 	.word	0xbffdfbf8
 8002c38:	40020400 	.word	0x40020400

08002c3c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_DMA_Start_IT+0x20>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e066      	b.n	8002d2a <HAL_DMA_Start_IT+0xee>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d155      	bne.n	8002d1c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0201 	bic.w	r2, r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f8fb 	bl	8002e90 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d008      	beq.n	8002cb4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 020e 	orr.w	r2, r2, #14
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	e00f      	b.n	8002cd4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0204 	bic.w	r2, r2, #4
 8002cc2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 020a 	orr.w	r2, r2, #10
 8002cd2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d007      	beq.n	8002d0a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d08:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0201 	orr.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e005      	b.n	8002d28 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d24:	2302      	movs	r3, #2
 8002d26:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	2204      	movs	r2, #4
 8002d54:	409a      	lsls	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d026      	beq.n	8002dac <HAL_DMA_IRQHandler+0x7a>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d021      	beq.n	8002dac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d107      	bne.n	8002d86 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0204 	bic.w	r2, r2, #4
 8002d84:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f003 021f 	and.w	r2, r3, #31
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	2104      	movs	r1, #4
 8002d94:	fa01 f202 	lsl.w	r2, r1, r2
 8002d98:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d071      	beq.n	8002e86 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002daa:	e06c      	b.n	8002e86 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	2202      	movs	r2, #2
 8002db6:	409a      	lsls	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d02e      	beq.n	8002e1e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d029      	beq.n	8002e1e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10b      	bne.n	8002df0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 020a 	bic.w	r2, r2, #10
 8002de6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df4:	f003 021f 	and.w	r2, r3, #31
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002e02:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d038      	beq.n	8002e86 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002e1c:	e033      	b.n	8002e86 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	2208      	movs	r2, #8
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d02a      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d025      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 020e 	bic.w	r2, r2, #14
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e50:	f003 021f 	and.w	r2, r3, #31
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d004      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e86:	bf00      	nop
 8002e88:	bf00      	nop
}
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ea6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002eb8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	f003 021f 	and.w	r2, r3, #31
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ecc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d108      	bne.n	8002ef0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002eee:	e007      	b.n	8002f00 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	60da      	str	r2, [r3, #12]
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d802      	bhi.n	8002f26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	e001      	b.n	8002f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002f28:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	3b08      	subs	r3, #8
 8002f36:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	009a      	lsls	r2, r3, #2
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a0b      	ldr	r2, [pc, #44]	; (8002f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002f56:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	2201      	movs	r2, #1
 8002f60:	409a      	lsls	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40020407 	.word	0x40020407
 8002f78:	40020800 	.word	0x40020800
 8002f7c:	40020820 	.word	0x40020820
 8002f80:	cccccccd 	.word	0xcccccccd
 8002f84:	40020880 	.word	0x40020880

08002f88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a08      	ldr	r2, [pc, #32]	; (8002fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002faa:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	1000823f 	.word	0x1000823f
 8002fcc:	40020940 	.word	0x40020940

08002fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fde:	e15a      	b.n	8003296 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fec:	4013      	ands	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 814c 	beq.w	8003290 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d00b      	beq.n	8003018 <HAL_GPIO_Init+0x48>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d007      	beq.n	8003018 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800300c:	2b11      	cmp	r3, #17
 800300e:	d003      	beq.n	8003018 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b12      	cmp	r3, #18
 8003016:	d130      	bne.n	800307a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	2203      	movs	r2, #3
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800304e:	2201      	movs	r2, #1
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4013      	ands	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	f003 0201 	and.w	r2, r3, #1
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	2203      	movs	r2, #3
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4013      	ands	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0xea>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b12      	cmp	r3, #18
 80030b8:	d123      	bne.n	8003102 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	08da      	lsrs	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3208      	adds	r2, #8
 80030c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	220f      	movs	r2, #15
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4013      	ands	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	08da      	lsrs	r2, r3, #3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3208      	adds	r2, #8
 80030fc:	6939      	ldr	r1, [r7, #16]
 80030fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	2203      	movs	r2, #3
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4013      	ands	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0203 	and.w	r2, r3, #3
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80a6 	beq.w	8003290 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003144:	4b5b      	ldr	r3, [pc, #364]	; (80032b4 <HAL_GPIO_Init+0x2e4>)
 8003146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003148:	4a5a      	ldr	r2, [pc, #360]	; (80032b4 <HAL_GPIO_Init+0x2e4>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	6613      	str	r3, [r2, #96]	; 0x60
 8003150:	4b58      	ldr	r3, [pc, #352]	; (80032b4 <HAL_GPIO_Init+0x2e4>)
 8003152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800315c:	4a56      	ldr	r2, [pc, #344]	; (80032b8 <HAL_GPIO_Init+0x2e8>)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	089b      	lsrs	r3, r3, #2
 8003162:	3302      	adds	r3, #2
 8003164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	220f      	movs	r2, #15
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003186:	d01f      	beq.n	80031c8 <HAL_GPIO_Init+0x1f8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a4c      	ldr	r2, [pc, #304]	; (80032bc <HAL_GPIO_Init+0x2ec>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d019      	beq.n	80031c4 <HAL_GPIO_Init+0x1f4>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a4b      	ldr	r2, [pc, #300]	; (80032c0 <HAL_GPIO_Init+0x2f0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d013      	beq.n	80031c0 <HAL_GPIO_Init+0x1f0>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a4a      	ldr	r2, [pc, #296]	; (80032c4 <HAL_GPIO_Init+0x2f4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00d      	beq.n	80031bc <HAL_GPIO_Init+0x1ec>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a49      	ldr	r2, [pc, #292]	; (80032c8 <HAL_GPIO_Init+0x2f8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d007      	beq.n	80031b8 <HAL_GPIO_Init+0x1e8>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a48      	ldr	r2, [pc, #288]	; (80032cc <HAL_GPIO_Init+0x2fc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d101      	bne.n	80031b4 <HAL_GPIO_Init+0x1e4>
 80031b0:	2305      	movs	r3, #5
 80031b2:	e00a      	b.n	80031ca <HAL_GPIO_Init+0x1fa>
 80031b4:	2306      	movs	r3, #6
 80031b6:	e008      	b.n	80031ca <HAL_GPIO_Init+0x1fa>
 80031b8:	2304      	movs	r3, #4
 80031ba:	e006      	b.n	80031ca <HAL_GPIO_Init+0x1fa>
 80031bc:	2303      	movs	r3, #3
 80031be:	e004      	b.n	80031ca <HAL_GPIO_Init+0x1fa>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e002      	b.n	80031ca <HAL_GPIO_Init+0x1fa>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_GPIO_Init+0x1fa>
 80031c8:	2300      	movs	r3, #0
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	f002 0203 	and.w	r2, r2, #3
 80031d0:	0092      	lsls	r2, r2, #2
 80031d2:	4093      	lsls	r3, r2
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031da:	4937      	ldr	r1, [pc, #220]	; (80032b8 <HAL_GPIO_Init+0x2e8>)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	3302      	adds	r3, #2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031e8:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <HAL_GPIO_Init+0x300>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800320c:	4a30      	ldr	r2, [pc, #192]	; (80032d0 <HAL_GPIO_Init+0x300>)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003212:	4b2f      	ldr	r3, [pc, #188]	; (80032d0 <HAL_GPIO_Init+0x300>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	43db      	mvns	r3, r3
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003236:	4a26      	ldr	r2, [pc, #152]	; (80032d0 <HAL_GPIO_Init+0x300>)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800323c:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <HAL_GPIO_Init+0x300>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	43db      	mvns	r3, r3
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4013      	ands	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003260:	4a1b      	ldr	r2, [pc, #108]	; (80032d0 <HAL_GPIO_Init+0x300>)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <HAL_GPIO_Init+0x300>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	43db      	mvns	r3, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800328a:	4a11      	ldr	r2, [pc, #68]	; (80032d0 <HAL_GPIO_Init+0x300>)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	3301      	adds	r3, #1
 8003294:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f47f ae9d 	bne.w	8002fe0 <HAL_GPIO_Init+0x10>
  }
}
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40010000 	.word	0x40010000
 80032bc:	48000400 	.word	0x48000400
 80032c0:	48000800 	.word	0x48000800
 80032c4:	48000c00 	.word	0x48000c00
 80032c8:	48001000 	.word	0x48001000
 80032cc:	48001400 	.word	0x48001400
 80032d0:	40010400 	.word	0x40010400

080032d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	807b      	strh	r3, [r7, #2]
 80032e0:	4613      	mov	r3, r2
 80032e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032e4:	787b      	ldrb	r3, [r7, #1]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032ea:	887a      	ldrh	r2, [r7, #2]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032f0:	e002      	b.n	80032f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032f2:	887a      	ldrh	r2, [r7, #2]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003316:	887a      	ldrh	r2, [r7, #2]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4013      	ands	r3, r2
 800331c:	041a      	lsls	r2, r3, #16
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	43d9      	mvns	r1, r3
 8003322:	887b      	ldrh	r3, [r7, #2]
 8003324:	400b      	ands	r3, r1
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	619a      	str	r2, [r3, #24]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e0be      	b.n	80034c8 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d02e      	beq.n	80033f4 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a4d      	ldr	r2, [pc, #308]	; (80034d0 <HAL_HRTIM_Init+0x198>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d10b      	bne.n	80033b8 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80033a0:	4b4c      	ldr	r3, [pc, #304]	; (80034d4 <HAL_HRTIM_Init+0x19c>)
 80033a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a4:	4a4b      	ldr	r2, [pc, #300]	; (80034d4 <HAL_HRTIM_Init+0x19c>)
 80033a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033aa:	6613      	str	r3, [r2, #96]	; 0x60
 80033ac:	4b49      	ldr	r3, [pc, #292]	; (80034d4 <HAL_HRTIM_Init+0x19c>)
 80033ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033c6:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033dc:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f004 fe31 	bl	800805c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d012      	beq.n	800342c <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003414:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800343c:	2300      	movs	r3, #0
 800343e:	75fb      	strb	r3, [r7, #23]
 8003440:	e03e      	b.n	80034c0 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8003442:	7dfa      	ldrb	r2, [r7, #23]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	3318      	adds	r3, #24
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8003456:	7dfa      	ldrb	r2, [r7, #23]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	331c      	adds	r3, #28
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800346a:	7dfa      	ldrb	r2, [r7, #23]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	3320      	adds	r3, #32
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800347e:	7dfa      	ldrb	r2, [r7, #23]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	3324      	adds	r3, #36	; 0x24
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8003492:	7dfa      	ldrb	r2, [r7, #23]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	3328      	adds	r3, #40	; 0x28
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80034a6:	7dfa      	ldrb	r2, [r7, #23]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	3330      	adds	r3, #48	; 0x30
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
 80034bc:	3301      	adds	r3, #1
 80034be:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80034c0:	7dfb      	ldrb	r3, [r7, #23]
 80034c2:	2b06      	cmp	r3, #6
 80034c4:	d9bd      	bls.n	8003442 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40016800 	.word	0x40016800
 80034d4:	40021000 	.word	0x40021000

080034d8 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_HRTIM_DLLCalibrationStart+0x18>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e045      	b.n	800357c <HAL_HRTIM_DLLCalibrationStart+0xa4>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003506:	d114      	bne.n	8003532 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0202 	bic.w	r2, r2, #2
 8003518:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8003530:	e01f      	b.n	8003572 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0202 	orr.w	r2, r2, #2
 8003542:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800354e:	f023 010c 	bic.w	r1, r3, #12
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8003592:	f7fd fa59 	bl	8000a48 <HAL_GetTick>
 8003596:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8003598:	e014      	b.n	80035c4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035a0:	d010      	beq.n	80035c4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80035a2:	f7fd fa51 	bl	8000a48 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <HAL_HRTIM_PollForDLLCalibration+0x30>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d105      	bne.n	80035c4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2207      	movs	r2, #7
 80035bc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e011      	b.n	80035e8 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80035cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d4:	d1e1      	bne.n	800359a <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d101      	bne.n	800360c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8003608:	2302      	movs	r3, #2
 800360a:	e015      	b.n	8003638 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b06      	cmp	r3, #6
 8003618:	d104      	bne.n	8003624 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 fdfa 	bl	8004216 <HRTIM_MasterBase_Config>
 8003622:	e004      	b.n	800362e <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 fe23 	bl	8004274 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_HRTIM_SimpleBaseStart>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_SimpleBaseStart(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_HRTIM_SimpleBaseStart+0x18>
 8003654:	2302      	movs	r3, #2
 8003656:	e01b      	b.n	8003690 <HAL_HRTIM_SimpleBaseStart+0x50>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, TimerIdxToTimerId[TimerIdx]);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6819      	ldr	r1, [r3, #0]
 800366e:	4a0b      	ldr	r2, [pc, #44]	; (800369c <HAL_HRTIM_SimpleBaseStart+0x5c>)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	20000008 	.word	0x20000008

080036a0 <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d101      	bne.n	80036bc <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
     return HAL_BUSY;
 80036b8:	2302      	movs	r3, #2
 80036ba:	e18c      	b.n	80039d6 <HAL_HRTIM_ADCTriggerConfig+0x336>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_HRTIM_ADCTriggerConfig+0x2a>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e185      	b.n	80039d6 <HAL_HRTIM_ADCTriggerConfig+0x336>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2202      	movs	r2, #2
 80036d6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80036e2:	617b      	str	r3, [r7, #20]
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80036ec:	613b      	str	r3, [r7, #16]

  switch (ADCTrigger)
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d06c      	beq.n	80037ce <HAL_HRTIM_ADCTriggerConfig+0x12e>
 80036f4:	2b10      	cmp	r3, #16
 80036f6:	d80b      	bhi.n	8003710 <HAL_HRTIM_ADCTriggerConfig+0x70>
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d02f      	beq.n	800375c <HAL_HRTIM_ADCTriggerConfig+0xbc>
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d802      	bhi.n	8003706 <HAL_HRTIM_ADCTriggerConfig+0x66>
 8003700:	2b01      	cmp	r3, #1
 8003702:	d019      	beq.n	8003738 <HAL_HRTIM_ADCTriggerConfig+0x98>
 8003704:	e13f      	b.n	8003986 <HAL_HRTIM_ADCTriggerConfig+0x2e6>
 8003706:	2b04      	cmp	r3, #4
 8003708:	d03b      	beq.n	8003782 <HAL_HRTIM_ADCTriggerConfig+0xe2>
 800370a:	2b08      	cmp	r3, #8
 800370c:	d04c      	beq.n	80037a8 <HAL_HRTIM_ADCTriggerConfig+0x108>
 800370e:	e13a      	b.n	8003986 <HAL_HRTIM_ADCTriggerConfig+0x2e6>
 8003710:	2b80      	cmp	r3, #128	; 0x80
 8003712:	f000 80ca 	beq.w	80038aa <HAL_HRTIM_ADCTriggerConfig+0x20a>
 8003716:	2b80      	cmp	r3, #128	; 0x80
 8003718:	d805      	bhi.n	8003726 <HAL_HRTIM_ADCTriggerConfig+0x86>
 800371a:	2b20      	cmp	r3, #32
 800371c:	d07b      	beq.n	8003816 <HAL_HRTIM_ADCTriggerConfig+0x176>
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	f000 809e 	beq.w	8003860 <HAL_HRTIM_ADCTriggerConfig+0x1c0>
 8003724:	e12f      	b.n	8003986 <HAL_HRTIM_ADCTriggerConfig+0x2e6>
 8003726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372a:	f000 80e3 	beq.w	80038f4 <HAL_HRTIM_ADCTriggerConfig+0x254>
 800372e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003732:	f000 8103 	beq.w	800393c <HAL_HRTIM_ADCTriggerConfig+0x29c>
 8003736:	e126      	b.n	8003986 <HAL_HRTIM_ADCTriggerConfig+0x2e6>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800373e:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6852      	ldr	r2, [r2, #4]
 8003756:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
      break;
 800375a:	e11d      	b.n	8003998 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8003762:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6852      	ldr	r2, [r2, #4]
 800377c:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
      break;
 8003780:	e10a      	b.n	8003998 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003788:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	019b      	lsls	r3, r3, #6
 8003790:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6852      	ldr	r2, [r2, #4]
 80037a2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
      break;
 80037a6:	e0f7      	b.n	8003998 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80037ae:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	025b      	lsls	r3, r3, #9
 80037b6:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6852      	ldr	r2, [r2, #4]
 80037c8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
      break;
 80037cc:	e0e4      	b.n	8003998 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD5USRC);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f023 0307 	bic.w	r3, r3, #7
 80037d4:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	0c1b      	lsrs	r3, r3, #16
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 5 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 021f 	bic.w	r2, r2, #31
 80037f6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 021f 	and.w	r2, r3, #31
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8003814:	e0c0      	b.n	8003998 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381c:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	0b1b      	lsrs	r3, r3, #12
 8003824:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 6 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 7278 	bic.w	r2, r2, #992	; 0x3e0
 800383e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	015b      	lsls	r3, r3, #5
 8003850:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 800385e:	e09b      	b.n	8003998 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003866:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	0a1b      	lsrs	r3, r3, #8
 800386e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 7 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003888:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	029b      	lsls	r3, r3, #10
 800389a:	f403 42f8 	and.w	r2, r3, #31744	; 0x7c00
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 80038a8:	e076      	b.n	8003998 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038b0:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 8 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80038d2:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	041b      	lsls	r3, r3, #16
 80038e4:	f403 12f8 	and.w	r2, r3, #2031616	; 0x1f0000
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 80038f2:	e051      	b.n	8003998 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80038fa:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 9 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 7278 	bic.w	r2, r2, #65011712	; 0x3e00000
 800391a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	055b      	lsls	r3, r3, #21
 800392c:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 800393a:	e02d      	b.n	8003998 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003942:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 10 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8003964:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	069b      	lsls	r3, r3, #26
 8003976:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8003984:	e008      	b.n	8003998 <HAL_HRTIM_ADCTriggerConfig+0x2f8>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2207      	movs	r2, #7
 800398a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8003996:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b07      	cmp	r3, #7
 80039a2:	d101      	bne.n	80039a8 <HAL_HRTIM_ADCTriggerConfig+0x308>
  {
     return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e016      	b.n	80039d6 <HAL_HRTIM_ADCTriggerConfig+0x336>
  }

  /* Update the HRTIM registers */
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b0f      	cmp	r3, #15
 80039ac:	d805      	bhi.n	80039ba <HAL_HRTIM_ADCTriggerConfig+0x31a>
  {
   hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
 80039b8:	e004      	b.n	80039c4 <HAL_HRTIM_ADCTriggerConfig+0x324>
  }
  else
  {
   hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_HRTIM_ADCPostScalerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCPostScalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             uint32_t Postscaler)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b085      	sub	sp, #20
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d101      	bne.n	80039fe <HAL_HRTIM_ADCPostScalerConfig+0x1c>
  {
     return HAL_BUSY;
 80039fa:	2302      	movs	r3, #2
 80039fc:	e0e9      	b.n	8003bd2 <HAL_HRTIM_ADCPostScalerConfig+0x1f0>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_HRTIM_ADCPostScalerConfig+0x2a>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e0e2      	b.n	8003bd2 <HAL_HRTIM_ADCPostScalerConfig+0x1f0>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (ADCTrigger)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b10      	cmp	r3, #16
 8003a20:	d05e      	beq.n	8003ae0 <HAL_HRTIM_ADCPostScalerConfig+0xfe>
 8003a22:	2b10      	cmp	r3, #16
 8003a24:	d80b      	bhi.n	8003a3e <HAL_HRTIM_ADCPostScalerConfig+0x5c>
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d02a      	beq.n	8003a80 <HAL_HRTIM_ADCPostScalerConfig+0x9e>
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d802      	bhi.n	8003a34 <HAL_HRTIM_ADCPostScalerConfig+0x52>
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d017      	beq.n	8003a62 <HAL_HRTIM_ADCPostScalerConfig+0x80>
 8003a32:	e0b4      	b.n	8003b9e <HAL_HRTIM_ADCPostScalerConfig+0x1bc>
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d033      	beq.n	8003aa0 <HAL_HRTIM_ADCPostScalerConfig+0xbe>
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d041      	beq.n	8003ac0 <HAL_HRTIM_ADCPostScalerConfig+0xde>
 8003a3c:	e0af      	b.n	8003b9e <HAL_HRTIM_ADCPostScalerConfig+0x1bc>
 8003a3e:	2b80      	cmp	r3, #128	; 0x80
 8003a40:	d07d      	beq.n	8003b3e <HAL_HRTIM_ADCPostScalerConfig+0x15c>
 8003a42:	2b80      	cmp	r3, #128	; 0x80
 8003a44:	d804      	bhi.n	8003a50 <HAL_HRTIM_ADCPostScalerConfig+0x6e>
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d05a      	beq.n	8003b00 <HAL_HRTIM_ADCPostScalerConfig+0x11e>
 8003a4a:	2b40      	cmp	r3, #64	; 0x40
 8003a4c:	d067      	beq.n	8003b1e <HAL_HRTIM_ADCPostScalerConfig+0x13c>
 8003a4e:	e0a6      	b.n	8003b9e <HAL_HRTIM_ADCPostScalerConfig+0x1bc>
 8003a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a54:	f000 8083 	beq.w	8003b5e <HAL_HRTIM_ADCPostScalerConfig+0x17c>
 8003a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a5c:	f000 808f 	beq.w	8003b7e <HAL_HRTIM_ADCPostScalerConfig+0x19c>
 8003a60:	e09d      	b.n	8003b9e <HAL_HRTIM_ADCPostScalerConfig+0x1bc>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003a6a:	f023 011f 	bic.w	r1, r3, #31
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f003 021f 	and.w	r2, r3, #31
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8003a7e:	e097      	b.n	8003bb0 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003a88:	f423 61f8 	bic.w	r1, r3, #1984	; 0x7c0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	019b      	lsls	r3, r3, #6
 8003a90:	f403 62f8 	and.w	r2, r3, #1984	; 0x7c0
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8003a9e:	e087      	b.n	8003bb0 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003aa8:	f423 31f8 	bic.w	r1, r3, #126976	; 0x1f000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	031b      	lsls	r3, r3, #12
 8003ab0:	f403 32f8 	and.w	r2, r3, #126976	; 0x1f000
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8003abe:	e077      	b.n	8003bb0 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003ac8:	f423 01f8 	bic.w	r1, r3, #8126464	; 0x7c0000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	049b      	lsls	r3, r3, #18
 8003ad0:	f403 02f8 	and.w	r2, r3, #8126464	; 0x7c0000
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8003ade:	e067      	b.n	8003bb0 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003ae8:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	061b      	lsls	r3, r3, #24
 8003af0:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8003afe:	e057      	b.n	8003bb0 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003b08:	f023 011f 	bic.w	r1, r3, #31
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f003 021f 	and.w	r2, r3, #31
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8003b1c:	e048      	b.n	8003bb0 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003b26:	f423 61f8 	bic.w	r1, r3, #1984	; 0x7c0
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	019b      	lsls	r3, r3, #6
 8003b2e:	f403 62f8 	and.w	r2, r3, #1984	; 0x7c0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8003b3c:	e038      	b.n	8003bb0 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003b46:	f423 31f8 	bic.w	r1, r3, #126976	; 0x1f000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	031b      	lsls	r3, r3, #12
 8003b4e:	f403 32f8 	and.w	r2, r3, #126976	; 0x1f000
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8003b5c:	e028      	b.n	8003bb0 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003b66:	f423 01f8 	bic.w	r1, r3, #8126464	; 0x7c0000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	049b      	lsls	r3, r3, #18
 8003b6e:	f403 02f8 	and.w	r2, r3, #8126464	; 0x7c0000
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8003b7c:	e018      	b.n	8003bb0 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003b86:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	061b      	lsls	r3, r3, #24
 8003b8e:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8003b9c:	e008      	b.n	8003bb0 <HAL_HRTIM_ADCPostScalerConfig+0x1ce>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2207      	movs	r2, #7
 8003ba2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8003bae:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b07      	cmp	r3, #7
 8003bba:	d101      	bne.n	8003bc0 <HAL_HRTIM_ADCPostScalerConfig+0x1de>
  {
     return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e008      	b.n	8003bd2 <HAL_HRTIM_ADCPostScalerConfig+0x1f0>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d101      	bne.n	8003bfa <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e05f      	b.n	8003cba <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e058      	b.n	8003cba <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b06      	cmp	r3, #6
 8003c1c:	d104      	bne.n	8003c28 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 fb67 	bl	80042f4 <HRTIM_MasterWaveform_Config>
 8003c26:	e004      	b.n	8003c32 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 fbff 	bl	8004430 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6819      	ldr	r1, [r3, #0]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4403      	add	r3, r0
 8003c44:	3320      	adds	r3, #32
 8003c46:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6859      	ldr	r1, [r3, #4]
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	4613      	mov	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4403      	add	r3, r0
 8003c5a:	3324      	adds	r3, #36	; 0x24
 8003c5c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6899      	ldr	r1, [r3, #8]
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4403      	add	r3, r0
 8003c70:	3328      	adds	r3, #40	; 0x28
 8003c72:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68d9      	ldr	r1, [r3, #12]
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4403      	add	r3, r0
 8003c86:	332c      	adds	r3, #44	; 0x2c
 8003c88:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6919      	ldr	r1, [r3, #16]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4403      	add	r3, r0
 8003c9c:	3330      	adds	r3, #48	; 0x30
 8003c9e:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 fe76 	bl	8004994 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	60f8      	str	r0, [r7, #12]
 8003cca:	60b9      	str	r1, [r7, #8]
 8003ccc:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d101      	bne.n	8003cde <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e020      	b.n	8003d20 <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_HRTIM_WaveformTimerControl+0x2a>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e019      	b.n	8003d20 <HAL_HRTIM_WaveformTimerControl+0x5e>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 fd29 	bl	8004758 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 fe43 	bl	8004994 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d101      	bne.n	8003d44 <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
     return HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
 8003d42:	e067      	b.n	8003e14 <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_HRTIM_DeadTimeConfig+0x2a>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e060      	b.n	8003e14 <HAL_HRTIM_DeadTimeConfig+0xec>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003d6a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	041a      	lsls	r2, r3, #16
 8003daa:	4b1d      	ldr	r3, [pc, #116]	; (8003e20 <HAL_HRTIM_DeadTimeConfig+0xf8>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	01db      	lsls	r3, r3, #7
 8003de6:	4413      	add	r3, r2
 8003de8:	33b8      	adds	r3, #184	; 0xb8
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <HAL_HRTIM_DeadTimeConfig+0xfc>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	6811      	ldr	r1, [r2, #0]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	01db      	lsls	r3, r3, #7
 8003dfc:	440b      	add	r3, r1
 8003dfe:	33b8      	adds	r3, #184	; 0xb8
 8003e00:	601a      	str	r2, [r3, #0]
                 HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
                 HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	371c      	adds	r7, #28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	01ff0000 	.word	0x01ff0000
 8003e24:	3c002000 	.word	0x3c002000

08003e28 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d101      	bne.n	8003e46 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8003e42:	2302      	movs	r3, #2
 8003e44:	e157      	b.n	80040f6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e150      	b.n	80040f6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b06      	cmp	r3, #6
 8003e68:	d140      	bne.n	8003eec <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	2b07      	cmp	r3, #7
 8003e70:	d82a      	bhi.n	8003ec8 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8003e72:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8003e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e78:	08003e99 	.word	0x08003e99
 8003e7c:	08003ea5 	.word	0x08003ea5
 8003e80:	08003ec9 	.word	0x08003ec9
 8003e84:	08003eb1 	.word	0x08003eb1
 8003e88:	08003ec9 	.word	0x08003ec9
 8003e8c:	08003ec9 	.word	0x08003ec9
 8003e90:	08003ec9 	.word	0x08003ec9
 8003e94:	08003ebd 	.word	0x08003ebd
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	61da      	str	r2, [r3, #28]
        break;
 8003ea2:	e01a      	b.n	8003eda <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8003eae:	e014      	b.n	8003eda <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8003eba:	e00e      	b.n	8003eda <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8003ec6:	e008      	b.n	8003eda <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2207      	movs	r2, #7
 8003ecc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 8003ed8:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b07      	cmp	r3, #7
 8003ee4:	f040 80fe 	bne.w	80040e4 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e104      	b.n	80040f6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	2b07      	cmp	r3, #7
 8003ef2:	f200 80e3 	bhi.w	80040bc <HAL_HRTIM_WaveformCompareConfig+0x294>
 8003ef6:	a201      	add	r2, pc, #4	; (adr r2, 8003efc <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8003ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efc:	08003f1d 	.word	0x08003f1d
 8003f00:	08003f31 	.word	0x08003f31
 8003f04:	080040bd 	.word	0x080040bd
 8003f08:	08003fed 	.word	0x08003fed
 8003f0c:	080040bd 	.word	0x080040bd
 8003f10:	080040bd 	.word	0x080040bd
 8003f14:	080040bd 	.word	0x080040bd
 8003f18:	08004001 	.word	0x08004001
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6819      	ldr	r1, [r3, #0]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	01db      	lsls	r3, r3, #7
 8003f28:	440b      	add	r3, r1
 8003f2a:	339c      	adds	r3, #156	; 0x9c
 8003f2c:	601a      	str	r2, [r3, #0]
        break;
 8003f2e:	e0d1      	b.n	80040d4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6819      	ldr	r1, [r3, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	01db      	lsls	r3, r3, #7
 8003f3c:	440b      	add	r3, r1
 8003f3e:	33a4      	adds	r3, #164	; 0xa4
 8003f40:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d03f      	beq.n	8003fca <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	3301      	adds	r3, #1
 8003f52:	01db      	lsls	r3, r3, #7
 8003f54:	4413      	add	r3, r2
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	6811      	ldr	r1, [r2, #0]
 8003f5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	3301      	adds	r3, #1
 8003f64:	01db      	lsls	r3, r3, #7
 8003f66:	440b      	add	r3, r1
 8003f68:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	3301      	adds	r3, #1
 8003f72:	01db      	lsls	r3, r3, #7
 8003f74:	4413      	add	r3, r2
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	68f9      	ldr	r1, [r7, #12]
 8003f7e:	6809      	ldr	r1, [r1, #0]
 8003f80:	431a      	orrs	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	3301      	adds	r3, #1
 8003f86:	01db      	lsls	r3, r3, #7
 8003f88:	440b      	add	r3, r1
 8003f8a:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f94:	d109      	bne.n	8003faa <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	01db      	lsls	r3, r3, #7
 8003fa2:	440b      	add	r3, r1
 8003fa4:	339c      	adds	r3, #156	; 0x9c
 8003fa6:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8003fa8:	e091      	b.n	80040ce <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fb2:	f040 808c 	bne.w	80040ce <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6819      	ldr	r1, [r3, #0]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	01db      	lsls	r3, r3, #7
 8003fc2:	440b      	add	r3, r1
 8003fc4:	33a8      	adds	r3, #168	; 0xa8
 8003fc6:	601a      	str	r2, [r3, #0]
         break;
 8003fc8:	e081      	b.n	80040ce <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	01db      	lsls	r3, r3, #7
 8003fd4:	4413      	add	r3, r2
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	6811      	ldr	r1, [r2, #0]
 8003fdc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	01db      	lsls	r3, r3, #7
 8003fe6:	440b      	add	r3, r1
 8003fe8:	601a      	str	r2, [r3, #0]
         break;
 8003fea:	e070      	b.n	80040ce <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6819      	ldr	r1, [r3, #0]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	01db      	lsls	r3, r3, #7
 8003ff8:	440b      	add	r3, r1
 8003ffa:	33a8      	adds	r3, #168	; 0xa8
 8003ffc:	601a      	str	r2, [r3, #0]
        break;
 8003ffe:	e069      	b.n	80040d4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6819      	ldr	r1, [r3, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	01db      	lsls	r3, r3, #7
 800400c:	440b      	add	r3, r1
 800400e:	33ac      	adds	r3, #172	; 0xac
 8004010:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d03f      	beq.n	800409a <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	3301      	adds	r3, #1
 8004022:	01db      	lsls	r3, r3, #7
 8004024:	4413      	add	r3, r2
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	6811      	ldr	r1, [r2, #0]
 800402c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	3301      	adds	r3, #1
 8004034:	01db      	lsls	r3, r3, #7
 8004036:	440b      	add	r3, r1
 8004038:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	3301      	adds	r3, #1
 8004042:	01db      	lsls	r3, r3, #7
 8004044:	4413      	add	r3, r2
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	68f9      	ldr	r1, [r7, #12]
 8004050:	6809      	ldr	r1, [r1, #0]
 8004052:	431a      	orrs	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	3301      	adds	r3, #1
 8004058:	01db      	lsls	r3, r3, #7
 800405a:	440b      	add	r3, r1
 800405c:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004066:	d109      	bne.n	800407c <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6819      	ldr	r1, [r3, #0]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	01db      	lsls	r3, r3, #7
 8004074:	440b      	add	r3, r1
 8004076:	339c      	adds	r3, #156	; 0x9c
 8004078:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800407a:	e02a      	b.n	80040d2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004084:	d125      	bne.n	80040d2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6819      	ldr	r1, [r3, #0]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	01db      	lsls	r3, r3, #7
 8004092:	440b      	add	r3, r1
 8004094:	33a8      	adds	r3, #168	; 0xa8
 8004096:	601a      	str	r2, [r3, #0]
         break;
 8004098:	e01b      	b.n	80040d2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	3301      	adds	r3, #1
 80040a2:	01db      	lsls	r3, r3, #7
 80040a4:	4413      	add	r3, r2
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	6811      	ldr	r1, [r2, #0]
 80040ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	3301      	adds	r3, #1
 80040b4:	01db      	lsls	r3, r3, #7
 80040b6:	440b      	add	r3, r1
 80040b8:	601a      	str	r2, [r3, #0]
         break;
 80040ba:	e00a      	b.n	80040d2 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2207      	movs	r2, #7
 80040c0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 80040cc:	e002      	b.n	80040d4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80040d2:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b07      	cmp	r3, #7
 80040de:	d101      	bne.n	80040e4 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e008      	b.n	80040f6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop

08004104 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d101      	bne.n	8004122 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 800411e:	2302      	movs	r3, #2
 8004120:	e01d      	b.n	800415e <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 800412c:	2302      	movs	r3, #2
 800412e:	e016      	b.n	800415e <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fb66 	bl	8004818 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_HRTIM_WaveformOutputStart+0x18>
 800417a:	2302      	movs	r3, #2
 800417c:	e01a      	b.n	80041b4 <HAL_HRTIM_WaveformOutputStart+0x4e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2202      	movs	r2, #2
 800418a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_HRTIM_WaveformCountStart+0x18>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e018      	b.n	800420a <HAL_HRTIM_WaveformCountStart+0x4a>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6819      	ldr	r1, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0307 	bic.w	r3, r3, #7
 800422e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f023 0318 	bic.w	r3, r3, #24
 8004240:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	6852      	ldr	r2, [r2, #4]
 8004266:	619a      	str	r2, [r3, #24]
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	3301      	adds	r3, #1
 8004288:	01db      	lsls	r3, r3, #7
 800428a:	4413      	add	r3, r2
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f023 0307 	bic.w	r3, r3, #7
 8004296:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	4313      	orrs	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f023 0318 	bic.w	r3, r3, #24
 80042a8:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	3301      	adds	r3, #1
 80042bc:	01db      	lsls	r3, r3, #7
 80042be:	4413      	add	r3, r2
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6819      	ldr	r1, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	01db      	lsls	r3, r3, #7
 80042d0:	440b      	add	r3, r1
 80042d2:	3394      	adds	r3, #148	; 0x94
 80042d4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6819      	ldr	r1, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	01db      	lsls	r3, r3, #7
 80042e2:	440b      	add	r3, r1
 80042e4:	3398      	adds	r3, #152	; 0x98
 80042e6:	601a      	str	r2, [r3, #0]
}
 80042e8:	bf00      	nop
 80042ea:	371c      	adds	r7, #28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 800430e:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0320 	bic.w	r3, r3, #32
 8004316:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004328:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	2b20      	cmp	r3, #32
 8004330:	d003      	beq.n	800433a <HRTIM_MasterWaveform_Config+0x46>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d108      	bne.n	800434c <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004340:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f043 0320 	orr.w	r3, r3, #32
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	e021      	b.n	8004390 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	2b03      	cmp	r3, #3
 8004352:	d108      	bne.n	8004366 <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800435a:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	e014      	b.n	8004390 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b04      	cmp	r3, #4
 800436c:	d108      	bne.n	8004380 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004374:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	e007      	b.n	8004390 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0320 	bic.w	r3, r3, #32
 8004386:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800438e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004396:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043a8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043ba:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80043cc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80043de:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80043f2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004404:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	4313      	orrs	r3, r2
 800440e:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004430:	b480      	push	{r7}
 8004432:	b08b      	sub	sp, #44	; 0x2c
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	3301      	adds	r3, #1
 8004444:	01db      	lsls	r3, r3, #7
 8004446:	4413      	add	r3, r2
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	6811      	ldr	r1, [r2, #0]
 800444e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	3301      	adds	r3, #1
 8004456:	01db      	lsls	r3, r3, #7
 8004458:	440b      	add	r3, r1
 800445a:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	3301      	adds	r3, #1
 8004464:	01db      	lsls	r3, r3, #7
 8004466:	4413      	add	r3, r2
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	01db      	lsls	r3, r3, #7
 8004474:	4413      	add	r3, r2
 8004476:	33e8      	adds	r3, #232	; 0xe8
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	01db      	lsls	r3, r3, #7
 8004484:	4413      	add	r3, r2
 8004486:	33e4      	adds	r3, #228	; 0xe4
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8004494:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	f023 0320 	bic.w	r3, r3, #32
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a4:	4313      	orrs	r3, r2
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d003      	beq.n	80044b8 <HRTIM_TimingUnitWaveform_Config+0x88>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d108      	bne.n	80044ca <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	f043 0320 	orr.w	r3, r3, #32
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
 80044c8:	e021      	b.n	800450e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d108      	bne.n	80044e4 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
 80044e2:	e014      	b.n	800450e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d108      	bne.n	80044fe <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
 80044fc:	e007      	b.n	800450e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	f023 0320 	bic.w	r3, r3, #32
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451c:	4313      	orrs	r3, r2
 800451e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800452e:	4313      	orrs	r3, r2
 8004530:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004540:	4313      	orrs	r3, r2
 8004542:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004552:	4313      	orrs	r3, r2
 8004554:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004564:	4313      	orrs	r3, r2
 8004566:	627b      	str	r3, [r7, #36]	; 0x24

  if (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	2b00      	cmp	r3, #0
 800456e:	d109      	bne.n	8004584 <HRTIM_TimingUnitWaveform_Config+0x154>
  {
    /* Timing unit Re-Synchronized Update */
    hrtim_timcr &= ~(HRTIM_TIMCR_RSYNCU);
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (pTimerCfg->ReSyncUpdate) << HRTIM_TIMCR_RSYNCU_Pos;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457c:	025b      	lsls	r3, r3, #9
 800457e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004580:	4313      	orrs	r3, r2
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
  }


  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004594:	d103      	bne.n	800459e <HRTIM_TimingUnitWaveform_Config+0x16e>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ac:	4313      	orrs	r3, r2
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045be:	4313      	orrs	r3, r2
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 80045c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d4:	4313      	orrs	r3, r2
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045de:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045f4:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004606:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460c:	6a3a      	ldr	r2, [r7, #32]
 800460e:	4313      	orrs	r3, r2
 8004610:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004616:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800461a:	d004      	beq.n	8004626 <HRTIM_TimingUnitWaveform_Config+0x1f6>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004620:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8004624:	d103      	bne.n	800462e <HRTIM_TimingUnitWaveform_Config+0x1fe>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	2b40      	cmp	r3, #64	; 0x40
 800462c:	d108      	bne.n	8004640 <HRTIM_TimingUnitWaveform_Config+0x210>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8004634:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463a:	6a3a      	ldr	r2, [r7, #32]
 800463c:	4313      	orrs	r3, r2
 800463e:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004646:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464c:	6a3a      	ldr	r2, [r7, #32]
 800464e:	4313      	orrs	r3, r2
 8004650:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b05      	cmp	r3, #5
 800465c:	d850      	bhi.n	8004700 <HRTIM_TimingUnitWaveform_Config+0x2d0>
 800465e:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <HRTIM_TimingUnitWaveform_Config+0x234>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	0800467d 	.word	0x0800467d
 8004668:	08004693 	.word	0x08004693
 800466c:	080046a9 	.word	0x080046a9
 8004670:	080046bf 	.word	0x080046bf
 8004674:	080046d5 	.word	0x080046d5
 8004678:	080046eb 	.word	0x080046eb
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004682:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	69fa      	ldr	r2, [r7, #28]
 800468c:	4313      	orrs	r3, r2
 800468e:	61fb      	str	r3, [r7, #28]
      break;
 8004690:	e037      	b.n	8004702 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004698:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	61fb      	str	r3, [r7, #28]
      break;
 80046a6:	e02c      	b.n	8004702 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80046ae:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	61fb      	str	r3, [r7, #28]
      break;
 80046bc:	e021      	b.n	8004702 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80046c4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	61fb      	str	r3, [r7, #28]
      break;
 80046d2:	e016      	b.n	8004702 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046da:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	015b      	lsls	r3, r3, #5
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61fb      	str	r3, [r7, #28]
      break;
 80046e8:	e00b      	b.n	8004702 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80046f0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	019b      	lsls	r3, r3, #6
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61fb      	str	r3, [r7, #28]
      break;
 80046fe:	e000      	b.n	8004702 <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  default:
    break;
 8004700:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	3301      	adds	r3, #1
 800470a:	01db      	lsls	r3, r3, #7
 800470c:	4413      	add	r3, r2
 800470e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004710:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	01db      	lsls	r3, r3, #7
 800471a:	4413      	add	r3, r2
 800471c:	33e8      	adds	r3, #232	; 0xe8
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	01db      	lsls	r3, r3, #7
 800472a:	4413      	add	r3, r2
 800472c:	33e4      	adds	r3, #228	; 0xe4
 800472e:	6a3a      	ldr	r2, [r7, #32]
 8004730:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	01db      	lsls	r3, r3, #7
 800473a:	4413      	add	r3, r2
 800473c:	33d4      	adds	r3, #212	; 0xd4
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800474c:	bf00      	nop
 800474e:	372c      	adds	r7, #44	; 0x2c
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	01db      	lsls	r3, r3, #7
 800476c:	4413      	add	r3, r2
 800476e:	33ec      	adds	r3, #236	; 0xec
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f023 0310 	bic.w	r3, r3, #16
 800477a:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800478e:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	4313      	orrs	r3, r2
 8004798:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a0:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80047b2:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d11a      	bne.n	80047fc <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f023 0304 	bic.w	r3, r3, #4
 80047cc:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f023 0302 	bic.w	r3, r3, #2
 80047de:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f023 0301 	bic.w	r3, r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	01db      	lsls	r3, r3, #7
 8004804:	4413      	add	r3, r2
 8004806:	33ec      	adds	r3, #236	; 0xec
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	601a      	str	r2, [r3, #0]

}
 800480c:	bf00      	nop
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8004818:	b480      	push	{r7}
 800481a:	b089      	sub	sp, #36	; 0x24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	01db      	lsls	r3, r3, #7
 8004832:	4413      	add	r3, r2
 8004834:	33e4      	adds	r3, #228	; 0xe4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	01db      	lsls	r3, r3, #7
 8004842:	4413      	add	r3, r2
 8004844:	33b8      	adds	r3, #184	; 0xb8
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	617b      	str	r3, [r7, #20]

  switch (Output)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b20      	cmp	r3, #32
 800484e:	d037      	beq.n	80048c0 <HRTIM_OutputConfig+0xa8>
 8004850:	2b20      	cmp	r3, #32
 8004852:	d80d      	bhi.n	8004870 <HRTIM_OutputConfig+0x58>
 8004854:	2b04      	cmp	r3, #4
 8004856:	d020      	beq.n	800489a <HRTIM_OutputConfig+0x82>
 8004858:	2b04      	cmp	r3, #4
 800485a:	d804      	bhi.n	8004866 <HRTIM_OutputConfig+0x4e>
 800485c:	2b01      	cmp	r3, #1
 800485e:	d01c      	beq.n	800489a <HRTIM_OutputConfig+0x82>
 8004860:	2b02      	cmp	r3, #2
 8004862:	d02d      	beq.n	80048c0 <HRTIM_OutputConfig+0xa8>
      shift = 16U;
      break;
    }

  default:
    break;
 8004864:	e041      	b.n	80048ea <HRTIM_OutputConfig+0xd2>
  switch (Output)
 8004866:	2b08      	cmp	r3, #8
 8004868:	d02a      	beq.n	80048c0 <HRTIM_OutputConfig+0xa8>
 800486a:	2b10      	cmp	r3, #16
 800486c:	d015      	beq.n	800489a <HRTIM_OutputConfig+0x82>
    break;
 800486e:	e03c      	b.n	80048ea <HRTIM_OutputConfig+0xd2>
  switch (Output)
 8004870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004874:	d011      	beq.n	800489a <HRTIM_OutputConfig+0x82>
 8004876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800487a:	d804      	bhi.n	8004886 <HRTIM_OutputConfig+0x6e>
 800487c:	2b40      	cmp	r3, #64	; 0x40
 800487e:	d00c      	beq.n	800489a <HRTIM_OutputConfig+0x82>
 8004880:	2b80      	cmp	r3, #128	; 0x80
 8004882:	d01d      	beq.n	80048c0 <HRTIM_OutputConfig+0xa8>
    break;
 8004884:	e031      	b.n	80048ea <HRTIM_OutputConfig+0xd2>
  switch (Output)
 8004886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800488a:	d006      	beq.n	800489a <HRTIM_OutputConfig+0x82>
 800488c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004890:	d016      	beq.n	80048c0 <HRTIM_OutputConfig+0xa8>
 8004892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004896:	d013      	beq.n	80048c0 <HRTIM_OutputConfig+0xa8>
    break;
 8004898:	e027      	b.n	80048ea <HRTIM_OutputConfig+0xd2>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6819      	ldr	r1, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	01db      	lsls	r3, r3, #7
 80048a6:	440b      	add	r3, r1
 80048a8:	33bc      	adds	r3, #188	; 0xbc
 80048aa:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6819      	ldr	r1, [r3, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	01db      	lsls	r3, r3, #7
 80048b8:	440b      	add	r3, r1
 80048ba:	33c0      	adds	r3, #192	; 0xc0
 80048bc:	601a      	str	r2, [r3, #0]
      break;
 80048be:	e014      	b.n	80048ea <HRTIM_OutputConfig+0xd2>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6819      	ldr	r1, [r3, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	01db      	lsls	r3, r3, #7
 80048cc:	440b      	add	r3, r1
 80048ce:	33c4      	adds	r3, #196	; 0xc4
 80048d0:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	01db      	lsls	r3, r3, #7
 80048de:	440b      	add	r3, r1
 80048e0:	33c8      	adds	r3, #200	; 0xc8
 80048e2:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80048e4:	2310      	movs	r3, #16
 80048e6:	61bb      	str	r3, [r7, #24]
      break;
 80048e8:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80048ea:	22fe      	movs	r2, #254	; 0xfe
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80048f2:	43db      	mvns	r3, r3
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	4013      	ands	r3, r2
 80048f8:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	4313      	orrs	r3, r2
 8004908:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	4313      	orrs	r3, r2
 8004918:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	691a      	ldr	r2, [r3, #16]
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	4313      	orrs	r3, r2
 8004928:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	695a      	ldr	r2, [r3, #20]
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	69fa      	ldr	r2, [r7, #28]
 8004936:	4313      	orrs	r3, r2
 8004938:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	4313      	orrs	r3, r2
 8004948:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	2b08      	cmp	r3, #8
 8004950:	d111      	bne.n	8004976 <HRTIM_OutputConfig+0x15e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10c      	bne.n	8004976 <HRTIM_OutputConfig+0x15e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004962:	2b00      	cmp	r3, #0
 8004964:	d107      	bne.n	8004976 <HRTIM_OutputConfig+0x15e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	69da      	ldr	r2, [r3, #28]
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	69fa      	ldr	r2, [r7, #28]
 8004972:	4313      	orrs	r3, r2
 8004974:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	01db      	lsls	r3, r3, #7
 800497e:	4413      	add	r3, r2
 8004980:	33e4      	adds	r3, #228	; 0xe4
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	601a      	str	r2, [r3, #0]
}
 8004986:	bf00      	nop
 8004988:	3724      	adds	r7, #36	; 0x24
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
	...

08004994 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b06      	cmp	r3, #6
 80049a2:	d85e      	bhi.n	8004a62 <HRTIM_ForceRegistersUpdate+0xce>
 80049a4:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <HRTIM_ForceRegistersUpdate+0x18>)
 80049a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049aa:	bf00      	nop
 80049ac:	080049df 	.word	0x080049df
 80049b0:	080049f5 	.word	0x080049f5
 80049b4:	08004a0b 	.word	0x08004a0b
 80049b8:	08004a21 	.word	0x08004a21
 80049bc:	08004a37 	.word	0x08004a37
 80049c0:	08004a4d 	.word	0x08004a4d
 80049c4:	080049c9 	.word	0x080049c9
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0201 	orr.w	r2, r2, #1
 80049d8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80049dc:	e042      	b.n	8004a64 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0202 	orr.w	r2, r2, #2
 80049ee:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80049f2:	e037      	b.n	8004a64 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0204 	orr.w	r2, r2, #4
 8004a04:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004a08:	e02c      	b.n	8004a64 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0208 	orr.w	r2, r2, #8
 8004a1a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004a1e:	e021      	b.n	8004a64 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0210 	orr.w	r2, r2, #16
 8004a30:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004a34:	e016      	b.n	8004a64 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0220 	orr.w	r2, r2, #32
 8004a46:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004a4a:	e00b      	b.n	8004a64 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a5c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004a60:	e000      	b.n	8004a64 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 8004a62:	bf00      	nop
  }
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d141      	bne.n	8004b02 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a7e:	4b4b      	ldr	r3, [pc, #300]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8a:	d131      	bne.n	8004af0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a8c:	4b47      	ldr	r3, [pc, #284]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a92:	4a46      	ldr	r2, [pc, #280]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a9c:	4b43      	ldr	r3, [pc, #268]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004aa4:	4a41      	ldr	r2, [pc, #260]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aaa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004aac:	4b40      	ldr	r3, [pc, #256]	; (8004bb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2232      	movs	r2, #50	; 0x32
 8004ab2:	fb02 f303 	mul.w	r3, r2, r3
 8004ab6:	4a3f      	ldr	r2, [pc, #252]	; (8004bb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8004abc:	0c9b      	lsrs	r3, r3, #18
 8004abe:	3301      	adds	r3, #1
 8004ac0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ac2:	e002      	b.n	8004aca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004aca:	4b38      	ldr	r3, [pc, #224]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad6:	d102      	bne.n	8004ade <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f2      	bne.n	8004ac4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ade:	4b33      	ldr	r3, [pc, #204]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aea:	d158      	bne.n	8004b9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e057      	b.n	8004ba0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004af0:	4b2e      	ldr	r3, [pc, #184]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004af6:	4a2d      	ldr	r2, [pc, #180]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004afc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004b00:	e04d      	b.n	8004b9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b08:	d141      	bne.n	8004b8e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b0a:	4b28      	ldr	r3, [pc, #160]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b16:	d131      	bne.n	8004b7c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b18:	4b24      	ldr	r3, [pc, #144]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1e:	4a23      	ldr	r2, [pc, #140]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b28:	4b20      	ldr	r3, [pc, #128]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b30:	4a1e      	ldr	r2, [pc, #120]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b38:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2232      	movs	r2, #50	; 0x32
 8004b3e:	fb02 f303 	mul.w	r3, r2, r3
 8004b42:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	0c9b      	lsrs	r3, r3, #18
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b4e:	e002      	b.n	8004b56 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b56:	4b15      	ldr	r3, [pc, #84]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b62:	d102      	bne.n	8004b6a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f2      	bne.n	8004b50 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b6a:	4b10      	ldr	r3, [pc, #64]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b76:	d112      	bne.n	8004b9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e011      	b.n	8004ba0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b82:	4a0a      	ldr	r2, [pc, #40]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004b8c:	e007      	b.n	8004b9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b8e:	4b07      	ldr	r3, [pc, #28]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b96:	4a05      	ldr	r2, [pc, #20]	; (8004bac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b9c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	40007000 	.word	0x40007000
 8004bb0:	2000002c 	.word	0x2000002c
 8004bb4:	431bde83 	.word	0x431bde83

08004bb8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004bbc:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	4a04      	ldr	r2, [pc, #16]	; (8004bd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bc6:	6093      	str	r3, [r2, #8]
}
 8004bc8:	bf00      	nop
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40007000 	.word	0x40007000

08004bd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e308      	b.n	80051fc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d075      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bf6:	4ba3      	ldr	r3, [pc, #652]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 030c 	and.w	r3, r3, #12
 8004bfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c00:	4ba0      	ldr	r3, [pc, #640]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2b0c      	cmp	r3, #12
 8004c0e:	d102      	bne.n	8004c16 <HAL_RCC_OscConfig+0x3e>
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	d002      	beq.n	8004c1c <HAL_RCC_OscConfig+0x44>
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d10b      	bne.n	8004c34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c1c:	4b99      	ldr	r3, [pc, #612]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d05b      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x108>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d157      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e2e3      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3c:	d106      	bne.n	8004c4c <HAL_RCC_OscConfig+0x74>
 8004c3e:	4b91      	ldr	r3, [pc, #580]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a90      	ldr	r2, [pc, #576]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	e01d      	b.n	8004c88 <HAL_RCC_OscConfig+0xb0>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c54:	d10c      	bne.n	8004c70 <HAL_RCC_OscConfig+0x98>
 8004c56:	4b8b      	ldr	r3, [pc, #556]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a8a      	ldr	r2, [pc, #552]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	4b88      	ldr	r3, [pc, #544]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a87      	ldr	r2, [pc, #540]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e00b      	b.n	8004c88 <HAL_RCC_OscConfig+0xb0>
 8004c70:	4b84      	ldr	r3, [pc, #528]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a83      	ldr	r2, [pc, #524]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	4b81      	ldr	r3, [pc, #516]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a80      	ldr	r2, [pc, #512]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d013      	beq.n	8004cb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c90:	f7fb feda 	bl	8000a48 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c98:	f7fb fed6 	bl	8000a48 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b64      	cmp	r3, #100	; 0x64
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e2a8      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004caa:	4b76      	ldr	r3, [pc, #472]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCC_OscConfig+0xc0>
 8004cb6:	e014      	b.n	8004ce2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fb fec6 	bl	8000a48 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc0:	f7fb fec2 	bl	8000a48 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b64      	cmp	r3, #100	; 0x64
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e294      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cd2:	4b6c      	ldr	r3, [pc, #432]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0xe8>
 8004cde:	e000      	b.n	8004ce2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d075      	beq.n	8004dda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cee:	4b65      	ldr	r3, [pc, #404]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cf8:	4b62      	ldr	r3, [pc, #392]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0303 	and.w	r3, r3, #3
 8004d00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	2b0c      	cmp	r3, #12
 8004d06:	d102      	bne.n	8004d0e <HAL_RCC_OscConfig+0x136>
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d002      	beq.n	8004d14 <HAL_RCC_OscConfig+0x13c>
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d11f      	bne.n	8004d54 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d14:	4b5b      	ldr	r3, [pc, #364]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_RCC_OscConfig+0x154>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e267      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2c:	4b55      	ldr	r3, [pc, #340]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	061b      	lsls	r3, r3, #24
 8004d3a:	4952      	ldr	r1, [pc, #328]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d40:	4b51      	ldr	r3, [pc, #324]	; (8004e88 <HAL_RCC_OscConfig+0x2b0>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f003 fa3f 	bl	80081c8 <HAL_InitTick>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d043      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e253      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d023      	beq.n	8004da4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d5c:	4b49      	ldr	r3, [pc, #292]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a48      	ldr	r2, [pc, #288]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fb fe6e 	bl	8000a48 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d70:	f7fb fe6a 	bl	8000a48 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e23c      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d82:	4b40      	ldr	r3, [pc, #256]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f0      	beq.n	8004d70 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8e:	4b3d      	ldr	r3, [pc, #244]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	061b      	lsls	r3, r3, #24
 8004d9c:	4939      	ldr	r1, [pc, #228]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	604b      	str	r3, [r1, #4]
 8004da2:	e01a      	b.n	8004dda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004da4:	4b37      	ldr	r3, [pc, #220]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a36      	ldr	r2, [pc, #216]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004daa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fb fe4a 	bl	8000a48 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004db8:	f7fb fe46 	bl	8000a48 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e218      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dca:	4b2e      	ldr	r3, [pc, #184]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0x1e0>
 8004dd6:	e000      	b.n	8004dda <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d03c      	beq.n	8004e60 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d01c      	beq.n	8004e28 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dee:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df4:	4a23      	ldr	r2, [pc, #140]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfe:	f7fb fe23 	bl	8000a48 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e06:	f7fb fe1f 	bl	8000a48 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e1f1      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e18:	4b1a      	ldr	r3, [pc, #104]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0ef      	beq.n	8004e06 <HAL_RCC_OscConfig+0x22e>
 8004e26:	e01b      	b.n	8004e60 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e28:	4b16      	ldr	r3, [pc, #88]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e2e:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004e30:	f023 0301 	bic.w	r3, r3, #1
 8004e34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e38:	f7fb fe06 	bl	8000a48 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e3e:	e008      	b.n	8004e52 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e40:	f7fb fe02 	bl	8000a48 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e1d4      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e52:	4b0c      	ldr	r3, [pc, #48]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1ef      	bne.n	8004e40 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 80ab 	beq.w	8004fc4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e72:	4b04      	ldr	r3, [pc, #16]	; (8004e84 <HAL_RCC_OscConfig+0x2ac>)
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d106      	bne.n	8004e8c <HAL_RCC_OscConfig+0x2b4>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e005      	b.n	8004e8e <HAL_RCC_OscConfig+0x2b6>
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000
 8004e88:	20000000 	.word	0x20000000
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00d      	beq.n	8004eae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e92:	4baf      	ldr	r3, [pc, #700]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e96:	4aae      	ldr	r2, [pc, #696]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e9e:	4bac      	ldr	r3, [pc, #688]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eae:	4ba9      	ldr	r3, [pc, #676]	; (8005154 <HAL_RCC_OscConfig+0x57c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d118      	bne.n	8004eec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eba:	4ba6      	ldr	r3, [pc, #664]	; (8005154 <HAL_RCC_OscConfig+0x57c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4aa5      	ldr	r2, [pc, #660]	; (8005154 <HAL_RCC_OscConfig+0x57c>)
 8004ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ec6:	f7fb fdbf 	bl	8000a48 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ece:	f7fb fdbb 	bl	8000a48 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e18d      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ee0:	4b9c      	ldr	r3, [pc, #624]	; (8005154 <HAL_RCC_OscConfig+0x57c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d108      	bne.n	8004f06 <HAL_RCC_OscConfig+0x32e>
 8004ef4:	4b96      	ldr	r3, [pc, #600]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	4a95      	ldr	r2, [pc, #596]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004efc:	f043 0301 	orr.w	r3, r3, #1
 8004f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f04:	e024      	b.n	8004f50 <HAL_RCC_OscConfig+0x378>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b05      	cmp	r3, #5
 8004f0c:	d110      	bne.n	8004f30 <HAL_RCC_OscConfig+0x358>
 8004f0e:	4b90      	ldr	r3, [pc, #576]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f14:	4a8e      	ldr	r2, [pc, #568]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004f16:	f043 0304 	orr.w	r3, r3, #4
 8004f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f1e:	4b8c      	ldr	r3, [pc, #560]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f24:	4a8a      	ldr	r2, [pc, #552]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004f26:	f043 0301 	orr.w	r3, r3, #1
 8004f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f2e:	e00f      	b.n	8004f50 <HAL_RCC_OscConfig+0x378>
 8004f30:	4b87      	ldr	r3, [pc, #540]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f36:	4a86      	ldr	r2, [pc, #536]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004f38:	f023 0301 	bic.w	r3, r3, #1
 8004f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f40:	4b83      	ldr	r3, [pc, #524]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f46:	4a82      	ldr	r2, [pc, #520]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004f48:	f023 0304 	bic.w	r3, r3, #4
 8004f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d016      	beq.n	8004f86 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fb fd76 	bl	8000a48 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f60:	f7fb fd72 	bl	8000a48 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e142      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f76:	4b76      	ldr	r3, [pc, #472]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0ed      	beq.n	8004f60 <HAL_RCC_OscConfig+0x388>
 8004f84:	e015      	b.n	8004fb2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f86:	f7fb fd5f 	bl	8000a48 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f8c:	e00a      	b.n	8004fa4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f8e:	f7fb fd5b 	bl	8000a48 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e12b      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fa4:	4b6a      	ldr	r3, [pc, #424]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1ed      	bne.n	8004f8e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fb2:	7ffb      	ldrb	r3, [r7, #31]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d105      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb8:	4b65      	ldr	r3, [pc, #404]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbc:	4a64      	ldr	r2, [pc, #400]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d03c      	beq.n	800504a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01c      	beq.n	8005012 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fd8:	4b5d      	ldr	r3, [pc, #372]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004fda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fde:	4a5c      	ldr	r2, [pc, #368]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe8:	f7fb fd2e 	bl	8000a48 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ff0:	f7fb fd2a 	bl	8000a48 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e0fc      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005002:	4b53      	ldr	r3, [pc, #332]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8005004:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0ef      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x418>
 8005010:	e01b      	b.n	800504a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005012:	4b4f      	ldr	r3, [pc, #316]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8005014:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005018:	4a4d      	ldr	r2, [pc, #308]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 800501a:	f023 0301 	bic.w	r3, r3, #1
 800501e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005022:	f7fb fd11 	bl	8000a48 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800502a:	f7fb fd0d 	bl	8000a48 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e0df      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800503c:	4b44      	ldr	r3, [pc, #272]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 800503e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1ef      	bne.n	800502a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 80d3 	beq.w	80051fa <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005054:	4b3e      	ldr	r3, [pc, #248]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 030c 	and.w	r3, r3, #12
 800505c:	2b0c      	cmp	r3, #12
 800505e:	f000 808d 	beq.w	800517c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d15a      	bne.n	8005120 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800506a:	4b39      	ldr	r3, [pc, #228]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a38      	ldr	r2, [pc, #224]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8005070:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005076:	f7fb fce7 	bl	8000a48 <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800507c:	e008      	b.n	8005090 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800507e:	f7fb fce3 	bl	8000a48 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e0b5      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005090:	4b2f      	ldr	r3, [pc, #188]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f0      	bne.n	800507e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800509c:	4b2c      	ldr	r3, [pc, #176]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	4b2d      	ldr	r3, [pc, #180]	; (8005158 <HAL_RCC_OscConfig+0x580>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6a11      	ldr	r1, [r2, #32]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050ac:	3a01      	subs	r2, #1
 80050ae:	0112      	lsls	r2, r2, #4
 80050b0:	4311      	orrs	r1, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80050b6:	0212      	lsls	r2, r2, #8
 80050b8:	4311      	orrs	r1, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80050be:	0852      	lsrs	r2, r2, #1
 80050c0:	3a01      	subs	r2, #1
 80050c2:	0552      	lsls	r2, r2, #21
 80050c4:	4311      	orrs	r1, r2
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050ca:	0852      	lsrs	r2, r2, #1
 80050cc:	3a01      	subs	r2, #1
 80050ce:	0652      	lsls	r2, r2, #25
 80050d0:	4311      	orrs	r1, r2
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80050d6:	06d2      	lsls	r2, r2, #27
 80050d8:	430a      	orrs	r2, r1
 80050da:	491d      	ldr	r1, [pc, #116]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e0:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a1a      	ldr	r2, [pc, #104]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 80050e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050ec:	4b18      	ldr	r3, [pc, #96]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4a17      	ldr	r2, [pc, #92]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 80050f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f8:	f7fb fca6 	bl	8000a48 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005100:	f7fb fca2 	bl	8000a48 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e074      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005112:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0f0      	beq.n	8005100 <HAL_RCC_OscConfig+0x528>
 800511e:	e06c      	b.n	80051fa <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a0a      	ldr	r2, [pc, #40]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8005126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800512a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800512c:	4b08      	ldr	r3, [pc, #32]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	4a07      	ldr	r2, [pc, #28]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 8005132:	f023 0303 	bic.w	r3, r3, #3
 8005136:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4a04      	ldr	r2, [pc, #16]	; (8005150 <HAL_RCC_OscConfig+0x578>)
 800513e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005146:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005148:	f7fb fc7e 	bl	8000a48 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800514e:	e00e      	b.n	800516e <HAL_RCC_OscConfig+0x596>
 8005150:	40021000 	.word	0x40021000
 8005154:	40007000 	.word	0x40007000
 8005158:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515c:	f7fb fc74 	bl	8000a48 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e046      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800516e:	4b25      	ldr	r3, [pc, #148]	; (8005204 <HAL_RCC_OscConfig+0x62c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x584>
 800517a:	e03e      	b.n	80051fa <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e039      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005188:	4b1e      	ldr	r3, [pc, #120]	; (8005204 <HAL_RCC_OscConfig+0x62c>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f003 0203 	and.w	r2, r3, #3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	429a      	cmp	r2, r3
 800519a:	d12c      	bne.n	80051f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	3b01      	subs	r3, #1
 80051a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d123      	bne.n	80051f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d11b      	bne.n	80051f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d113      	bne.n	80051f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	085b      	lsrs	r3, r3, #1
 80051da:	3b01      	subs	r3, #1
 80051dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051de:	429a      	cmp	r2, r3
 80051e0:	d109      	bne.n	80051f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ec:	085b      	lsrs	r3, r3, #1
 80051ee:	3b01      	subs	r3, #1
 80051f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d001      	beq.n	80051fa <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3720      	adds	r7, #32
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40021000 	.word	0x40021000

08005208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005212:	2300      	movs	r3, #0
 8005214:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e11e      	b.n	800545e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005220:	4b91      	ldr	r3, [pc, #580]	; (8005468 <HAL_RCC_ClockConfig+0x260>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d910      	bls.n	8005250 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800522e:	4b8e      	ldr	r3, [pc, #568]	; (8005468 <HAL_RCC_ClockConfig+0x260>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f023 020f 	bic.w	r2, r3, #15
 8005236:	498c      	ldr	r1, [pc, #560]	; (8005468 <HAL_RCC_ClockConfig+0x260>)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	4313      	orrs	r3, r2
 800523c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800523e:	4b8a      	ldr	r3, [pc, #552]	; (8005468 <HAL_RCC_ClockConfig+0x260>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d001      	beq.n	8005250 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e106      	b.n	800545e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d073      	beq.n	8005344 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b03      	cmp	r3, #3
 8005262:	d129      	bne.n	80052b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005264:	4b81      	ldr	r3, [pc, #516]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e0f4      	b.n	800545e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005274:	f000 f9ba 	bl	80055ec <RCC_GetSysClockFreqFromPLLSource>
 8005278:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	4a7c      	ldr	r2, [pc, #496]	; (8005470 <HAL_RCC_ClockConfig+0x268>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d93f      	bls.n	8005302 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005282:	4b7a      	ldr	r3, [pc, #488]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d009      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005296:	2b00      	cmp	r3, #0
 8005298:	d033      	beq.n	8005302 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d12f      	bne.n	8005302 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052a2:	4b72      	ldr	r3, [pc, #456]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052aa:	4a70      	ldr	r2, [pc, #448]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 80052ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052b2:	2380      	movs	r3, #128	; 0x80
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	e024      	b.n	8005302 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d107      	bne.n	80052d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052c0:	4b6a      	ldr	r3, [pc, #424]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d109      	bne.n	80052e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0c6      	b.n	800545e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052d0:	4b66      	ldr	r3, [pc, #408]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0be      	b.n	800545e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80052e0:	f000 f8ce 	bl	8005480 <HAL_RCC_GetSysClockFreq>
 80052e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	4a61      	ldr	r2, [pc, #388]	; (8005470 <HAL_RCC_ClockConfig+0x268>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d909      	bls.n	8005302 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052ee:	4b5f      	ldr	r3, [pc, #380]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052f6:	4a5d      	ldr	r2, [pc, #372]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 80052f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80052fe:	2380      	movs	r3, #128	; 0x80
 8005300:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005302:	4b5a      	ldr	r3, [pc, #360]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f023 0203 	bic.w	r2, r3, #3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	4957      	ldr	r1, [pc, #348]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 8005310:	4313      	orrs	r3, r2
 8005312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005314:	f7fb fb98 	bl	8000a48 <HAL_GetTick>
 8005318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531a:	e00a      	b.n	8005332 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800531c:	f7fb fb94 	bl	8000a48 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	f241 3288 	movw	r2, #5000	; 0x1388
 800532a:	4293      	cmp	r3, r2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e095      	b.n	800545e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005332:	4b4e      	ldr	r3, [pc, #312]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 020c 	and.w	r2, r3, #12
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	429a      	cmp	r2, r3
 8005342:	d1eb      	bne.n	800531c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d023      	beq.n	8005398 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d005      	beq.n	8005368 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800535c:	4b43      	ldr	r3, [pc, #268]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	4a42      	ldr	r2, [pc, #264]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 8005362:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005366:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005374:	4b3d      	ldr	r3, [pc, #244]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800537c:	4a3b      	ldr	r2, [pc, #236]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 800537e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005382:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005384:	4b39      	ldr	r3, [pc, #228]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4936      	ldr	r1, [pc, #216]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 8005392:	4313      	orrs	r3, r2
 8005394:	608b      	str	r3, [r1, #8]
 8005396:	e008      	b.n	80053aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2b80      	cmp	r3, #128	; 0x80
 800539c:	d105      	bne.n	80053aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800539e:	4b33      	ldr	r3, [pc, #204]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	4a32      	ldr	r2, [pc, #200]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 80053a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053aa:	4b2f      	ldr	r3, [pc, #188]	; (8005468 <HAL_RCC_ClockConfig+0x260>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d21d      	bcs.n	80053f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b8:	4b2b      	ldr	r3, [pc, #172]	; (8005468 <HAL_RCC_ClockConfig+0x260>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f023 020f 	bic.w	r2, r3, #15
 80053c0:	4929      	ldr	r1, [pc, #164]	; (8005468 <HAL_RCC_ClockConfig+0x260>)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80053c8:	f7fb fb3e 	bl	8000a48 <HAL_GetTick>
 80053cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ce:	e00a      	b.n	80053e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d0:	f7fb fb3a 	bl	8000a48 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	f241 3288 	movw	r2, #5000	; 0x1388
 80053de:	4293      	cmp	r3, r2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e03b      	b.n	800545e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e6:	4b20      	ldr	r3, [pc, #128]	; (8005468 <HAL_RCC_ClockConfig+0x260>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d1ed      	bne.n	80053d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005400:	4b1a      	ldr	r3, [pc, #104]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	4917      	ldr	r1, [pc, #92]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 800540e:	4313      	orrs	r3, r2
 8005410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0308 	and.w	r3, r3, #8
 800541a:	2b00      	cmp	r3, #0
 800541c:	d009      	beq.n	8005432 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800541e:	4b13      	ldr	r3, [pc, #76]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	490f      	ldr	r1, [pc, #60]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 800542e:	4313      	orrs	r3, r2
 8005430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005432:	f000 f825 	bl	8005480 <HAL_RCC_GetSysClockFreq>
 8005436:	4601      	mov	r1, r0
 8005438:	4b0c      	ldr	r3, [pc, #48]	; (800546c <HAL_RCC_ClockConfig+0x264>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	091b      	lsrs	r3, r3, #4
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	4a0c      	ldr	r2, [pc, #48]	; (8005474 <HAL_RCC_ClockConfig+0x26c>)
 8005444:	5cd3      	ldrb	r3, [r2, r3]
 8005446:	f003 031f 	and.w	r3, r3, #31
 800544a:	fa21 f303 	lsr.w	r3, r1, r3
 800544e:	4a0a      	ldr	r2, [pc, #40]	; (8005478 <HAL_RCC_ClockConfig+0x270>)
 8005450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005452:	4b0a      	ldr	r3, [pc, #40]	; (800547c <HAL_RCC_ClockConfig+0x274>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f002 feb6 	bl	80081c8 <HAL_InitTick>
 800545c:	4603      	mov	r3, r0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	40022000 	.word	0x40022000
 800546c:	40021000 	.word	0x40021000
 8005470:	04c4b400 	.word	0x04c4b400
 8005474:	08008884 	.word	0x08008884
 8005478:	2000002c 	.word	0x2000002c
 800547c:	20000000 	.word	0x20000000

08005480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005486:	4b2c      	ldr	r3, [pc, #176]	; (8005538 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
 800548e:	2b04      	cmp	r3, #4
 8005490:	d102      	bne.n	8005498 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005492:	4b2a      	ldr	r3, [pc, #168]	; (800553c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	e047      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005498:	4b27      	ldr	r3, [pc, #156]	; (8005538 <HAL_RCC_GetSysClockFreq+0xb8>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 030c 	and.w	r3, r3, #12
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d102      	bne.n	80054aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054a4:	4b26      	ldr	r3, [pc, #152]	; (8005540 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	e03e      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80054aa:	4b23      	ldr	r3, [pc, #140]	; (8005538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	2b0c      	cmp	r3, #12
 80054b4:	d136      	bne.n	8005524 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054b6:	4b20      	ldr	r3, [pc, #128]	; (8005538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054c0:	4b1d      	ldr	r3, [pc, #116]	; (8005538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	091b      	lsrs	r3, r3, #4
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	3301      	adds	r3, #1
 80054cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d10c      	bne.n	80054ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054d4:	4a1a      	ldr	r2, [pc, #104]	; (8005540 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054dc:	4a16      	ldr	r2, [pc, #88]	; (8005538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054de:	68d2      	ldr	r2, [r2, #12]
 80054e0:	0a12      	lsrs	r2, r2, #8
 80054e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054e6:	fb02 f303 	mul.w	r3, r2, r3
 80054ea:	617b      	str	r3, [r7, #20]
      break;
 80054ec:	e00c      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054ee:	4a13      	ldr	r2, [pc, #76]	; (800553c <HAL_RCC_GetSysClockFreq+0xbc>)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f6:	4a10      	ldr	r2, [pc, #64]	; (8005538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054f8:	68d2      	ldr	r2, [r2, #12]
 80054fa:	0a12      	lsrs	r2, r2, #8
 80054fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005500:	fb02 f303 	mul.w	r3, r2, r3
 8005504:	617b      	str	r3, [r7, #20]
      break;
 8005506:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005508:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <HAL_RCC_GetSysClockFreq+0xb8>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	0e5b      	lsrs	r3, r3, #25
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	3301      	adds	r3, #1
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	e001      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005528:	693b      	ldr	r3, [r7, #16]
}
 800552a:	4618      	mov	r0, r3
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40021000 	.word	0x40021000
 800553c:	00f42400 	.word	0x00f42400
 8005540:	016e3600 	.word	0x016e3600

08005544 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005548:	4b03      	ldr	r3, [pc, #12]	; (8005558 <HAL_RCC_GetHCLKFreq+0x14>)
 800554a:	681b      	ldr	r3, [r3, #0]
}
 800554c:	4618      	mov	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	2000002c 	.word	0x2000002c

0800555c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005560:	f7ff fff0 	bl	8005544 <HAL_RCC_GetHCLKFreq>
 8005564:	4601      	mov	r1, r0
 8005566:	4b06      	ldr	r3, [pc, #24]	; (8005580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	0adb      	lsrs	r3, r3, #11
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	4a04      	ldr	r2, [pc, #16]	; (8005584 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005572:	5cd3      	ldrb	r3, [r2, r3]
 8005574:	f003 031f 	and.w	r3, r3, #31
 8005578:	fa21 f303 	lsr.w	r3, r1, r3
}
 800557c:	4618      	mov	r0, r3
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40021000 	.word	0x40021000
 8005584:	08008894 	.word	0x08008894

08005588 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	220f      	movs	r2, #15
 8005596:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005598:	4b12      	ldr	r3, [pc, #72]	; (80055e4 <HAL_RCC_GetClockConfig+0x5c>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 0203 	and.w	r2, r3, #3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80055a4:	4b0f      	ldr	r3, [pc, #60]	; (80055e4 <HAL_RCC_GetClockConfig+0x5c>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80055b0:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <HAL_RCC_GetClockConfig+0x5c>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80055bc:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <HAL_RCC_GetClockConfig+0x5c>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	08db      	lsrs	r3, r3, #3
 80055c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80055ca:	4b07      	ldr	r3, [pc, #28]	; (80055e8 <HAL_RCC_GetClockConfig+0x60>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 020f 	and.w	r2, r3, #15
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	601a      	str	r2, [r3, #0]
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40021000 	.word	0x40021000
 80055e8:	40022000 	.word	0x40022000

080055ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055f2:	4b1e      	ldr	r3, [pc, #120]	; (800566c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055fc:	4b1b      	ldr	r3, [pc, #108]	; (800566c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	091b      	lsrs	r3, r3, #4
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	3301      	adds	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	2b03      	cmp	r3, #3
 800560e:	d10c      	bne.n	800562a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005610:	4a17      	ldr	r2, [pc, #92]	; (8005670 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	fbb2 f3f3 	udiv	r3, r2, r3
 8005618:	4a14      	ldr	r2, [pc, #80]	; (800566c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800561a:	68d2      	ldr	r2, [r2, #12]
 800561c:	0a12      	lsrs	r2, r2, #8
 800561e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005622:	fb02 f303 	mul.w	r3, r2, r3
 8005626:	617b      	str	r3, [r7, #20]
    break;
 8005628:	e00c      	b.n	8005644 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800562a:	4a12      	ldr	r2, [pc, #72]	; (8005674 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005632:	4a0e      	ldr	r2, [pc, #56]	; (800566c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005634:	68d2      	ldr	r2, [r2, #12]
 8005636:	0a12      	lsrs	r2, r2, #8
 8005638:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800563c:	fb02 f303 	mul.w	r3, r2, r3
 8005640:	617b      	str	r3, [r7, #20]
    break;
 8005642:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005644:	4b09      	ldr	r3, [pc, #36]	; (800566c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	0e5b      	lsrs	r3, r3, #25
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	3301      	adds	r3, #1
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	fbb2 f3f3 	udiv	r3, r2, r3
 800565c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800565e:	687b      	ldr	r3, [r7, #4]
}
 8005660:	4618      	mov	r0, r3
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	40021000 	.word	0x40021000
 8005670:	016e3600 	.word	0x016e3600
 8005674:	00f42400 	.word	0x00f42400

08005678 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005680:	2300      	movs	r3, #0
 8005682:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005684:	2300      	movs	r3, #0
 8005686:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 8098 	beq.w	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005696:	2300      	movs	r3, #0
 8005698:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800569a:	4b43      	ldr	r3, [pc, #268]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800569c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10d      	bne.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056a6:	4b40      	ldr	r3, [pc, #256]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056aa:	4a3f      	ldr	r2, [pc, #252]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b0:	6593      	str	r3, [r2, #88]	; 0x58
 80056b2:	4b3d      	ldr	r3, [pc, #244]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ba:	60bb      	str	r3, [r7, #8]
 80056bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056be:	2301      	movs	r3, #1
 80056c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056c2:	4b3a      	ldr	r3, [pc, #232]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a39      	ldr	r2, [pc, #228]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056ce:	f7fb f9bb 	bl	8000a48 <HAL_GetTick>
 80056d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056d4:	e009      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d6:	f7fb f9b7 	bl	8000a48 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d902      	bls.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	74fb      	strb	r3, [r7, #19]
        break;
 80056e8:	e005      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056ea:	4b30      	ldr	r3, [pc, #192]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0ef      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80056f6:	7cfb      	ldrb	r3, [r7, #19]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d159      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056fc:	4b2a      	ldr	r3, [pc, #168]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005706:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01e      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	429a      	cmp	r2, r3
 8005716:	d019      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005718:	4b23      	ldr	r3, [pc, #140]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800571a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005722:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005724:	4b20      	ldr	r3, [pc, #128]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572a:	4a1f      	ldr	r2, [pc, #124]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800572c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005734:	4b1c      	ldr	r3, [pc, #112]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573a:	4a1b      	ldr	r2, [pc, #108]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800573c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005744:	4a18      	ldr	r2, [pc, #96]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d016      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005756:	f7fb f977 	bl	8000a48 <HAL_GetTick>
 800575a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800575c:	e00b      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800575e:	f7fb f973 	bl	8000a48 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	f241 3288 	movw	r2, #5000	; 0x1388
 800576c:	4293      	cmp	r3, r2
 800576e:	d902      	bls.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	74fb      	strb	r3, [r7, #19]
            break;
 8005774:	e006      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005776:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0ec      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005784:	7cfb      	ldrb	r3, [r7, #19]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10b      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800578a:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800578c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005798:	4903      	ldr	r1, [pc, #12]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80057a0:	e008      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057a2:	7cfb      	ldrb	r3, [r7, #19]
 80057a4:	74bb      	strb	r3, [r7, #18]
 80057a6:	e005      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80057a8:	40021000 	.word	0x40021000
 80057ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b0:	7cfb      	ldrb	r3, [r7, #19]
 80057b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057b4:	7c7b      	ldrb	r3, [r7, #17]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d105      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ba:	4baf      	ldr	r3, [pc, #700]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057be:	4aae      	ldr	r2, [pc, #696]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057d2:	4ba9      	ldr	r3, [pc, #676]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d8:	f023 0203 	bic.w	r2, r3, #3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	49a5      	ldr	r1, [pc, #660]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057f4:	4ba0      	ldr	r3, [pc, #640]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fa:	f023 020c 	bic.w	r2, r3, #12
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	499d      	ldr	r1, [pc, #628]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005816:	4b98      	ldr	r3, [pc, #608]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	4994      	ldr	r1, [pc, #592]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005838:	4b8f      	ldr	r3, [pc, #572]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	498c      	ldr	r1, [pc, #560]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0310 	and.w	r3, r3, #16
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800585a:	4b87      	ldr	r3, [pc, #540]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800585c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	4983      	ldr	r1, [pc, #524]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0320 	and.w	r3, r3, #32
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800587c:	4b7e      	ldr	r3, [pc, #504]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005882:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	497b      	ldr	r1, [pc, #492]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800589e:	4b76      	ldr	r3, [pc, #472]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	4972      	ldr	r1, [pc, #456]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058c0:	4b6d      	ldr	r3, [pc, #436]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	496a      	ldr	r1, [pc, #424]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058e2:	4b65      	ldr	r3, [pc, #404]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	4961      	ldr	r1, [pc, #388]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005904:	4b5c      	ldr	r3, [pc, #368]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005906:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800590a:	f023 0203 	bic.w	r2, r3, #3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005912:	4959      	ldr	r1, [pc, #356]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005926:	4b54      	ldr	r3, [pc, #336]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	4950      	ldr	r1, [pc, #320]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005944:	2b00      	cmp	r3, #0
 8005946:	d015      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005948:	4b4b      	ldr	r3, [pc, #300]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800594a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	4948      	ldr	r1, [pc, #288]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005966:	d105      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005968:	4b43      	ldr	r3, [pc, #268]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4a42      	ldr	r2, [pc, #264]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800596e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005972:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800597c:	2b00      	cmp	r3, #0
 800597e:	d015      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005980:	4b3d      	ldr	r3, [pc, #244]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005986:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598e:	493a      	ldr	r1, [pc, #232]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800599e:	d105      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059a0:	4b35      	ldr	r3, [pc, #212]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	4a34      	ldr	r2, [pc, #208]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d015      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059b8:	4b2f      	ldr	r3, [pc, #188]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	492c      	ldr	r1, [pc, #176]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059d6:	d105      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059d8:	4b27      	ldr	r3, [pc, #156]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	4a26      	ldr	r2, [pc, #152]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d015      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059f0:	4b21      	ldr	r3, [pc, #132]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fe:	491e      	ldr	r1, [pc, #120]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a0e:	d105      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a10:	4b19      	ldr	r3, [pc, #100]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	4a18      	ldr	r2, [pc, #96]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d015      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a28:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	4910      	ldr	r1, [pc, #64]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a46:	d105      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a48:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	4a0a      	ldr	r2, [pc, #40]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d018      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a60:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6e:	4902      	ldr	r1, [pc, #8]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a76:	e001      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005a78:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a84:	d105      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a86:	4b21      	ldr	r3, [pc, #132]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	4a20      	ldr	r2, [pc, #128]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a90:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d015      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005a9e:	4b1b      	ldr	r3, [pc, #108]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aac:	4917      	ldr	r1, [pc, #92]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005abc:	d105      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005abe:	4b13      	ldr	r3, [pc, #76]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	4a12      	ldr	r2, [pc, #72]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d015      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ad6:	4b0d      	ldr	r3, [pc, #52]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005ad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005adc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae4:	4909      	ldr	r1, [pc, #36]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005af4:	d105      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005af6:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	4a04      	ldr	r2, [pc, #16]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b00:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005b02:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40021000 	.word	0x40021000

08005b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e049      	b.n	8005bb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f002 fae8 	bl	800810c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4610      	mov	r0, r2
 8005b50:	f000 fe34 	bl	80067bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d001      	beq.n	8005bd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e054      	b.n	8005c82 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a26      	ldr	r2, [pc, #152]	; (8005c90 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d022      	beq.n	8005c40 <HAL_TIM_Base_Start_IT+0x80>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c02:	d01d      	beq.n	8005c40 <HAL_TIM_Base_Start_IT+0x80>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a22      	ldr	r2, [pc, #136]	; (8005c94 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d018      	beq.n	8005c40 <HAL_TIM_Base_Start_IT+0x80>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a21      	ldr	r2, [pc, #132]	; (8005c98 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d013      	beq.n	8005c40 <HAL_TIM_Base_Start_IT+0x80>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1f      	ldr	r2, [pc, #124]	; (8005c9c <HAL_TIM_Base_Start_IT+0xdc>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00e      	beq.n	8005c40 <HAL_TIM_Base_Start_IT+0x80>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a1e      	ldr	r2, [pc, #120]	; (8005ca0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d009      	beq.n	8005c40 <HAL_TIM_Base_Start_IT+0x80>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a1c      	ldr	r2, [pc, #112]	; (8005ca4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d004      	beq.n	8005c40 <HAL_TIM_Base_Start_IT+0x80>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a1b      	ldr	r2, [pc, #108]	; (8005ca8 <HAL_TIM_Base_Start_IT+0xe8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d115      	bne.n	8005c6c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	4b19      	ldr	r3, [pc, #100]	; (8005cac <HAL_TIM_Base_Start_IT+0xec>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b06      	cmp	r3, #6
 8005c50:	d015      	beq.n	8005c7e <HAL_TIM_Base_Start_IT+0xbe>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c58:	d011      	beq.n	8005c7e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f042 0201 	orr.w	r2, r2, #1
 8005c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c6a:	e008      	b.n	8005c7e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0201 	orr.w	r2, r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	e000      	b.n	8005c80 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	40012c00 	.word	0x40012c00
 8005c94:	40000400 	.word	0x40000400
 8005c98:	40000800 	.word	0x40000800
 8005c9c:	40000c00 	.word	0x40000c00
 8005ca0:	40013400 	.word	0x40013400
 8005ca4:	40014000 	.word	0x40014000
 8005ca8:	40015000 	.word	0x40015000
 8005cac:	00010007 	.word	0x00010007

08005cb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e049      	b.n	8005d56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f841 	bl	8005d5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3304      	adds	r3, #4
 8005cec:	4619      	mov	r1, r3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	f000 fd64 	bl	80067bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
	...

08005d74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d109      	bne.n	8005d98 <HAL_TIM_PWM_Start+0x24>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	bf14      	ite	ne
 8005d90:	2301      	movne	r3, #1
 8005d92:	2300      	moveq	r3, #0
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	e03c      	b.n	8005e12 <HAL_TIM_PWM_Start+0x9e>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d109      	bne.n	8005db2 <HAL_TIM_PWM_Start+0x3e>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	bf14      	ite	ne
 8005daa:	2301      	movne	r3, #1
 8005dac:	2300      	moveq	r3, #0
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	e02f      	b.n	8005e12 <HAL_TIM_PWM_Start+0x9e>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d109      	bne.n	8005dcc <HAL_TIM_PWM_Start+0x58>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	bf14      	ite	ne
 8005dc4:	2301      	movne	r3, #1
 8005dc6:	2300      	moveq	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	e022      	b.n	8005e12 <HAL_TIM_PWM_Start+0x9e>
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b0c      	cmp	r3, #12
 8005dd0:	d109      	bne.n	8005de6 <HAL_TIM_PWM_Start+0x72>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	bf14      	ite	ne
 8005dde:	2301      	movne	r3, #1
 8005de0:	2300      	moveq	r3, #0
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	e015      	b.n	8005e12 <HAL_TIM_PWM_Start+0x9e>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b10      	cmp	r3, #16
 8005dea:	d109      	bne.n	8005e00 <HAL_TIM_PWM_Start+0x8c>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	bf14      	ite	ne
 8005df8:	2301      	movne	r3, #1
 8005dfa:	2300      	moveq	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	e008      	b.n	8005e12 <HAL_TIM_PWM_Start+0x9e>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	bf14      	ite	ne
 8005e0c:	2301      	movne	r3, #1
 8005e0e:	2300      	moveq	r3, #0
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e0a6      	b.n	8005f68 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d104      	bne.n	8005e2a <HAL_TIM_PWM_Start+0xb6>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e28:	e023      	b.n	8005e72 <HAL_TIM_PWM_Start+0xfe>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d104      	bne.n	8005e3a <HAL_TIM_PWM_Start+0xc6>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e38:	e01b      	b.n	8005e72 <HAL_TIM_PWM_Start+0xfe>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d104      	bne.n	8005e4a <HAL_TIM_PWM_Start+0xd6>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e48:	e013      	b.n	8005e72 <HAL_TIM_PWM_Start+0xfe>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b0c      	cmp	r3, #12
 8005e4e:	d104      	bne.n	8005e5a <HAL_TIM_PWM_Start+0xe6>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e58:	e00b      	b.n	8005e72 <HAL_TIM_PWM_Start+0xfe>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d104      	bne.n	8005e6a <HAL_TIM_PWM_Start+0xf6>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e68:	e003      	b.n	8005e72 <HAL_TIM_PWM_Start+0xfe>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2201      	movs	r2, #1
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f001 f9c8 	bl	8007210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a3a      	ldr	r2, [pc, #232]	; (8005f70 <HAL_TIM_PWM_Start+0x1fc>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d018      	beq.n	8005ebc <HAL_TIM_PWM_Start+0x148>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a39      	ldr	r2, [pc, #228]	; (8005f74 <HAL_TIM_PWM_Start+0x200>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d013      	beq.n	8005ebc <HAL_TIM_PWM_Start+0x148>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a37      	ldr	r2, [pc, #220]	; (8005f78 <HAL_TIM_PWM_Start+0x204>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00e      	beq.n	8005ebc <HAL_TIM_PWM_Start+0x148>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a36      	ldr	r2, [pc, #216]	; (8005f7c <HAL_TIM_PWM_Start+0x208>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d009      	beq.n	8005ebc <HAL_TIM_PWM_Start+0x148>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a34      	ldr	r2, [pc, #208]	; (8005f80 <HAL_TIM_PWM_Start+0x20c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d004      	beq.n	8005ebc <HAL_TIM_PWM_Start+0x148>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a33      	ldr	r2, [pc, #204]	; (8005f84 <HAL_TIM_PWM_Start+0x210>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d101      	bne.n	8005ec0 <HAL_TIM_PWM_Start+0x14c>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e000      	b.n	8005ec2 <HAL_TIM_PWM_Start+0x14e>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d007      	beq.n	8005ed6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ed4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a25      	ldr	r2, [pc, #148]	; (8005f70 <HAL_TIM_PWM_Start+0x1fc>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d022      	beq.n	8005f26 <HAL_TIM_PWM_Start+0x1b2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee8:	d01d      	beq.n	8005f26 <HAL_TIM_PWM_Start+0x1b2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a26      	ldr	r2, [pc, #152]	; (8005f88 <HAL_TIM_PWM_Start+0x214>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d018      	beq.n	8005f26 <HAL_TIM_PWM_Start+0x1b2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a24      	ldr	r2, [pc, #144]	; (8005f8c <HAL_TIM_PWM_Start+0x218>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <HAL_TIM_PWM_Start+0x1b2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a23      	ldr	r2, [pc, #140]	; (8005f90 <HAL_TIM_PWM_Start+0x21c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00e      	beq.n	8005f26 <HAL_TIM_PWM_Start+0x1b2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a19      	ldr	r2, [pc, #100]	; (8005f74 <HAL_TIM_PWM_Start+0x200>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d009      	beq.n	8005f26 <HAL_TIM_PWM_Start+0x1b2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a18      	ldr	r2, [pc, #96]	; (8005f78 <HAL_TIM_PWM_Start+0x204>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d004      	beq.n	8005f26 <HAL_TIM_PWM_Start+0x1b2>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a18      	ldr	r2, [pc, #96]	; (8005f84 <HAL_TIM_PWM_Start+0x210>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d115      	bne.n	8005f52 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <HAL_TIM_PWM_Start+0x220>)
 8005f2e:	4013      	ands	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b06      	cmp	r3, #6
 8005f36:	d015      	beq.n	8005f64 <HAL_TIM_PWM_Start+0x1f0>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f3e:	d011      	beq.n	8005f64 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0201 	orr.w	r2, r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f50:	e008      	b.n	8005f64 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f042 0201 	orr.w	r2, r2, #1
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	e000      	b.n	8005f66 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	40012c00 	.word	0x40012c00
 8005f74:	40013400 	.word	0x40013400
 8005f78:	40014000 	.word	0x40014000
 8005f7c:	40014400 	.word	0x40014400
 8005f80:	40014800 	.word	0x40014800
 8005f84:	40015000 	.word	0x40015000
 8005f88:	40000400 	.word	0x40000400
 8005f8c:	40000800 	.word	0x40000800
 8005f90:	40000c00 	.word	0x40000c00
 8005f94:	00010007 	.word	0x00010007

08005f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d122      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d11b      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0202 	mvn.w	r2, #2
 8005fc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fbd0 	bl	8006780 <HAL_TIM_IC_CaptureCallback>
 8005fe0:	e005      	b.n	8005fee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fbc2 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fbd3 	bl	8006794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0304 	and.w	r3, r3, #4
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d122      	bne.n	8006048 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b04      	cmp	r3, #4
 800600e:	d11b      	bne.n	8006048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0204 	mvn.w	r2, #4
 8006018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fba6 	bl	8006780 <HAL_TIM_IC_CaptureCallback>
 8006034:	e005      	b.n	8006042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fb98 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fba9 	bl	8006794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0308 	and.w	r3, r3, #8
 8006052:	2b08      	cmp	r3, #8
 8006054:	d122      	bne.n	800609c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b08      	cmp	r3, #8
 8006062:	d11b      	bne.n	800609c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0208 	mvn.w	r2, #8
 800606c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2204      	movs	r2, #4
 8006072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fb7c 	bl	8006780 <HAL_TIM_IC_CaptureCallback>
 8006088:	e005      	b.n	8006096 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fb6e 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fb7f 	bl	8006794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	2b10      	cmp	r3, #16
 80060a8:	d122      	bne.n	80060f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b10      	cmp	r3, #16
 80060b6:	d11b      	bne.n	80060f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f06f 0210 	mvn.w	r2, #16
 80060c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2208      	movs	r2, #8
 80060c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fb52 	bl	8006780 <HAL_TIM_IC_CaptureCallback>
 80060dc:	e005      	b.n	80060ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fb44 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fb55 	bl	8006794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d10e      	bne.n	800611c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b01      	cmp	r3, #1
 800610a:	d107      	bne.n	800611c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f06f 0201 	mvn.w	r2, #1
 8006114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 fe8e 	bl	8007e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006126:	2b80      	cmp	r3, #128	; 0x80
 8006128:	d10e      	bne.n	8006148 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006134:	2b80      	cmp	r3, #128	; 0x80
 8006136:	d107      	bne.n	8006148 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f001 f92a 	bl	800739c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006156:	d10e      	bne.n	8006176 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006162:	2b80      	cmp	r3, #128	; 0x80
 8006164:	d107      	bne.n	8006176 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800616e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f001 f91d 	bl	80073b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006180:	2b40      	cmp	r3, #64	; 0x40
 8006182:	d10e      	bne.n	80061a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b40      	cmp	r3, #64	; 0x40
 8006190:	d107      	bne.n	80061a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800619a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fb03 	bl	80067a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d10e      	bne.n	80061ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	d107      	bne.n	80061ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f06f 0220 	mvn.w	r2, #32
 80061c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 f8dd 	bl	8007388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061dc:	d10f      	bne.n	80061fe <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ec:	d107      	bne.n	80061fe <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80061f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 f8e3 	bl	80073c4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006208:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800620c:	d10f      	bne.n	800622e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006218:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800621c:	d107      	bne.n	800622e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 f8d5 	bl	80073d8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800623c:	d10f      	bne.n	800625e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800624c:	d107      	bne.n	800625e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f001 f8c7 	bl	80073ec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006268:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800626c:	d10f      	bne.n	800628e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006278:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800627c:	d107      	bne.n	800628e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f001 f8b9 	bl	8007400 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800628e:	bf00      	nop
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e0fd      	b.n	80064ae <HAL_TIM_PWM_ConfigChannel+0x216>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b14      	cmp	r3, #20
 80062be:	f200 80f0 	bhi.w	80064a2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	0800631d 	.word	0x0800631d
 80062cc:	080064a3 	.word	0x080064a3
 80062d0:	080064a3 	.word	0x080064a3
 80062d4:	080064a3 	.word	0x080064a3
 80062d8:	0800635d 	.word	0x0800635d
 80062dc:	080064a3 	.word	0x080064a3
 80062e0:	080064a3 	.word	0x080064a3
 80062e4:	080064a3 	.word	0x080064a3
 80062e8:	0800639f 	.word	0x0800639f
 80062ec:	080064a3 	.word	0x080064a3
 80062f0:	080064a3 	.word	0x080064a3
 80062f4:	080064a3 	.word	0x080064a3
 80062f8:	080063df 	.word	0x080063df
 80062fc:	080064a3 	.word	0x080064a3
 8006300:	080064a3 	.word	0x080064a3
 8006304:	080064a3 	.word	0x080064a3
 8006308:	08006421 	.word	0x08006421
 800630c:	080064a3 	.word	0x080064a3
 8006310:	080064a3 	.word	0x080064a3
 8006314:	080064a3 	.word	0x080064a3
 8006318:	08006461 	.word	0x08006461
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	4618      	mov	r0, r3
 8006324:	f000 faf2 	bl	800690c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0208 	orr.w	r2, r2, #8
 8006336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699a      	ldr	r2, [r3, #24]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0204 	bic.w	r2, r2, #4
 8006346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6999      	ldr	r1, [r3, #24]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	619a      	str	r2, [r3, #24]
      break;
 800635a:	e0a3      	b.n	80064a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68b9      	ldr	r1, [r7, #8]
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fb6c 	bl	8006a40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	699a      	ldr	r2, [r3, #24]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6999      	ldr	r1, [r3, #24]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	021a      	lsls	r2, r3, #8
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	619a      	str	r2, [r3, #24]
      break;
 800639c:	e082      	b.n	80064a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68b9      	ldr	r1, [r7, #8]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 fbdf 	bl	8006b68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f042 0208 	orr.w	r2, r2, #8
 80063b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69da      	ldr	r2, [r3, #28]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0204 	bic.w	r2, r2, #4
 80063c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69d9      	ldr	r1, [r3, #28]
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	430a      	orrs	r2, r1
 80063da:	61da      	str	r2, [r3, #28]
      break;
 80063dc:	e062      	b.n	80064a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 fc51 	bl	8006c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69da      	ldr	r2, [r3, #28]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69da      	ldr	r2, [r3, #28]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69d9      	ldr	r1, [r3, #28]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	021a      	lsls	r2, r3, #8
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	61da      	str	r2, [r3, #28]
      break;
 800641e:	e041      	b.n	80064a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fcc4 	bl	8006db4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0208 	orr.w	r2, r2, #8
 800643a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0204 	bic.w	r2, r2, #4
 800644a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	691a      	ldr	r2, [r3, #16]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800645e:	e021      	b.n	80064a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68b9      	ldr	r1, [r7, #8]
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fd0e 	bl	8006e88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800647a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800648a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	021a      	lsls	r2, r3, #8
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80064a0:	e000      	b.n	80064a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80064a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop

080064b8 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_TIM_GenerateEvent+0x18>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e014      	b.n	80064fa <HAL_TIM_GenerateEvent+0x42>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_TIM_ConfigClockSource+0x18>
 800651c:	2302      	movs	r3, #2
 800651e:	e0d2      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x1be>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800653e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006542:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800654a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655c:	f000 80a9 	beq.w	80066b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006564:	d81a      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x94>
 8006566:	2b30      	cmp	r3, #48	; 0x30
 8006568:	f000 809a 	beq.w	80066a0 <HAL_TIM_ConfigClockSource+0x198>
 800656c:	2b30      	cmp	r3, #48	; 0x30
 800656e:	d809      	bhi.n	8006584 <HAL_TIM_ConfigClockSource+0x7c>
 8006570:	2b10      	cmp	r3, #16
 8006572:	f000 8095 	beq.w	80066a0 <HAL_TIM_ConfigClockSource+0x198>
 8006576:	2b20      	cmp	r3, #32
 8006578:	f000 8092 	beq.w	80066a0 <HAL_TIM_ConfigClockSource+0x198>
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 808f 	beq.w	80066a0 <HAL_TIM_ConfigClockSource+0x198>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006582:	e097      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006584:	2b50      	cmp	r3, #80	; 0x50
 8006586:	d05b      	beq.n	8006640 <HAL_TIM_ConfigClockSource+0x138>
 8006588:	2b50      	cmp	r3, #80	; 0x50
 800658a:	d802      	bhi.n	8006592 <HAL_TIM_ConfigClockSource+0x8a>
 800658c:	2b40      	cmp	r3, #64	; 0x40
 800658e:	d077      	beq.n	8006680 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006590:	e090      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006592:	2b60      	cmp	r3, #96	; 0x60
 8006594:	d064      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0x158>
 8006596:	2b70      	cmp	r3, #112	; 0x70
 8006598:	d028      	beq.n	80065ec <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800659a:	e08b      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800659c:	4a4c      	ldr	r2, [pc, #304]	; (80066d0 <HAL_TIM_ConfigClockSource+0x1c8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d07e      	beq.n	80066a0 <HAL_TIM_ConfigClockSource+0x198>
 80065a2:	4a4b      	ldr	r2, [pc, #300]	; (80066d0 <HAL_TIM_ConfigClockSource+0x1c8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d810      	bhi.n	80065ca <HAL_TIM_ConfigClockSource+0xc2>
 80065a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ac:	d078      	beq.n	80066a0 <HAL_TIM_ConfigClockSource+0x198>
 80065ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065b2:	d803      	bhi.n	80065bc <HAL_TIM_ConfigClockSource+0xb4>
 80065b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b8:	d02f      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x112>
      break;
 80065ba:	e07b      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80065bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80065c0:	d06e      	beq.n	80066a0 <HAL_TIM_ConfigClockSource+0x198>
 80065c2:	4a44      	ldr	r2, [pc, #272]	; (80066d4 <HAL_TIM_ConfigClockSource+0x1cc>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d06b      	beq.n	80066a0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80065c8:	e074      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80065ca:	4a43      	ldr	r2, [pc, #268]	; (80066d8 <HAL_TIM_ConfigClockSource+0x1d0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d067      	beq.n	80066a0 <HAL_TIM_ConfigClockSource+0x198>
 80065d0:	4a41      	ldr	r2, [pc, #260]	; (80066d8 <HAL_TIM_ConfigClockSource+0x1d0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d803      	bhi.n	80065de <HAL_TIM_ConfigClockSource+0xd6>
 80065d6:	4a41      	ldr	r2, [pc, #260]	; (80066dc <HAL_TIM_ConfigClockSource+0x1d4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d061      	beq.n	80066a0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80065dc:	e06a      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80065de:	4a40      	ldr	r2, [pc, #256]	; (80066e0 <HAL_TIM_ConfigClockSource+0x1d8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d05d      	beq.n	80066a0 <HAL_TIM_ConfigClockSource+0x198>
 80065e4:	4a3f      	ldr	r2, [pc, #252]	; (80066e4 <HAL_TIM_ConfigClockSource+0x1dc>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d05a      	beq.n	80066a0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80065ea:	e063      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6818      	ldr	r0, [r3, #0]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	6899      	ldr	r1, [r3, #8]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f000 fde8 	bl	80071d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800660e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	609a      	str	r2, [r3, #8]
      break;
 8006618:	e04c      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	6899      	ldr	r1, [r3, #8]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f000 fdd1 	bl	80071d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800663c:	609a      	str	r2, [r3, #8]
      break;
 800663e:	e039      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6818      	ldr	r0, [r3, #0]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	6859      	ldr	r1, [r3, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	461a      	mov	r2, r3
 800664e:	f000 fd43 	bl	80070d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2150      	movs	r1, #80	; 0x50
 8006658:	4618      	mov	r0, r3
 800665a:	f000 fd9c 	bl	8007196 <TIM_ITRx_SetConfig>
      break;
 800665e:	e029      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	6859      	ldr	r1, [r3, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	461a      	mov	r2, r3
 800666e:	f000 fd62 	bl	8007136 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2160      	movs	r1, #96	; 0x60
 8006678:	4618      	mov	r0, r3
 800667a:	f000 fd8c 	bl	8007196 <TIM_ITRx_SetConfig>
      break;
 800667e:	e019      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	6859      	ldr	r1, [r3, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	461a      	mov	r2, r3
 800668e:	f000 fd23 	bl	80070d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2140      	movs	r1, #64	; 0x40
 8006698:	4618      	mov	r0, r3
 800669a:	f000 fd7c 	bl	8007196 <TIM_ITRx_SetConfig>
      break;
 800669e:	e009      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x1ac>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4619      	mov	r1, r3
 80066aa:	4610      	mov	r0, r2
 80066ac:	f000 fd73 	bl	8007196 <TIM_ITRx_SetConfig>
        break;
 80066b0:	e000      	b.n	80066b4 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 80066b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	00100030 	.word	0x00100030
 80066d4:	00100020 	.word	0x00100020
 80066d8:	00100050 	.word	0x00100050
 80066dc:	00100040 	.word	0x00100040
 80066e0:	00100060 	.word	0x00100060
 80066e4:	00100070 	.word	0x00100070

080066e8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_TIM_SlaveConfigSynchro+0x18>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e031      	b.n	8006764 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fc24 	bl	8006f60 <TIM_SlaveTimer_SetConfig>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d009      	beq.n	8006732 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e018      	b.n	8006764 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006740:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68da      	ldr	r2, [r3, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006750:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a46      	ldr	r2, [pc, #280]	; (80068e8 <TIM_Base_SetConfig+0x12c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d017      	beq.n	8006804 <TIM_Base_SetConfig+0x48>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067da:	d013      	beq.n	8006804 <TIM_Base_SetConfig+0x48>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a43      	ldr	r2, [pc, #268]	; (80068ec <TIM_Base_SetConfig+0x130>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00f      	beq.n	8006804 <TIM_Base_SetConfig+0x48>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a42      	ldr	r2, [pc, #264]	; (80068f0 <TIM_Base_SetConfig+0x134>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d00b      	beq.n	8006804 <TIM_Base_SetConfig+0x48>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a41      	ldr	r2, [pc, #260]	; (80068f4 <TIM_Base_SetConfig+0x138>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d007      	beq.n	8006804 <TIM_Base_SetConfig+0x48>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a40      	ldr	r2, [pc, #256]	; (80068f8 <TIM_Base_SetConfig+0x13c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d003      	beq.n	8006804 <TIM_Base_SetConfig+0x48>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a3f      	ldr	r2, [pc, #252]	; (80068fc <TIM_Base_SetConfig+0x140>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d108      	bne.n	8006816 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a33      	ldr	r2, [pc, #204]	; (80068e8 <TIM_Base_SetConfig+0x12c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d023      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006824:	d01f      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a30      	ldr	r2, [pc, #192]	; (80068ec <TIM_Base_SetConfig+0x130>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d01b      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a2f      	ldr	r2, [pc, #188]	; (80068f0 <TIM_Base_SetConfig+0x134>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d017      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a2e      	ldr	r2, [pc, #184]	; (80068f4 <TIM_Base_SetConfig+0x138>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d013      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a2d      	ldr	r2, [pc, #180]	; (80068f8 <TIM_Base_SetConfig+0x13c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00f      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a2d      	ldr	r2, [pc, #180]	; (8006900 <TIM_Base_SetConfig+0x144>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00b      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a2c      	ldr	r2, [pc, #176]	; (8006904 <TIM_Base_SetConfig+0x148>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d007      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a2b      	ldr	r2, [pc, #172]	; (8006908 <TIM_Base_SetConfig+0x14c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d003      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a26      	ldr	r2, [pc, #152]	; (80068fc <TIM_Base_SetConfig+0x140>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d108      	bne.n	8006878 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800686c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4313      	orrs	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a12      	ldr	r2, [pc, #72]	; (80068e8 <TIM_Base_SetConfig+0x12c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d013      	beq.n	80068cc <TIM_Base_SetConfig+0x110>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a14      	ldr	r2, [pc, #80]	; (80068f8 <TIM_Base_SetConfig+0x13c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00f      	beq.n	80068cc <TIM_Base_SetConfig+0x110>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a14      	ldr	r2, [pc, #80]	; (8006900 <TIM_Base_SetConfig+0x144>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00b      	beq.n	80068cc <TIM_Base_SetConfig+0x110>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a13      	ldr	r2, [pc, #76]	; (8006904 <TIM_Base_SetConfig+0x148>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d007      	beq.n	80068cc <TIM_Base_SetConfig+0x110>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a12      	ldr	r2, [pc, #72]	; (8006908 <TIM_Base_SetConfig+0x14c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_Base_SetConfig+0x110>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a0d      	ldr	r2, [pc, #52]	; (80068fc <TIM_Base_SetConfig+0x140>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d103      	bne.n	80068d4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	615a      	str	r2, [r3, #20]
}
 80068da:	bf00      	nop
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	40012c00 	.word	0x40012c00
 80068ec:	40000400 	.word	0x40000400
 80068f0:	40000800 	.word	0x40000800
 80068f4:	40000c00 	.word	0x40000c00
 80068f8:	40013400 	.word	0x40013400
 80068fc:	40015000 	.word	0x40015000
 8006900:	40014000 	.word	0x40014000
 8006904:	40014400 	.word	0x40014400
 8006908:	40014800 	.word	0x40014800

0800690c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	f023 0201 	bic.w	r2, r3, #1
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800693a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 0303 	bic.w	r3, r3, #3
 8006946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f023 0302 	bic.w	r3, r3, #2
 8006958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	4313      	orrs	r3, r2
 8006962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a30      	ldr	r2, [pc, #192]	; (8006a28 <TIM_OC1_SetConfig+0x11c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d013      	beq.n	8006994 <TIM_OC1_SetConfig+0x88>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a2f      	ldr	r2, [pc, #188]	; (8006a2c <TIM_OC1_SetConfig+0x120>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d00f      	beq.n	8006994 <TIM_OC1_SetConfig+0x88>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a2e      	ldr	r2, [pc, #184]	; (8006a30 <TIM_OC1_SetConfig+0x124>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00b      	beq.n	8006994 <TIM_OC1_SetConfig+0x88>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a2d      	ldr	r2, [pc, #180]	; (8006a34 <TIM_OC1_SetConfig+0x128>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d007      	beq.n	8006994 <TIM_OC1_SetConfig+0x88>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a2c      	ldr	r2, [pc, #176]	; (8006a38 <TIM_OC1_SetConfig+0x12c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d003      	beq.n	8006994 <TIM_OC1_SetConfig+0x88>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a2b      	ldr	r2, [pc, #172]	; (8006a3c <TIM_OC1_SetConfig+0x130>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d10c      	bne.n	80069ae <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f023 0308 	bic.w	r3, r3, #8
 800699a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f023 0304 	bic.w	r3, r3, #4
 80069ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a1d      	ldr	r2, [pc, #116]	; (8006a28 <TIM_OC1_SetConfig+0x11c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d013      	beq.n	80069de <TIM_OC1_SetConfig+0xd2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a1c      	ldr	r2, [pc, #112]	; (8006a2c <TIM_OC1_SetConfig+0x120>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00f      	beq.n	80069de <TIM_OC1_SetConfig+0xd2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a1b      	ldr	r2, [pc, #108]	; (8006a30 <TIM_OC1_SetConfig+0x124>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00b      	beq.n	80069de <TIM_OC1_SetConfig+0xd2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a1a      	ldr	r2, [pc, #104]	; (8006a34 <TIM_OC1_SetConfig+0x128>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d007      	beq.n	80069de <TIM_OC1_SetConfig+0xd2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a19      	ldr	r2, [pc, #100]	; (8006a38 <TIM_OC1_SetConfig+0x12c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d003      	beq.n	80069de <TIM_OC1_SetConfig+0xd2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a18      	ldr	r2, [pc, #96]	; (8006a3c <TIM_OC1_SetConfig+0x130>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d111      	bne.n	8006a02 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	621a      	str	r2, [r3, #32]
}
 8006a1c:	bf00      	nop
 8006a1e:	371c      	adds	r7, #28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	40012c00 	.word	0x40012c00
 8006a2c:	40013400 	.word	0x40013400
 8006a30:	40014000 	.word	0x40014000
 8006a34:	40014400 	.word	0x40014400
 8006a38:	40014800 	.word	0x40014800
 8006a3c:	40015000 	.word	0x40015000

08006a40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	f023 0210 	bic.w	r2, r3, #16
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	021b      	lsls	r3, r3, #8
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f023 0320 	bic.w	r3, r3, #32
 8006a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	011b      	lsls	r3, r3, #4
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a2c      	ldr	r2, [pc, #176]	; (8006b50 <TIM_OC2_SetConfig+0x110>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d007      	beq.n	8006ab4 <TIM_OC2_SetConfig+0x74>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a2b      	ldr	r2, [pc, #172]	; (8006b54 <TIM_OC2_SetConfig+0x114>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_OC2_SetConfig+0x74>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a2a      	ldr	r2, [pc, #168]	; (8006b58 <TIM_OC2_SetConfig+0x118>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d10d      	bne.n	8006ad0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ace:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a1f      	ldr	r2, [pc, #124]	; (8006b50 <TIM_OC2_SetConfig+0x110>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d013      	beq.n	8006b00 <TIM_OC2_SetConfig+0xc0>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a1e      	ldr	r2, [pc, #120]	; (8006b54 <TIM_OC2_SetConfig+0x114>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00f      	beq.n	8006b00 <TIM_OC2_SetConfig+0xc0>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a1e      	ldr	r2, [pc, #120]	; (8006b5c <TIM_OC2_SetConfig+0x11c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d00b      	beq.n	8006b00 <TIM_OC2_SetConfig+0xc0>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a1d      	ldr	r2, [pc, #116]	; (8006b60 <TIM_OC2_SetConfig+0x120>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d007      	beq.n	8006b00 <TIM_OC2_SetConfig+0xc0>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a1c      	ldr	r2, [pc, #112]	; (8006b64 <TIM_OC2_SetConfig+0x124>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d003      	beq.n	8006b00 <TIM_OC2_SetConfig+0xc0>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a17      	ldr	r2, [pc, #92]	; (8006b58 <TIM_OC2_SetConfig+0x118>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d113      	bne.n	8006b28 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	621a      	str	r2, [r3, #32]
}
 8006b42:	bf00      	nop
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	40012c00 	.word	0x40012c00
 8006b54:	40013400 	.word	0x40013400
 8006b58:	40015000 	.word	0x40015000
 8006b5c:	40014000 	.word	0x40014000
 8006b60:	40014400 	.word	0x40014400
 8006b64:	40014800 	.word	0x40014800

08006b68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0303 	bic.w	r3, r3, #3
 8006ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a2b      	ldr	r2, [pc, #172]	; (8006c74 <TIM_OC3_SetConfig+0x10c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d007      	beq.n	8006bda <TIM_OC3_SetConfig+0x72>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a2a      	ldr	r2, [pc, #168]	; (8006c78 <TIM_OC3_SetConfig+0x110>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d003      	beq.n	8006bda <TIM_OC3_SetConfig+0x72>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a29      	ldr	r2, [pc, #164]	; (8006c7c <TIM_OC3_SetConfig+0x114>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d10d      	bne.n	8006bf6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	021b      	lsls	r3, r3, #8
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a1e      	ldr	r2, [pc, #120]	; (8006c74 <TIM_OC3_SetConfig+0x10c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d013      	beq.n	8006c26 <TIM_OC3_SetConfig+0xbe>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a1d      	ldr	r2, [pc, #116]	; (8006c78 <TIM_OC3_SetConfig+0x110>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d00f      	beq.n	8006c26 <TIM_OC3_SetConfig+0xbe>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a1d      	ldr	r2, [pc, #116]	; (8006c80 <TIM_OC3_SetConfig+0x118>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00b      	beq.n	8006c26 <TIM_OC3_SetConfig+0xbe>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a1c      	ldr	r2, [pc, #112]	; (8006c84 <TIM_OC3_SetConfig+0x11c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d007      	beq.n	8006c26 <TIM_OC3_SetConfig+0xbe>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a1b      	ldr	r2, [pc, #108]	; (8006c88 <TIM_OC3_SetConfig+0x120>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d003      	beq.n	8006c26 <TIM_OC3_SetConfig+0xbe>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a16      	ldr	r2, [pc, #88]	; (8006c7c <TIM_OC3_SetConfig+0x114>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d113      	bne.n	8006c4e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	011b      	lsls	r3, r3, #4
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	621a      	str	r2, [r3, #32]
}
 8006c68:	bf00      	nop
 8006c6a:	371c      	adds	r7, #28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	40012c00 	.word	0x40012c00
 8006c78:	40013400 	.word	0x40013400
 8006c7c:	40015000 	.word	0x40015000
 8006c80:	40014000 	.word	0x40014000
 8006c84:	40014400 	.word	0x40014400
 8006c88:	40014800 	.word	0x40014800

08006c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	021b      	lsls	r3, r3, #8
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	031b      	lsls	r3, r3, #12
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a2c      	ldr	r2, [pc, #176]	; (8006d9c <TIM_OC4_SetConfig+0x110>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d007      	beq.n	8006d00 <TIM_OC4_SetConfig+0x74>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a2b      	ldr	r2, [pc, #172]	; (8006da0 <TIM_OC4_SetConfig+0x114>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d003      	beq.n	8006d00 <TIM_OC4_SetConfig+0x74>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a2a      	ldr	r2, [pc, #168]	; (8006da4 <TIM_OC4_SetConfig+0x118>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d10d      	bne.n	8006d1c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	031b      	lsls	r3, r3, #12
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a1f      	ldr	r2, [pc, #124]	; (8006d9c <TIM_OC4_SetConfig+0x110>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d013      	beq.n	8006d4c <TIM_OC4_SetConfig+0xc0>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a1e      	ldr	r2, [pc, #120]	; (8006da0 <TIM_OC4_SetConfig+0x114>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00f      	beq.n	8006d4c <TIM_OC4_SetConfig+0xc0>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a1e      	ldr	r2, [pc, #120]	; (8006da8 <TIM_OC4_SetConfig+0x11c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00b      	beq.n	8006d4c <TIM_OC4_SetConfig+0xc0>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a1d      	ldr	r2, [pc, #116]	; (8006dac <TIM_OC4_SetConfig+0x120>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d007      	beq.n	8006d4c <TIM_OC4_SetConfig+0xc0>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a1c      	ldr	r2, [pc, #112]	; (8006db0 <TIM_OC4_SetConfig+0x124>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d003      	beq.n	8006d4c <TIM_OC4_SetConfig+0xc0>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a17      	ldr	r2, [pc, #92]	; (8006da4 <TIM_OC4_SetConfig+0x118>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d113      	bne.n	8006d74 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d52:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d5a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	019b      	lsls	r3, r3, #6
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	019b      	lsls	r3, r3, #6
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	621a      	str	r2, [r3, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40012c00 	.word	0x40012c00
 8006da0:	40013400 	.word	0x40013400
 8006da4:	40015000 	.word	0x40015000
 8006da8:	40014000 	.word	0x40014000
 8006dac:	40014400 	.word	0x40014400
 8006db0:	40014800 	.word	0x40014800

08006db4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006df8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	041b      	lsls	r3, r3, #16
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a19      	ldr	r2, [pc, #100]	; (8006e70 <TIM_OC5_SetConfig+0xbc>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d013      	beq.n	8006e36 <TIM_OC5_SetConfig+0x82>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a18      	ldr	r2, [pc, #96]	; (8006e74 <TIM_OC5_SetConfig+0xc0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d00f      	beq.n	8006e36 <TIM_OC5_SetConfig+0x82>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a17      	ldr	r2, [pc, #92]	; (8006e78 <TIM_OC5_SetConfig+0xc4>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d00b      	beq.n	8006e36 <TIM_OC5_SetConfig+0x82>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a16      	ldr	r2, [pc, #88]	; (8006e7c <TIM_OC5_SetConfig+0xc8>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d007      	beq.n	8006e36 <TIM_OC5_SetConfig+0x82>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a15      	ldr	r2, [pc, #84]	; (8006e80 <TIM_OC5_SetConfig+0xcc>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d003      	beq.n	8006e36 <TIM_OC5_SetConfig+0x82>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a14      	ldr	r2, [pc, #80]	; (8006e84 <TIM_OC5_SetConfig+0xd0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d109      	bne.n	8006e4a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	021b      	lsls	r3, r3, #8
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	621a      	str	r2, [r3, #32]
}
 8006e64:	bf00      	nop
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	40012c00 	.word	0x40012c00
 8006e74:	40013400 	.word	0x40013400
 8006e78:	40014000 	.word	0x40014000
 8006e7c:	40014400 	.word	0x40014400
 8006e80:	40014800 	.word	0x40014800
 8006e84:	40015000 	.word	0x40015000

08006e88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	021b      	lsls	r3, r3, #8
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	051b      	lsls	r3, r3, #20
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a1a      	ldr	r2, [pc, #104]	; (8006f48 <TIM_OC6_SetConfig+0xc0>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d013      	beq.n	8006f0c <TIM_OC6_SetConfig+0x84>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a19      	ldr	r2, [pc, #100]	; (8006f4c <TIM_OC6_SetConfig+0xc4>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d00f      	beq.n	8006f0c <TIM_OC6_SetConfig+0x84>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a18      	ldr	r2, [pc, #96]	; (8006f50 <TIM_OC6_SetConfig+0xc8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d00b      	beq.n	8006f0c <TIM_OC6_SetConfig+0x84>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a17      	ldr	r2, [pc, #92]	; (8006f54 <TIM_OC6_SetConfig+0xcc>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d007      	beq.n	8006f0c <TIM_OC6_SetConfig+0x84>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a16      	ldr	r2, [pc, #88]	; (8006f58 <TIM_OC6_SetConfig+0xd0>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d003      	beq.n	8006f0c <TIM_OC6_SetConfig+0x84>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a15      	ldr	r2, [pc, #84]	; (8006f5c <TIM_OC6_SetConfig+0xd4>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d109      	bne.n	8006f20 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	029b      	lsls	r3, r3, #10
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	621a      	str	r2, [r3, #32]
}
 8006f3a:	bf00      	nop
 8006f3c:	371c      	adds	r7, #28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	40012c00 	.word	0x40012c00
 8006f4c:	40013400 	.word	0x40013400
 8006f50:	40014000 	.word	0x40014000
 8006f54:	40014400 	.word	0x40014400
 8006f58:	40014800 	.word	0x40014800
 8006f5c:	40015000 	.word	0x40015000

08006f60 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f8e:	f023 0307 	bic.w	r3, r3, #7
 8006f92:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	2b70      	cmp	r3, #112	; 0x70
 8006fac:	d034      	beq.n	8007018 <TIM_SlaveTimer_SetConfig+0xb8>
 8006fae:	2b70      	cmp	r3, #112	; 0x70
 8006fb0:	d811      	bhi.n	8006fd6 <TIM_SlaveTimer_SetConfig+0x76>
 8006fb2:	2b30      	cmp	r3, #48	; 0x30
 8006fb4:	d07d      	beq.n	80070b2 <TIM_SlaveTimer_SetConfig+0x152>
 8006fb6:	2b30      	cmp	r3, #48	; 0x30
 8006fb8:	d806      	bhi.n	8006fc8 <TIM_SlaveTimer_SetConfig+0x68>
 8006fba:	2b10      	cmp	r3, #16
 8006fbc:	d079      	beq.n	80070b2 <TIM_SlaveTimer_SetConfig+0x152>
 8006fbe:	2b20      	cmp	r3, #32
 8006fc0:	d077      	beq.n	80070b2 <TIM_SlaveTimer_SetConfig+0x152>
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d075      	beq.n	80070b2 <TIM_SlaveTimer_SetConfig+0x152>
        assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
        break;
      }

    default:
      break;
 8006fc6:	e075      	b.n	80070b4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006fc8:	2b50      	cmp	r3, #80	; 0x50
 8006fca:	d05e      	beq.n	800708a <TIM_SlaveTimer_SetConfig+0x12a>
 8006fcc:	2b60      	cmp	r3, #96	; 0x60
 8006fce:	d066      	beq.n	800709e <TIM_SlaveTimer_SetConfig+0x13e>
 8006fd0:	2b40      	cmp	r3, #64	; 0x40
 8006fd2:	d02c      	beq.n	800702e <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8006fd4:	e06e      	b.n	80070b4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006fd6:	4a3a      	ldr	r2, [pc, #232]	; (80070c0 <TIM_SlaveTimer_SetConfig+0x160>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d06a      	beq.n	80070b2 <TIM_SlaveTimer_SetConfig+0x152>
 8006fdc:	4a38      	ldr	r2, [pc, #224]	; (80070c0 <TIM_SlaveTimer_SetConfig+0x160>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d809      	bhi.n	8006ff6 <TIM_SlaveTimer_SetConfig+0x96>
 8006fe2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006fe6:	d064      	beq.n	80070b2 <TIM_SlaveTimer_SetConfig+0x152>
 8006fe8:	4a36      	ldr	r2, [pc, #216]	; (80070c4 <TIM_SlaveTimer_SetConfig+0x164>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d061      	beq.n	80070b2 <TIM_SlaveTimer_SetConfig+0x152>
 8006fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff2:	d05e      	beq.n	80070b2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006ff4:	e05e      	b.n	80070b4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006ff6:	4a34      	ldr	r2, [pc, #208]	; (80070c8 <TIM_SlaveTimer_SetConfig+0x168>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d05a      	beq.n	80070b2 <TIM_SlaveTimer_SetConfig+0x152>
 8006ffc:	4a32      	ldr	r2, [pc, #200]	; (80070c8 <TIM_SlaveTimer_SetConfig+0x168>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d803      	bhi.n	800700a <TIM_SlaveTimer_SetConfig+0xaa>
 8007002:	4a32      	ldr	r2, [pc, #200]	; (80070cc <TIM_SlaveTimer_SetConfig+0x16c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d054      	beq.n	80070b2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007008:	e054      	b.n	80070b4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800700a:	4a31      	ldr	r2, [pc, #196]	; (80070d0 <TIM_SlaveTimer_SetConfig+0x170>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d050      	beq.n	80070b2 <TIM_SlaveTimer_SetConfig+0x152>
 8007010:	4a30      	ldr	r2, [pc, #192]	; (80070d4 <TIM_SlaveTimer_SetConfig+0x174>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d04d      	beq.n	80070b2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007016:	e04d      	b.n	80070b4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6818      	ldr	r0, [r3, #0]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	68d9      	ldr	r1, [r3, #12]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	f000 f8d2 	bl	80071d0 <TIM_ETR_SetConfig>
      break;
 800702c:	e042      	b.n	80070b4 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b05      	cmp	r3, #5
 8007034:	d004      	beq.n	8007040 <TIM_SlaveTimer_SetConfig+0xe0>
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800703e:	d101      	bne.n	8007044 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e038      	b.n	80070b6 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6a1a      	ldr	r2, [r3, #32]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 0201 	bic.w	r2, r2, #1
 800705a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800706a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	011b      	lsls	r3, r3, #4
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	621a      	str	r2, [r3, #32]
      break;
 8007088:	e014      	b.n	80070b4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6818      	ldr	r0, [r3, #0]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	6899      	ldr	r1, [r3, #8]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	461a      	mov	r2, r3
 8007098:	f000 f81e 	bl	80070d8 <TIM_TI1_ConfigInputStage>
      break;
 800709c:	e00a      	b.n	80070b4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	6899      	ldr	r1, [r3, #8]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	461a      	mov	r2, r3
 80070ac:	f000 f843 	bl	8007136 <TIM_TI2_ConfigInputStage>
      break;
 80070b0:	e000      	b.n	80070b4 <TIM_SlaveTimer_SetConfig+0x154>
        break;
 80070b2:	bf00      	nop
  }
  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	00100030 	.word	0x00100030
 80070c4:	00100020 	.word	0x00100020
 80070c8:	00100050 	.word	0x00100050
 80070cc:	00100040 	.word	0x00100040
 80070d0:	00100060 	.word	0x00100060
 80070d4:	00100070 	.word	0x00100070

080070d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	f023 0201 	bic.w	r2, r3, #1
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f023 030a 	bic.w	r3, r3, #10
 8007114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	4313      	orrs	r3, r2
 800711c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	621a      	str	r2, [r3, #32]
}
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007136:	b480      	push	{r7}
 8007138:	b087      	sub	sp, #28
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	f023 0210 	bic.w	r2, r3, #16
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007160:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	031b      	lsls	r3, r3, #12
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	4313      	orrs	r3, r2
 800716a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007172:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	011b      	lsls	r3, r3, #4
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	4313      	orrs	r3, r2
 800717c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	621a      	str	r2, [r3, #32]
}
 800718a:	bf00      	nop
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007196:	b480      	push	{r7}
 8007198:	b085      	sub	sp, #20
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80071ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	f043 0307 	orr.w	r3, r3, #7
 80071bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	609a      	str	r2, [r3, #8]
}
 80071c4:	bf00      	nop
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	021a      	lsls	r2, r3, #8
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	431a      	orrs	r2, r3
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	609a      	str	r2, [r3, #8]
}
 8007204:	bf00      	nop
 8007206:	371c      	adds	r7, #28
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	f003 031f 	and.w	r3, r3, #31
 8007222:	2201      	movs	r2, #1
 8007224:	fa02 f303 	lsl.w	r3, r2, r3
 8007228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6a1a      	ldr	r2, [r3, #32]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	43db      	mvns	r3, r3
 8007232:	401a      	ands	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6a1a      	ldr	r2, [r3, #32]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f003 031f 	and.w	r3, r3, #31
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	fa01 f303 	lsl.w	r3, r1, r3
 8007248:	431a      	orrs	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	621a      	str	r2, [r3, #32]
}
 800724e:	bf00      	nop
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
	...

0800725c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007270:	2302      	movs	r3, #2
 8007272:	e074      	b.n	800735e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a34      	ldr	r2, [pc, #208]	; (800736c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d009      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a33      	ldr	r2, [pc, #204]	; (8007370 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d004      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a31      	ldr	r2, [pc, #196]	; (8007374 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d108      	bne.n	80072c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80072ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a21      	ldr	r2, [pc, #132]	; (800736c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d022      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f4:	d01d      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1f      	ldr	r2, [pc, #124]	; (8007378 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d018      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a1d      	ldr	r2, [pc, #116]	; (800737c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d013      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a1c      	ldr	r2, [pc, #112]	; (8007380 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00e      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a15      	ldr	r2, [pc, #84]	; (8007370 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d009      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a18      	ldr	r2, [pc, #96]	; (8007384 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d004      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a11      	ldr	r2, [pc, #68]	; (8007374 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d10c      	bne.n	800734c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	4313      	orrs	r3, r2
 8007342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	40012c00 	.word	0x40012c00
 8007370:	40013400 	.word	0x40013400
 8007374:	40015000 	.word	0x40015000
 8007378:	40000400 	.word	0x40000400
 800737c:	40000800 	.word	0x40000800
 8007380:	40000c00 	.word	0x40000c00
 8007384:	40014000 	.word	0x40014000

08007388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <__NVIC_SetPriority>:
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	4603      	mov	r3, r0
 800741c:	6039      	str	r1, [r7, #0]
 800741e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007424:	2b00      	cmp	r3, #0
 8007426:	db0a      	blt.n	800743e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	b2da      	uxtb	r2, r3
 800742c:	490c      	ldr	r1, [pc, #48]	; (8007460 <__NVIC_SetPriority+0x4c>)
 800742e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007432:	0112      	lsls	r2, r2, #4
 8007434:	b2d2      	uxtb	r2, r2
 8007436:	440b      	add	r3, r1
 8007438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800743c:	e00a      	b.n	8007454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	b2da      	uxtb	r2, r3
 8007442:	4908      	ldr	r1, [pc, #32]	; (8007464 <__NVIC_SetPriority+0x50>)
 8007444:	79fb      	ldrb	r3, [r7, #7]
 8007446:	f003 030f 	and.w	r3, r3, #15
 800744a:	3b04      	subs	r3, #4
 800744c:	0112      	lsls	r2, r2, #4
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	440b      	add	r3, r1
 8007452:	761a      	strb	r2, [r3, #24]
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	e000e100 	.word	0xe000e100
 8007464:	e000ed00 	.word	0xe000ed00

08007468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3b01      	subs	r3, #1
 8007474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007478:	d301      	bcc.n	800747e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800747a:	2301      	movs	r3, #1
 800747c:	e00f      	b.n	800749e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800747e:	4a0a      	ldr	r2, [pc, #40]	; (80074a8 <SysTick_Config+0x40>)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3b01      	subs	r3, #1
 8007484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007486:	210f      	movs	r1, #15
 8007488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800748c:	f7ff ffc2 	bl	8007414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007490:	4b05      	ldr	r3, [pc, #20]	; (80074a8 <SysTick_Config+0x40>)
 8007492:	2200      	movs	r2, #0
 8007494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007496:	4b04      	ldr	r3, [pc, #16]	; (80074a8 <SysTick_Config+0x40>)
 8007498:	2207      	movs	r2, #7
 800749a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	e000e010 	.word	0xe000e010
 80074ac:	00000000 	.word	0x00000000

080074b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80074b0:	b590      	push	{r4, r7, lr}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80074b6:	f7f9 fa9d 	bl	80009f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80074ba:	f000 f899 	bl	80075f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80074be:	f000 fc4d 	bl	8007d5c <MX_GPIO_Init>
  MX_DMA_Init();
 80074c2:	f000 fc21 	bl	8007d08 <MX_DMA_Init>
  MX_HRTIM1_Init();
 80074c6:	f000 f99f 	bl	8007808 <MX_HRTIM1_Init>
  MX_ADC2_Init();
 80074ca:	f000 f8fb 	bl	80076c4 <MX_ADC2_Init>
  MX_TIM3_Init();
 80074ce:	f000 fb8b 	bl	8007be8 <MX_TIM3_Init>
  MX_DAC2_Init();
 80074d2:	f000 f95f 	bl	8007794 <MX_DAC2_Init>
  /* USER CODE BEGIN 2 */
  /* Use Systick arm timer and interrupt to tick step() functions of the Simulink model. */
  /* Fundamental sample time is set to: '1.0E-5' s */
  if (SysTick_Config((uint32_t)(SystemCoreClock/99999.999999999985))) {
 80074d6:	4b40      	ldr	r3, [pc, #256]	; (80075d8 <main+0x128>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4618      	mov	r0, r3
 80074dc:	f7f8 ffde 	bl	800049c <__aeabi_ui2d>
 80074e0:	a33b      	add	r3, pc, #236	; (adr r3, 80075d0 <main+0x120>)
 80074e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e6:	f7f9 f97d 	bl	80007e4 <__aeabi_ddiv>
 80074ea:	4603      	mov	r3, r0
 80074ec:	460c      	mov	r4, r1
 80074ee:	4618      	mov	r0, r3
 80074f0:	4621      	mov	r1, r4
 80074f2:	f7f9 fa5f 	bl	80009b4 <__aeabi_d2uiz>
 80074f6:	4603      	mov	r3, r0
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7ff ffb5 	bl	8007468 <SysTick_Config>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d037      	beq.n	8007574 <main+0xc4>
    autoReloadTimerLoopVal_S = 1;
 8007504:	4b35      	ldr	r3, [pc, #212]	; (80075dc <main+0x12c>)
 8007506:	2201      	movs	r2, #1
 8007508:	601a      	str	r2, [r3, #0]
    do {
      autoReloadTimerLoopVal_S++;
 800750a:	4b34      	ldr	r3, [pc, #208]	; (80075dc <main+0x12c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3301      	adds	r3, #1
 8007510:	4a32      	ldr	r2, [pc, #200]	; (80075dc <main+0x12c>)
 8007512:	6013      	str	r3, [r2, #0]
    } while ((uint32_t)(SystemCoreClock/99999.999999999985)/
 8007514:	4b30      	ldr	r3, [pc, #192]	; (80075d8 <main+0x128>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4618      	mov	r0, r3
 800751a:	f7f8 ffbf 	bl	800049c <__aeabi_ui2d>
 800751e:	a32c      	add	r3, pc, #176	; (adr r3, 80075d0 <main+0x120>)
 8007520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007524:	f7f9 f95e 	bl	80007e4 <__aeabi_ddiv>
 8007528:	4603      	mov	r3, r0
 800752a:	460c      	mov	r4, r1
 800752c:	4618      	mov	r0, r3
 800752e:	4621      	mov	r1, r4
 8007530:	f7f9 fa40 	bl	80009b4 <__aeabi_d2uiz>
 8007534:	4602      	mov	r2, r0
 8007536:	4b29      	ldr	r3, [pc, #164]	; (80075dc <main+0x12c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	fbb2 f3f3 	udiv	r3, r2, r3
             autoReloadTimerLoopVal_S > SysTick_LOAD_RELOAD_Msk);
 800753e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007542:	d2e2      	bcs.n	800750a <main+0x5a>

    SysTick_Config((uint32_t)(SystemCoreClock/99999.999999999985)/
 8007544:	4b24      	ldr	r3, [pc, #144]	; (80075d8 <main+0x128>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4618      	mov	r0, r3
 800754a:	f7f8 ffa7 	bl	800049c <__aeabi_ui2d>
 800754e:	a320      	add	r3, pc, #128	; (adr r3, 80075d0 <main+0x120>)
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	f7f9 f946 	bl	80007e4 <__aeabi_ddiv>
 8007558:	4603      	mov	r3, r0
 800755a:	460c      	mov	r4, r1
 800755c:	4618      	mov	r0, r3
 800755e:	4621      	mov	r1, r4
 8007560:	f7f9 fa28 	bl	80009b4 <__aeabi_d2uiz>
 8007564:	4602      	mov	r2, r0
 8007566:	4b1d      	ldr	r3, [pc, #116]	; (80075dc <main+0x12c>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	fbb2 f3f3 	udiv	r3, r2, r3
 800756e:	4618      	mov	r0, r3
 8007570:	f7ff ff7a 	bl	8007468 <SysTick_Config>
                   autoReloadTimerLoopVal_S);
  }

  /* Set number of loop to do. */
  remainAutoReloadTimerLoopVal_S = autoReloadTimerLoopVal_S;
 8007574:	4b19      	ldr	r3, [pc, #100]	; (80075dc <main+0x12c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a19      	ldr	r2, [pc, #100]	; (80075e0 <main+0x130>)
 800757a:	6013      	str	r3, [r2, #0]

  {
    int i;
    for (i = 0; i < 1; i++) {
 800757c:	2300      	movs	r3, #0
 800757e:	607b      	str	r3, [r7, #4]
 8007580:	e007      	b.n	8007592 <main+0xe2>
      OverrunFlags[i] = false;
 8007582:	4a18      	ldr	r2, [pc, #96]	; (80075e4 <main+0x134>)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4413      	add	r3, r2
 8007588:	2200      	movs	r2, #0
 800758a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 1; i++) {
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	3301      	adds	r3, #1
 8007590:	607b      	str	r3, [r7, #4]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	ddf4      	ble.n	8007582 <main+0xd2>
    }
  }

  /* Initialize model */
  Test_LED_Amine_initialize();
 8007598:	f000 ff32 	bl	8008400 <Test_LED_Amine_initialize>
  /* USER CODE BEGIN WHILE */
  /* Infinite loop */
  /* Real time from systickHandler */
  while (1) {
    /*Process tasks every solver time*/
    if (remainAutoReloadTimerLoopVal_S == 0) {
 800759c:	4b10      	ldr	r3, [pc, #64]	; (80075e0 <main+0x130>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1fb      	bne.n	800759c <main+0xec>
      remainAutoReloadTimerLoopVal_S = autoReloadTimerLoopVal_S;
 80075a4:	4b0d      	ldr	r3, [pc, #52]	; (80075dc <main+0x12c>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a0d      	ldr	r2, [pc, #52]	; (80075e0 <main+0x130>)
 80075aa:	6013      	str	r3, [r2, #0]

      /* Check base rate for overrun */
      if (OverrunFlags[0]) {
 80075ac:	4b0d      	ldr	r3, [pc, #52]	; (80075e4 <main+0x134>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <main+0x10c>
        rtmSetErrorStatus(Test_LED_Amine_M, "Overrun");
 80075b4:	4b0c      	ldr	r3, [pc, #48]	; (80075e8 <main+0x138>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a0c      	ldr	r2, [pc, #48]	; (80075ec <main+0x13c>)
 80075ba:	601a      	str	r2, [r3, #0]
      }

      OverrunFlags[0] = true;
 80075bc:	4b09      	ldr	r3, [pc, #36]	; (80075e4 <main+0x134>)
 80075be:	2201      	movs	r2, #1
 80075c0:	701a      	strb	r2, [r3, #0]

      /* Step the model for base rate */
      Test_LED_Amine_step();
 80075c2:	f000 ff0b 	bl	80083dc <Test_LED_Amine_step>

      /* Get model outputs here */

      /* Indicate task for base rate complete */
      OverrunFlags[0] = false;
 80075c6:	4b07      	ldr	r3, [pc, #28]	; (80075e4 <main+0x134>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	701a      	strb	r2, [r3, #0]
    if (remainAutoReloadTimerLoopVal_S == 0) {
 80075cc:	e7e6      	b.n	800759c <main+0xec>
 80075ce:	bf00      	nop
 80075d0:	ffffffff 	.word	0xffffffff
 80075d4:	40f869ff 	.word	0x40f869ff
 80075d8:	2000002c 	.word	0x2000002c
 80075dc:	20000024 	.word	0x20000024
 80075e0:	20000028 	.word	0x20000028
 80075e4:	20000084 	.word	0x20000084
 80075e8:	0800889c 	.word	0x0800889c
 80075ec:	0800887c 	.word	0x0800887c

080075f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b0a8      	sub	sp, #160	; 0xa0
 80075f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80075fa:	2238      	movs	r2, #56	; 0x38
 80075fc:	2100      	movs	r1, #0
 80075fe:	4618      	mov	r0, r3
 8007600:	f001 f928 	bl	8008854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007604:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	605a      	str	r2, [r3, #4]
 800760e:	609a      	str	r2, [r3, #8]
 8007610:	60da      	str	r2, [r3, #12]
 8007612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007614:	463b      	mov	r3, r7
 8007616:	2254      	movs	r2, #84	; 0x54
 8007618:	2100      	movs	r1, #0
 800761a:	4618      	mov	r0, r3
 800761c:	f001 f91a 	bl	8008854 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007620:	2000      	movs	r0, #0
 8007622:	f7fd fa25 	bl	8004a70 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007626:	2302      	movs	r3, #2
 8007628:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800762a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800762e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007630:	2340      	movs	r3, #64	; 0x40
 8007632:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007634:	2302      	movs	r3, #2
 8007636:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800763a:	2302      	movs	r3, #2
 800763c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8007640:	2304      	movs	r3, #4
 8007642:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8007646:	2355      	movs	r3, #85	; 0x55
 8007648:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800764c:	2302      	movs	r3, #2
 800764e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007652:	2302      	movs	r3, #2
 8007654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007658:	2302      	movs	r3, #2
 800765a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800765e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007662:	4618      	mov	r0, r3
 8007664:	f7fd fab8 	bl	8004bd8 <HAL_RCC_OscConfig>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800766e:	f000 fbf7 	bl	8007e60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007672:	230f      	movs	r3, #15
 8007674:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007676:	2303      	movs	r3, #3
 8007678:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800767a:	2300      	movs	r3, #0
 800767c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800767e:	2300      	movs	r3, #0
 8007680:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007682:	2300      	movs	r3, #0
 8007684:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007686:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800768a:	2104      	movs	r1, #4
 800768c:	4618      	mov	r0, r3
 800768e:	f7fd fdbb 	bl	8005208 <HAL_RCC_ClockConfig>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8007698:	f000 fbe2 	bl	8007e60 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800769c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80076a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80076a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80076a8:	463b      	mov	r3, r7
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fd ffe4 	bl	8005678 <HAL_RCCEx_PeriphCLKConfig>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <SystemClock_Config+0xca>
  {
    Error_Handler();
 80076b6:	f000 fbd3 	bl	8007e60 <Error_Handler>
  }
}
 80076ba:	bf00      	nop
 80076bc:	37a0      	adds	r7, #160	; 0xa0
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
	...

080076c4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b088      	sub	sp, #32
 80076c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80076ca:	463b      	mov	r3, r7
 80076cc:	2220      	movs	r2, #32
 80076ce:	2100      	movs	r1, #0
 80076d0:	4618      	mov	r0, r3
 80076d2:	f001 f8bf 	bl	8008854 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80076d6:	4b2c      	ldr	r3, [pc, #176]	; (8007788 <MX_ADC2_Init+0xc4>)
 80076d8:	4a2c      	ldr	r2, [pc, #176]	; (800778c <MX_ADC2_Init+0xc8>)
 80076da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80076dc:	4b2a      	ldr	r3, [pc, #168]	; (8007788 <MX_ADC2_Init+0xc4>)
 80076de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80076e2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80076e4:	4b28      	ldr	r3, [pc, #160]	; (8007788 <MX_ADC2_Init+0xc4>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80076ea:	4b27      	ldr	r3, [pc, #156]	; (8007788 <MX_ADC2_Init+0xc4>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80076f0:	4b25      	ldr	r3, [pc, #148]	; (8007788 <MX_ADC2_Init+0xc4>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80076f6:	4b24      	ldr	r3, [pc, #144]	; (8007788 <MX_ADC2_Init+0xc4>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80076fc:	4b22      	ldr	r3, [pc, #136]	; (8007788 <MX_ADC2_Init+0xc4>)
 80076fe:	2204      	movs	r2, #4
 8007700:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8007702:	4b21      	ldr	r3, [pc, #132]	; (8007788 <MX_ADC2_Init+0xc4>)
 8007704:	2200      	movs	r2, #0
 8007706:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8007708:	4b1f      	ldr	r3, [pc, #124]	; (8007788 <MX_ADC2_Init+0xc4>)
 800770a:	2200      	movs	r2, #0
 800770c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800770e:	4b1e      	ldr	r3, [pc, #120]	; (8007788 <MX_ADC2_Init+0xc4>)
 8007710:	2201      	movs	r2, #1
 8007712:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8007714:	4b1c      	ldr	r3, [pc, #112]	; (8007788 <MX_ADC2_Init+0xc4>)
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 800771c:	4b1a      	ldr	r3, [pc, #104]	; (8007788 <MX_ADC2_Init+0xc4>)
 800771e:	f44f 62d4 	mov.w	r2, #1696	; 0x6a0
 8007722:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8007724:	4b18      	ldr	r3, [pc, #96]	; (8007788 <MX_ADC2_Init+0xc4>)
 8007726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800772a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800772c:	4b16      	ldr	r3, [pc, #88]	; (8007788 <MX_ADC2_Init+0xc4>)
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007734:	4b14      	ldr	r3, [pc, #80]	; (8007788 <MX_ADC2_Init+0xc4>)
 8007736:	2200      	movs	r2, #0
 8007738:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800773a:	4b13      	ldr	r3, [pc, #76]	; (8007788 <MX_ADC2_Init+0xc4>)
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8007742:	4811      	ldr	r0, [pc, #68]	; (8007788 <MX_ADC2_Init+0xc4>)
 8007744:	f7f9 fc3a 	bl	8000fbc <HAL_ADC_Init>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800774e:	f000 fb87 	bl	8007e60 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8007752:	4b0f      	ldr	r3, [pc, #60]	; (8007790 <MX_ADC2_Init+0xcc>)
 8007754:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007756:	2306      	movs	r3, #6
 8007758:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800775a:	2303      	movs	r3, #3
 800775c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800775e:	237f      	movs	r3, #127	; 0x7f
 8007760:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007762:	2304      	movs	r3, #4
 8007764:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8007766:	2300      	movs	r3, #0
 8007768:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800776a:	463b      	mov	r3, r7
 800776c:	4619      	mov	r1, r3
 800776e:	4806      	ldr	r0, [pc, #24]	; (8007788 <MX_ADC2_Init+0xc4>)
 8007770:	f7fa f930 	bl	80019d4 <HAL_ADC_ConfigChannel>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800777a:	f000 fb71 	bl	8007e60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800777e:	bf00      	nop
 8007780:	3720      	adds	r7, #32
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	200000a8 	.word	0x200000a8
 800778c:	50000100 	.word	0x50000100
 8007790:	04300002 	.word	0x04300002

08007794 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b08c      	sub	sp, #48	; 0x30
 8007798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800779a:	463b      	mov	r3, r7
 800779c:	2230      	movs	r2, #48	; 0x30
 800779e:	2100      	movs	r1, #0
 80077a0:	4618      	mov	r0, r3
 80077a2:	f001 f857 	bl	8008854 <memset>
  /* USER CODE BEGIN DAC2_Init 1 */

  /* USER CODE END DAC2_Init 1 */
  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80077a6:	4b16      	ldr	r3, [pc, #88]	; (8007800 <MX_DAC2_Init+0x6c>)
 80077a8:	4a16      	ldr	r2, [pc, #88]	; (8007804 <MX_DAC2_Init+0x70>)
 80077aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80077ac:	4814      	ldr	r0, [pc, #80]	; (8007800 <MX_DAC2_Init+0x6c>)
 80077ae:	f7fa ff59 	bl	8002664 <HAL_DAC_Init>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80077b8:	f000 fb52 	bl	8007e60 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80077bc:	2302      	movs	r3, #2
 80077be:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80077c0:	2300      	movs	r3, #0
 80077c2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80077c4:	2300      	movs	r3, #0
 80077c6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80077c8:	2300      	movs	r3, #0
 80077ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80077cc:	2300      	movs	r3, #0
 80077ce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80077d0:	2300      	movs	r3, #0
 80077d2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80077d4:	2300      	movs	r3, #0
 80077d6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80077d8:	2301      	movs	r3, #1
 80077da:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80077dc:	2300      	movs	r3, #0
 80077de:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80077e0:	463b      	mov	r3, r7
 80077e2:	2200      	movs	r2, #0
 80077e4:	4619      	mov	r1, r3
 80077e6:	4806      	ldr	r0, [pc, #24]	; (8007800 <MX_DAC2_Init+0x6c>)
 80077e8:	f7fa ffda 	bl	80027a0 <HAL_DAC_ConfigChannel>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80077f2:	f000 fb35 	bl	8007e60 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80077f6:	bf00      	nop
 80077f8:	3730      	adds	r7, #48	; 0x30
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	20000094 	.word	0x20000094
 8007804:	50000c00 	.word	0x50000c00

08007808 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b0ba      	sub	sp, #232	; 0xe8
 800780c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 800780e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007812:	2200      	movs	r2, #0
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8007818:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	605a      	str	r2, [r3, #4]
 8007822:	609a      	str	r2, [r3, #8]
 8007824:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8007826:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800782a:	2260      	movs	r2, #96	; 0x60
 800782c:	2100      	movs	r1, #0
 800782e:	4618      	mov	r0, r3
 8007830:	f001 f810 	bl	8008854 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8007834:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	605a      	str	r2, [r3, #4]
 800783e:	609a      	str	r2, [r3, #8]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8007840:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	605a      	str	r2, [r3, #4]
 800784a:	609a      	str	r2, [r3, #8]
 800784c:	60da      	str	r2, [r3, #12]
 800784e:	611a      	str	r2, [r3, #16]
 8007850:	615a      	str	r2, [r3, #20]
 8007852:	619a      	str	r2, [r3, #24]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 8007854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007858:	2224      	movs	r2, #36	; 0x24
 800785a:	2100      	movs	r1, #0
 800785c:	4618      	mov	r0, r3
 800785e:	f000 fff9 	bl	8008854 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8007862:	1d3b      	adds	r3, r7, #4
 8007864:	2220      	movs	r2, #32
 8007866:	2100      	movs	r1, #0
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fff3 	bl	8008854 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 800786e:	4bd1      	ldr	r3, [pc, #836]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007870:	4ad1      	ldr	r2, [pc, #836]	; (8007bb8 <MX_HRTIM1_Init+0x3b0>)
 8007872:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8007874:	4bcf      	ldr	r3, [pc, #828]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007876:	2200      	movs	r2, #0
 8007878:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800787a:	4bce      	ldr	r3, [pc, #824]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 800787c:	2200      	movs	r2, #0
 800787e:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8007880:	48cc      	ldr	r0, [pc, #816]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007882:	f7fb fd59 	bl	8003338 <HAL_HRTIM_Init>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 800788c:	f000 fae8 	bl	8007e60 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8007890:	210c      	movs	r1, #12
 8007892:	48c8      	ldr	r0, [pc, #800]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007894:	f7fb fe20 	bl	80034d8 <HAL_HRTIM_DLLCalibrationStart>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 800789e:	f000 fadf 	bl	8007e60 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 80078a2:	210a      	movs	r1, #10
 80078a4:	48c3      	ldr	r0, [pc, #780]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 80078a6:	f7fb fe6f 	bl	8003588 <HAL_HRTIM_PollForDLLCalibration>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 80078b0:	f000 fad6 	bl	8007e60 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_MASTER;
 80078b4:	2300      	movs	r3, #0
 80078b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_MASTER_CMP3;
 80078ba:	2304      	movs	r3, #4
 80078bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 80078c0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80078c4:	461a      	mov	r2, r3
 80078c6:	2101      	movs	r1, #1
 80078c8:	48ba      	ldr	r0, [pc, #744]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 80078ca:	f7fb fee9 	bl	80036a0 <HAL_HRTIM_ADCTriggerConfig>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <MX_HRTIM1_Init+0xd0>
  {
    Error_Handler();
 80078d4:	f000 fac4 	bl	8007e60 <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 0) != HAL_OK)
 80078d8:	2200      	movs	r2, #0
 80078da:	2101      	movs	r1, #1
 80078dc:	48b5      	ldr	r0, [pc, #724]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 80078de:	f7fc f880 	bl	80039e2 <HAL_HRTIM_ADCPostScalerConfig>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <MX_HRTIM1_Init+0xe4>
  {
    Error_Handler();
 80078e8:	f000 faba 	bl	8007e60 <Error_Handler>
  }
  pTimeBaseCfg.Period = 13600;
 80078ec:	f243 5320 	movw	r3, #13600	; 0x3520
 80078f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80078f4:	2300      	movs	r3, #0
 80078f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL16;
 80078fa:	2301      	movs	r3, #1
 80078fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8007900:	2308      	movs	r3, #8
 8007902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8007906:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800790a:	461a      	mov	r2, r3
 800790c:	2106      	movs	r1, #6
 800790e:	48a9      	ldr	r0, [pc, #676]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007910:	f7fb fe6e 	bl	80035f0 <HAL_HRTIM_TimeBaseConfig>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <MX_HRTIM1_Init+0x116>
  {
    Error_Handler();
 800791a:	f000 faa1 	bl	8007e60 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 800791e:	2300      	movs	r3, #0
 8007920:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 8007922:	2300      	movs	r3, #0
 8007924:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.DMASrcAddress = 0x0000;
 8007926:	2300      	movs	r3, #0
 8007928:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.DMADstAddress = 0x0000;
 800792a:	2300      	movs	r3, #0
 800792c:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimerCfg.DMASize = 0x1;
 800792e:	2301      	movs	r3, #1
 8007930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8007934:	2300      	movs	r3, #0
 8007936:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 800793a:	2300      	movs	r3, #0
 800793c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8007940:	2300      	movs	r3, #0
 8007942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8007946:	2300      	movs	r3, #0
 8007948:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800794c:	2300      	movs	r3, #0
 800794e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8007952:	2300      	movs	r3, #0
 8007954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8007958:	2300      	movs	r3, #0
 800795a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800795e:	2300      	movs	r3, #0
 8007960:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8007964:	2300      	movs	r3, #0
 8007966:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 800796a:	2300      	movs	r3, #0
 800796c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8007970:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007974:	461a      	mov	r2, r3
 8007976:	2106      	movs	r1, #6
 8007978:	488e      	ldr	r0, [pc, #568]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 800797a:	f7fc f930 	bl	8003bde <HAL_HRTIM_WaveformTimerConfig>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <MX_HRTIM1_Init+0x180>
  {
    Error_Handler();
 8007984:	f000 fa6c 	bl	8007e60 <Error_Handler>
  }
  pCompareCfg.CompareValue = 1360;
 8007988:	f44f 63aa 	mov.w	r3, #1360	; 0x550
 800798c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800798e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007992:	2201      	movs	r2, #1
 8007994:	2106      	movs	r1, #6
 8007996:	4887      	ldr	r0, [pc, #540]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007998:	f7fc fa46 	bl	8003e28 <HAL_HRTIM_WaveformCompareConfig>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <MX_HRTIM1_Init+0x19e>
  {
    Error_Handler();
 80079a2:	f000 fa5d 	bl	8007e60 <Error_Handler>
  }
  pCompareCfg.CompareValue = 6800;
 80079a6:	f641 2390 	movw	r3, #6800	; 0x1a90
 80079aa:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80079ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80079b0:	2202      	movs	r2, #2
 80079b2:	2106      	movs	r1, #6
 80079b4:	487f      	ldr	r0, [pc, #508]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 80079b6:	f7fc fa37 	bl	8003e28 <HAL_HRTIM_WaveformCompareConfig>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <MX_HRTIM1_Init+0x1bc>
  {
    Error_Handler();
 80079c0:	f000 fa4e 	bl	8007e60 <Error_Handler>
  }
  pCompareCfg.CompareValue = 3000;
 80079c4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80079c8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80079ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80079ce:	2204      	movs	r2, #4
 80079d0:	2106      	movs	r1, #6
 80079d2:	4878      	ldr	r0, [pc, #480]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 80079d4:	f7fc fa28 	bl	8003e28 <HAL_HRTIM_WaveformCompareConfig>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <MX_HRTIM1_Init+0x1da>
  {
    Error_Handler();
 80079de:	f000 fa3f 	bl	8007e60 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80079e2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80079e6:	461a      	mov	r2, r3
 80079e8:	2100      	movs	r1, #0
 80079ea:	4872      	ldr	r0, [pc, #456]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 80079ec:	f7fb fe00 	bl	80035f0 <HAL_HRTIM_TimeBaseConfig>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <MX_HRTIM1_Init+0x1f2>
  {
    Error_Handler();
 80079f6:	f000 fa33 	bl	8007e60 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 80079fa:	2300      	movs	r3, #0
 80079fc:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 80079fe:	2300      	movs	r3, #0
 8007a00:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8007a02:	2300      	movs	r3, #0
 8007a04:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8007a06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	4869      	ldr	r0, [pc, #420]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007a10:	f7fc f957 	bl	8003cc2 <HAL_HRTIM_WaveformTimerControl>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d001      	beq.n	8007a1e <MX_HRTIM1_Init+0x216>
  {
    Error_Handler();
 8007a1a:	f000 fa21 	bl	8007e60 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8007a22:	2300      	movs	r3, #0
 8007a24:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8007a26:	2300      	movs	r3, #0
 8007a28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8007a32:	2300      	movs	r3, #0
 8007a34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8007a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8007a40:	2300      	movs	r3, #0
 8007a42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8007a46:	2300      	movs	r3, #0
 8007a48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_PER;
 8007a4c:	2310      	movs	r3, #16
 8007a4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8007a52:	2300      	movs	r3, #0
 8007a54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8007a58:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	2100      	movs	r1, #0
 8007a60:	4854      	ldr	r0, [pc, #336]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007a62:	f7fc f8bc 	bl	8003bde <HAL_HRTIM_WaveformTimerConfig>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <MX_HRTIM1_Init+0x268>
  {
    Error_Handler();
 8007a6c:	f000 f9f8 	bl	8007e60 <Error_Handler>
  }
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_CMP2;
 8007a70:	2340      	movs	r3, #64	; 0x40
 8007a72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8007a76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	484d      	ldr	r0, [pc, #308]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007a80:	f7fc f8ad 	bl	8003bde <HAL_HRTIM_WaveformTimerConfig>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <MX_HRTIM1_Init+0x286>
  {
    Error_Handler();
 8007a8a:	f000 f9e9 	bl	8007e60 <Error_Handler>
  }
  pCompareCfg.CompareValue = 6800;
 8007a8e:	f641 2390 	movw	r3, #6800	; 0x1a90
 8007a92:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8007a94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007a98:	2201      	movs	r2, #1
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	4845      	ldr	r0, [pc, #276]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007a9e:	f7fc f9c3 	bl	8003e28 <HAL_HRTIM_WaveformCompareConfig>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <MX_HRTIM1_Init+0x2a4>
  {
    Error_Handler();
 8007aa8:	f000 f9da 	bl	8007e60 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_DIV1;
 8007aac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007ab0:	627b      	str	r3, [r7, #36]	; 0x24
  pDeadTimeCfg.RisingValue = 16;
 8007ab2:	2310      	movs	r3, #16
 8007ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 8007aba:	2300      	movs	r3, #0
 8007abc:	633b      	str	r3, [r7, #48]	; 0x30
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	637b      	str	r3, [r7, #52]	; 0x34
  pDeadTimeCfg.FallingValue = 16;
 8007ac2:	2310      	movs	r3, #16
 8007ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 8007aca:	2300      	movs	r3, #0
 8007acc:	643b      	str	r3, [r7, #64]	; 0x40
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8007ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	2100      	movs	r1, #0
 8007ada:	4836      	ldr	r0, [pc, #216]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007adc:	f7fc f924 	bl	8003d28 <HAL_HRTIM_DeadTimeConfig>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <MX_HRTIM1_Init+0x2e2>
  {
    Error_Handler();
 8007ae6:	f000 f9bb 	bl	8007e60 <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pDeadTimeCfg) != HAL_OK)
 8007aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007aee:	461a      	mov	r2, r3
 8007af0:	2101      	movs	r1, #1
 8007af2:	4830      	ldr	r0, [pc, #192]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007af4:	f7fc f918 	bl	8003d28 <HAL_HRTIM_DeadTimeConfig>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <MX_HRTIM1_Init+0x2fa>
  {
    Error_Handler();
 8007afe:	f000 f9af 	bl	8007e60 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8007b02:	2300      	movs	r3, #0
 8007b04:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 8007b06:	2304      	movs	r3, #4
 8007b08:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8007b0a:	2308      	movs	r3, #8
 8007b0c:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8007b12:	2300      	movs	r3, #0
 8007b14:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8007b16:	2300      	movs	r3, #0
 8007b18:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8007b22:	1d3b      	adds	r3, r7, #4
 8007b24:	2201      	movs	r2, #1
 8007b26:	2100      	movs	r1, #0
 8007b28:	4822      	ldr	r0, [pc, #136]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007b2a:	f7fc faeb 	bl	8004104 <HAL_HRTIM_WaveformOutputConfig>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <MX_HRTIM1_Init+0x330>
  {
    Error_Handler();
 8007b34:	f000 f994 	bl	8007e60 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8007b38:	1d3b      	adds	r3, r7, #4
 8007b3a:	2204      	movs	r2, #4
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	481d      	ldr	r0, [pc, #116]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007b40:	f7fc fae0 	bl	8004104 <HAL_HRTIM_WaveformOutputConfig>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <MX_HRTIM1_Init+0x346>
  {
    Error_Handler();
 8007b4a:	f000 f989 	bl	8007e60 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8007b56:	1d3b      	adds	r3, r7, #4
 8007b58:	2202      	movs	r2, #2
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	4815      	ldr	r0, [pc, #84]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007b5e:	f7fc fad1 	bl	8004104 <HAL_HRTIM_WaveformOutputConfig>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <MX_HRTIM1_Init+0x364>
  {
    Error_Handler();
 8007b68:	f000 f97a 	bl	8007e60 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8007b6c:	1d3b      	adds	r3, r7, #4
 8007b6e:	2208      	movs	r2, #8
 8007b70:	2101      	movs	r1, #1
 8007b72:	4810      	ldr	r0, [pc, #64]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007b74:	f7fc fac6 	bl	8004104 <HAL_HRTIM_WaveformOutputConfig>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <MX_HRTIM1_Init+0x37a>
  {
    Error_Handler();
 8007b7e:	f000 f96f 	bl	8007e60 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8007b82:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007b86:	461a      	mov	r2, r3
 8007b88:	2101      	movs	r1, #1
 8007b8a:	480a      	ldr	r0, [pc, #40]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007b8c:	f7fb fd30 	bl	80035f0 <HAL_HRTIM_TimeBaseConfig>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <MX_HRTIM1_Init+0x392>
  {
    Error_Handler();
 8007b96:	f000 f963 	bl	8007e60 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 8007b9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	4804      	ldr	r0, [pc, #16]	; (8007bb4 <MX_HRTIM1_Init+0x3ac>)
 8007ba4:	f7fc f88d 	bl	8003cc2 <HAL_HRTIM_WaveformTimerControl>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d006      	beq.n	8007bbc <MX_HRTIM1_Init+0x3b4>
  {
    Error_Handler();
 8007bae:	f000 f957 	bl	8007e60 <Error_Handler>
 8007bb2:	e003      	b.n	8007bbc <MX_HRTIM1_Init+0x3b4>
 8007bb4:	20000160 	.word	0x20000160
 8007bb8:	40016800 	.word	0x40016800
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8007bbc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	4807      	ldr	r0, [pc, #28]	; (8007be4 <MX_HRTIM1_Init+0x3dc>)
 8007bc6:	f7fc f92f 	bl	8003e28 <HAL_HRTIM_WaveformCompareConfig>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <MX_HRTIM1_Init+0x3cc>
  {
    Error_Handler();
 8007bd0:	f000 f946 	bl	8007e60 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8007bd4:	4803      	ldr	r0, [pc, #12]	; (8007be4 <MX_HRTIM1_Init+0x3dc>)
 8007bd6:	f000 fa61 	bl	800809c <HAL_HRTIM_MspPostInit>

}
 8007bda:	bf00      	nop
 8007bdc:	37e8      	adds	r7, #232	; 0xe8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	20000160 	.word	0x20000160

08007be8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b094      	sub	sp, #80	; 0x50
 8007bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007bee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]
 8007bf6:	605a      	str	r2, [r3, #4]
 8007bf8:	609a      	str	r2, [r3, #8]
 8007bfa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8007bfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c00:	2200      	movs	r2, #0
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	605a      	str	r2, [r3, #4]
 8007c06:	609a      	str	r2, [r3, #8]
 8007c08:	60da      	str	r2, [r3, #12]
 8007c0a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c0c:	f107 0320 	add.w	r3, r7, #32
 8007c10:	2200      	movs	r2, #0
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	605a      	str	r2, [r3, #4]
 8007c16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007c18:	1d3b      	adds	r3, r7, #4
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	605a      	str	r2, [r3, #4]
 8007c20:	609a      	str	r2, [r3, #8]
 8007c22:	60da      	str	r2, [r3, #12]
 8007c24:	611a      	str	r2, [r3, #16]
 8007c26:	615a      	str	r2, [r3, #20]
 8007c28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007c2a:	4b35      	ldr	r3, [pc, #212]	; (8007d00 <MX_TIM3_Init+0x118>)
 8007c2c:	4a35      	ldr	r2, [pc, #212]	; (8007d04 <MX_TIM3_Init+0x11c>)
 8007c2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007c30:	4b33      	ldr	r3, [pc, #204]	; (8007d00 <MX_TIM3_Init+0x118>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c36:	4b32      	ldr	r3, [pc, #200]	; (8007d00 <MX_TIM3_Init+0x118>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8007c3c:	4b30      	ldr	r3, [pc, #192]	; (8007d00 <MX_TIM3_Init+0x118>)
 8007c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c44:	4b2e      	ldr	r3, [pc, #184]	; (8007d00 <MX_TIM3_Init+0x118>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c4a:	4b2d      	ldr	r3, [pc, #180]	; (8007d00 <MX_TIM3_Init+0x118>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007c50:	482b      	ldr	r0, [pc, #172]	; (8007d00 <MX_TIM3_Init+0x118>)
 8007c52:	f7fd ff5d 	bl	8005b10 <HAL_TIM_Base_Init>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d001      	beq.n	8007c60 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8007c5c:	f000 f900 	bl	8007e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c64:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007c66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	4824      	ldr	r0, [pc, #144]	; (8007d00 <MX_TIM3_Init+0x118>)
 8007c6e:	f7fe fc4b 	bl	8006508 <HAL_TIM_ConfigClockSource>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8007c78:	f000 f8f2 	bl	8007e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007c7c:	4820      	ldr	r0, [pc, #128]	; (8007d00 <MX_TIM3_Init+0x118>)
 8007c7e:	f7fe f817 	bl	8005cb0 <HAL_TIM_PWM_Init>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8007c88:	f000 f8ea 	bl	8007e60 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8007c90:	2300      	movs	r3, #0
 8007c92:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8007c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c98:	4619      	mov	r1, r3
 8007c9a:	4819      	ldr	r0, [pc, #100]	; (8007d00 <MX_TIM3_Init+0x118>)
 8007c9c:	f7fe fd24 	bl	80066e8 <HAL_TIM_SlaveConfigSynchro>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8007ca6:	f000 f8db 	bl	8007e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8007caa:	2310      	movs	r3, #16
 8007cac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007cb2:	f107 0320 	add.w	r3, r7, #32
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	4811      	ldr	r0, [pc, #68]	; (8007d00 <MX_TIM3_Init+0x118>)
 8007cba:	f7ff facf 	bl	800725c <HAL_TIMEx_MasterConfigSynchronization>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8007cc4:	f000 f8cc 	bl	8007e60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007cc8:	2360      	movs	r3, #96	; 0x60
 8007cca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 17000;
 8007ccc:	f244 2368 	movw	r3, #17000	; 0x4268
 8007cd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007cda:	1d3b      	adds	r3, r7, #4
 8007cdc:	2200      	movs	r2, #0
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4807      	ldr	r0, [pc, #28]	; (8007d00 <MX_TIM3_Init+0x118>)
 8007ce2:	f7fe fad9 	bl	8006298 <HAL_TIM_PWM_ConfigChannel>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8007cec:	f000 f8b8 	bl	8007e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007cf0:	4803      	ldr	r0, [pc, #12]	; (8007d00 <MX_TIM3_Init+0x118>)
 8007cf2:	f000 fa31 	bl	8008158 <HAL_TIM_MspPostInit>

}
 8007cf6:	bf00      	nop
 8007cf8:	3750      	adds	r7, #80	; 0x50
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20000114 	.word	0x20000114
 8007d04:	40000400 	.word	0x40000400

08007d08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007d0e:	4b12      	ldr	r3, [pc, #72]	; (8007d58 <MX_DMA_Init+0x50>)
 8007d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d12:	4a11      	ldr	r2, [pc, #68]	; (8007d58 <MX_DMA_Init+0x50>)
 8007d14:	f043 0304 	orr.w	r3, r3, #4
 8007d18:	6493      	str	r3, [r2, #72]	; 0x48
 8007d1a:	4b0f      	ldr	r3, [pc, #60]	; (8007d58 <MX_DMA_Init+0x50>)
 8007d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d1e:	f003 0304 	and.w	r3, r3, #4
 8007d22:	607b      	str	r3, [r7, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007d26:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <MX_DMA_Init+0x50>)
 8007d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d2a:	4a0b      	ldr	r2, [pc, #44]	; (8007d58 <MX_DMA_Init+0x50>)
 8007d2c:	f043 0302 	orr.w	r3, r3, #2
 8007d30:	6493      	str	r3, [r2, #72]	; 0x48
 8007d32:	4b09      	ldr	r3, [pc, #36]	; (8007d58 <MX_DMA_Init+0x50>)
 8007d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	603b      	str	r3, [r7, #0]
 8007d3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8007d3e:	2200      	movs	r2, #0
 8007d40:	2100      	movs	r1, #0
 8007d42:	2038      	movs	r0, #56	; 0x38
 8007d44:	f7fa fc66 	bl	8002614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8007d48:	2038      	movs	r0, #56	; 0x38
 8007d4a:	f7fa fc7d 	bl	8002648 <HAL_NVIC_EnableIRQ>

}
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	40021000 	.word	0x40021000

08007d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08a      	sub	sp, #40	; 0x28
 8007d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d62:	f107 0314 	add.w	r3, r7, #20
 8007d66:	2200      	movs	r2, #0
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	605a      	str	r2, [r3, #4]
 8007d6c:	609a      	str	r2, [r3, #8]
 8007d6e:	60da      	str	r2, [r3, #12]
 8007d70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007d72:	4b2f      	ldr	r3, [pc, #188]	; (8007e30 <MX_GPIO_Init+0xd4>)
 8007d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d76:	4a2e      	ldr	r2, [pc, #184]	; (8007e30 <MX_GPIO_Init+0xd4>)
 8007d78:	f043 0320 	orr.w	r3, r3, #32
 8007d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d7e:	4b2c      	ldr	r3, [pc, #176]	; (8007e30 <MX_GPIO_Init+0xd4>)
 8007d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d82:	f003 0320 	and.w	r3, r3, #32
 8007d86:	613b      	str	r3, [r7, #16]
 8007d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d8a:	4b29      	ldr	r3, [pc, #164]	; (8007e30 <MX_GPIO_Init+0xd4>)
 8007d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d8e:	4a28      	ldr	r2, [pc, #160]	; (8007e30 <MX_GPIO_Init+0xd4>)
 8007d90:	f043 0304 	orr.w	r3, r3, #4
 8007d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d96:	4b26      	ldr	r3, [pc, #152]	; (8007e30 <MX_GPIO_Init+0xd4>)
 8007d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d9a:	f003 0304 	and.w	r3, r3, #4
 8007d9e:	60fb      	str	r3, [r7, #12]
 8007da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007da2:	4b23      	ldr	r3, [pc, #140]	; (8007e30 <MX_GPIO_Init+0xd4>)
 8007da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007da6:	4a22      	ldr	r2, [pc, #136]	; (8007e30 <MX_GPIO_Init+0xd4>)
 8007da8:	f043 0301 	orr.w	r3, r3, #1
 8007dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007dae:	4b20      	ldr	r3, [pc, #128]	; (8007e30 <MX_GPIO_Init+0xd4>)
 8007db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	60bb      	str	r3, [r7, #8]
 8007db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007dba:	4b1d      	ldr	r3, [pc, #116]	; (8007e30 <MX_GPIO_Init+0xd4>)
 8007dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dbe:	4a1c      	ldr	r2, [pc, #112]	; (8007e30 <MX_GPIO_Init+0xd4>)
 8007dc0:	f043 0302 	orr.w	r3, r3, #2
 8007dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007dc6:	4b1a      	ldr	r3, [pc, #104]	; (8007e30 <MX_GPIO_Init+0xd4>)
 8007dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	607b      	str	r3, [r7, #4]
 8007dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	2120      	movs	r1, #32
 8007dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007dda:	f7fb fa7b 	bl	80032d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8007dde:	2201      	movs	r2, #1
 8007de0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007de4:	4813      	ldr	r0, [pc, #76]	; (8007e34 <MX_GPIO_Init+0xd8>)
 8007de6:	f7fb fa75 	bl	80032d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007dea:	2320      	movs	r3, #32
 8007dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007dee:	2301      	movs	r3, #1
 8007df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007df2:	2300      	movs	r3, #0
 8007df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007df6:	2300      	movs	r3, #0
 8007df8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dfa:	f107 0314 	add.w	r3, r7, #20
 8007dfe:	4619      	mov	r1, r3
 8007e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e04:	f7fb f8e4 	bl	8002fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007e08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e16:	2300      	movs	r3, #0
 8007e18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e1a:	f107 0314 	add.w	r3, r7, #20
 8007e1e:	4619      	mov	r1, r3
 8007e20:	4804      	ldr	r0, [pc, #16]	; (8007e34 <MX_GPIO_Init+0xd8>)
 8007e22:	f7fb f8d5 	bl	8002fd0 <HAL_GPIO_Init>

}
 8007e26:	bf00      	nop
 8007e28:	3728      	adds	r7, #40	; 0x28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	40021000 	.word	0x40021000
 8007e34:	48000400 	.word	0x48000400

08007e38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  {
    extern void TIM_PeriodElapsedCustomCallback(TIM_HandleTypeDef *htim);

    /* Handle this event from model side. */
    TIM_PeriodElapsedCustomCallback(htim);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fca7 	bl	8008794 <TIM_PeriodElapsedCustomCallback>
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a04      	ldr	r2, [pc, #16]	; (8007e5c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d101      	bne.n	8007e54 <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_IncTick();
 8007e50:	f7f8 fde8 	bl	8000a24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	40012c00 	.word	0x40012c00

08007e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007e60:	b480      	push	{r7}
 8007e62:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007e64:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007e66:	e7fe      	b.n	8007e66 <Error_Handler+0x6>

08007e68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e6e:	4b13      	ldr	r3, [pc, #76]	; (8007ebc <HAL_MspInit+0x54>)
 8007e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e72:	4a12      	ldr	r2, [pc, #72]	; (8007ebc <HAL_MspInit+0x54>)
 8007e74:	f043 0301 	orr.w	r3, r3, #1
 8007e78:	6613      	str	r3, [r2, #96]	; 0x60
 8007e7a:	4b10      	ldr	r3, [pc, #64]	; (8007ebc <HAL_MspInit+0x54>)
 8007e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	607b      	str	r3, [r7, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e86:	4b0d      	ldr	r3, [pc, #52]	; (8007ebc <HAL_MspInit+0x54>)
 8007e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8a:	4a0c      	ldr	r2, [pc, #48]	; (8007ebc <HAL_MspInit+0x54>)
 8007e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e90:	6593      	str	r3, [r2, #88]	; 0x58
 8007e92:	4b0a      	ldr	r3, [pc, #40]	; (8007ebc <HAL_MspInit+0x54>)
 8007e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e9a:	603b      	str	r3, [r7, #0]
 8007e9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	f7f8 fe00 	bl	8000aa4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8007ea4:	f7f8 fe26 	bl	8000af4 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	f7f8 fe0f 	bl	8000acc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8007eae:	f7fc fe83 	bl	8004bb8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007eb2:	bf00      	nop
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	40021000 	.word	0x40021000

08007ec0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08a      	sub	sp, #40	; 0x28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ec8:	f107 0314 	add.w	r3, r7, #20
 8007ecc:	2200      	movs	r2, #0
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	605a      	str	r2, [r3, #4]
 8007ed2:	609a      	str	r2, [r3, #8]
 8007ed4:	60da      	str	r2, [r3, #12]
 8007ed6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a3b      	ldr	r2, [pc, #236]	; (8007fcc <HAL_ADC_MspInit+0x10c>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d16f      	bne.n	8007fc2 <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007ee2:	4b3b      	ldr	r3, [pc, #236]	; (8007fd0 <HAL_ADC_MspInit+0x110>)
 8007ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ee6:	4a3a      	ldr	r2, [pc, #232]	; (8007fd0 <HAL_ADC_MspInit+0x110>)
 8007ee8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007eee:	4b38      	ldr	r3, [pc, #224]	; (8007fd0 <HAL_ADC_MspInit+0x110>)
 8007ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ef2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ef6:	613b      	str	r3, [r7, #16]
 8007ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007efa:	4b35      	ldr	r3, [pc, #212]	; (8007fd0 <HAL_ADC_MspInit+0x110>)
 8007efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007efe:	4a34      	ldr	r2, [pc, #208]	; (8007fd0 <HAL_ADC_MspInit+0x110>)
 8007f00:	f043 0304 	orr.w	r3, r3, #4
 8007f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f06:	4b32      	ldr	r3, [pc, #200]	; (8007fd0 <HAL_ADC_MspInit+0x110>)
 8007f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f0a:	f003 0304 	and.w	r3, r3, #4
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f12:	4b2f      	ldr	r3, [pc, #188]	; (8007fd0 <HAL_ADC_MspInit+0x110>)
 8007f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f16:	4a2e      	ldr	r2, [pc, #184]	; (8007fd0 <HAL_ADC_MspInit+0x110>)
 8007f18:	f043 0301 	orr.w	r3, r3, #1
 8007f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f1e:	4b2c      	ldr	r3, [pc, #176]	; (8007fd0 <HAL_ADC_MspInit+0x110>)
 8007f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	60bb      	str	r3, [r7, #8]
 8007f28:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC3     ------> ADC2_IN9
    PA0     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007f2a:	2308      	movs	r3, #8
 8007f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f32:	2300      	movs	r3, #0
 8007f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f36:	f107 0314 	add.w	r3, r7, #20
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4825      	ldr	r0, [pc, #148]	; (8007fd4 <HAL_ADC_MspInit+0x114>)
 8007f3e:	f7fb f847 	bl	8002fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007f42:	2301      	movs	r3, #1
 8007f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007f46:	2303      	movs	r3, #3
 8007f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f4e:	f107 0314 	add.w	r3, r7, #20
 8007f52:	4619      	mov	r1, r3
 8007f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f58:	f7fb f83a 	bl	8002fd0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8007f5c:	4b1e      	ldr	r3, [pc, #120]	; (8007fd8 <HAL_ADC_MspInit+0x118>)
 8007f5e:	4a1f      	ldr	r2, [pc, #124]	; (8007fdc <HAL_ADC_MspInit+0x11c>)
 8007f60:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8007f62:	4b1d      	ldr	r3, [pc, #116]	; (8007fd8 <HAL_ADC_MspInit+0x118>)
 8007f64:	2224      	movs	r2, #36	; 0x24
 8007f66:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007f68:	4b1b      	ldr	r3, [pc, #108]	; (8007fd8 <HAL_ADC_MspInit+0x118>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f6e:	4b1a      	ldr	r3, [pc, #104]	; (8007fd8 <HAL_ADC_MspInit+0x118>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8007f74:	4b18      	ldr	r3, [pc, #96]	; (8007fd8 <HAL_ADC_MspInit+0x118>)
 8007f76:	2280      	movs	r2, #128	; 0x80
 8007f78:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007f7a:	4b17      	ldr	r3, [pc, #92]	; (8007fd8 <HAL_ADC_MspInit+0x118>)
 8007f7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f80:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007f82:	4b15      	ldr	r3, [pc, #84]	; (8007fd8 <HAL_ADC_MspInit+0x118>)
 8007f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f88:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8007f8a:	4b13      	ldr	r3, [pc, #76]	; (8007fd8 <HAL_ADC_MspInit+0x118>)
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8007f90:	4b11      	ldr	r3, [pc, #68]	; (8007fd8 <HAL_ADC_MspInit+0x118>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8007f96:	4810      	ldr	r0, [pc, #64]	; (8007fd8 <HAL_ADC_MspInit+0x118>)
 8007f98:	f7fa fda8 	bl	8002aec <HAL_DMA_Init>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8007fa2:	f7ff ff5d 	bl	8007e60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a0b      	ldr	r2, [pc, #44]	; (8007fd8 <HAL_ADC_MspInit+0x118>)
 8007faa:	655a      	str	r2, [r3, #84]	; 0x54
 8007fac:	4a0a      	ldr	r2, [pc, #40]	; (8007fd8 <HAL_ADC_MspInit+0x118>)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	2012      	movs	r0, #18
 8007fb8:	f7fa fb2c 	bl	8002614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8007fbc:	2012      	movs	r0, #18
 8007fbe:	f7fa fb43 	bl	8002648 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007fc2:	bf00      	nop
 8007fc4:	3728      	adds	r7, #40	; 0x28
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	50000100 	.word	0x50000100
 8007fd0:	40021000 	.word	0x40021000
 8007fd4:	48000800 	.word	0x48000800
 8007fd8:	2000025c 	.word	0x2000025c
 8007fdc:	40020408 	.word	0x40020408

08007fe0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08a      	sub	sp, #40	; 0x28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fe8:	f107 0314 	add.w	r3, r7, #20
 8007fec:	2200      	movs	r2, #0
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	605a      	str	r2, [r3, #4]
 8007ff2:	609a      	str	r2, [r3, #8]
 8007ff4:	60da      	str	r2, [r3, #12]
 8007ff6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC2)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a15      	ldr	r2, [pc, #84]	; (8008054 <HAL_DAC_MspInit+0x74>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d124      	bne.n	800804c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC2_MspInit 0 */

  /* USER CODE END DAC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 8008002:	4b15      	ldr	r3, [pc, #84]	; (8008058 <HAL_DAC_MspInit+0x78>)
 8008004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008006:	4a14      	ldr	r2, [pc, #80]	; (8008058 <HAL_DAC_MspInit+0x78>)
 8008008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800800c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800800e:	4b12      	ldr	r3, [pc, #72]	; (8008058 <HAL_DAC_MspInit+0x78>)
 8008010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008016:	613b      	str	r3, [r7, #16]
 8008018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800801a:	4b0f      	ldr	r3, [pc, #60]	; (8008058 <HAL_DAC_MspInit+0x78>)
 800801c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800801e:	4a0e      	ldr	r2, [pc, #56]	; (8008058 <HAL_DAC_MspInit+0x78>)
 8008020:	f043 0301 	orr.w	r3, r3, #1
 8008024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008026:	4b0c      	ldr	r3, [pc, #48]	; (8008058 <HAL_DAC_MspInit+0x78>)
 8008028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008032:	2340      	movs	r3, #64	; 0x40
 8008034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008036:	2303      	movs	r3, #3
 8008038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800803a:	2300      	movs	r3, #0
 800803c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800803e:	f107 0314 	add.w	r3, r7, #20
 8008042:	4619      	mov	r1, r3
 8008044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008048:	f7fa ffc2 	bl	8002fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 800804c:	bf00      	nop
 800804e:	3728      	adds	r7, #40	; 0x28
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	50000c00 	.word	0x50000c00
 8008058:	40021000 	.word	0x40021000

0800805c <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a0a      	ldr	r2, [pc, #40]	; (8008094 <HAL_HRTIM_MspInit+0x38>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d10b      	bne.n	8008086 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800806e:	4b0a      	ldr	r3, [pc, #40]	; (8008098 <HAL_HRTIM_MspInit+0x3c>)
 8008070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008072:	4a09      	ldr	r2, [pc, #36]	; (8008098 <HAL_HRTIM_MspInit+0x3c>)
 8008074:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008078:	6613      	str	r3, [r2, #96]	; 0x60
 800807a:	4b07      	ldr	r3, [pc, #28]	; (8008098 <HAL_HRTIM_MspInit+0x3c>)
 800807c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800807e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008082:	60fb      	str	r3, [r7, #12]
 8008084:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8008086:	bf00      	nop
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	40016800 	.word	0x40016800
 8008098:	40021000 	.word	0x40021000

0800809c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080a4:	f107 030c 	add.w	r3, r7, #12
 80080a8:	2200      	movs	r2, #0
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	605a      	str	r2, [r3, #4]
 80080ae:	609a      	str	r2, [r3, #8]
 80080b0:	60da      	str	r2, [r3, #12]
 80080b2:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a12      	ldr	r2, [pc, #72]	; (8008104 <HAL_HRTIM_MspPostInit+0x68>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d11d      	bne.n	80080fa <HAL_HRTIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080be:	4b12      	ldr	r3, [pc, #72]	; (8008108 <HAL_HRTIM_MspPostInit+0x6c>)
 80080c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c2:	4a11      	ldr	r2, [pc, #68]	; (8008108 <HAL_HRTIM_MspPostInit+0x6c>)
 80080c4:	f043 0301 	orr.w	r3, r3, #1
 80080c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080ca:	4b0f      	ldr	r3, [pc, #60]	; (8008108 <HAL_HRTIM_MspPostInit+0x6c>)
 80080cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	60bb      	str	r3, [r7, #8]
 80080d4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80080d6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80080da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080dc:	2302      	movs	r3, #2
 80080de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e0:	2300      	movs	r3, #0
 80080e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080e4:	2303      	movs	r3, #3
 80080e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80080e8:	230d      	movs	r3, #13
 80080ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080ec:	f107 030c 	add.w	r3, r7, #12
 80080f0:	4619      	mov	r1, r3
 80080f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80080f6:	f7fa ff6b 	bl	8002fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80080fa:	bf00      	nop
 80080fc:	3720      	adds	r7, #32
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	40016800 	.word	0x40016800
 8008108:	40021000 	.word	0x40021000

0800810c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a0d      	ldr	r2, [pc, #52]	; (8008150 <HAL_TIM_Base_MspInit+0x44>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d113      	bne.n	8008146 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800811e:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <HAL_TIM_Base_MspInit+0x48>)
 8008120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008122:	4a0c      	ldr	r2, [pc, #48]	; (8008154 <HAL_TIM_Base_MspInit+0x48>)
 8008124:	f043 0302 	orr.w	r3, r3, #2
 8008128:	6593      	str	r3, [r2, #88]	; 0x58
 800812a:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <HAL_TIM_Base_MspInit+0x48>)
 800812c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	60fb      	str	r3, [r7, #12]
 8008134:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008136:	2200      	movs	r2, #0
 8008138:	2100      	movs	r1, #0
 800813a:	201d      	movs	r0, #29
 800813c:	f7fa fa6a 	bl	8002614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008140:	201d      	movs	r0, #29
 8008142:	f7fa fa81 	bl	8002648 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8008146:	bf00      	nop
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	40000400 	.word	0x40000400
 8008154:	40021000 	.word	0x40021000

08008158 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008160:	f107 030c 	add.w	r3, r7, #12
 8008164:	2200      	movs	r2, #0
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	605a      	str	r2, [r3, #4]
 800816a:	609a      	str	r2, [r3, #8]
 800816c:	60da      	str	r2, [r3, #12]
 800816e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a11      	ldr	r2, [pc, #68]	; (80081bc <HAL_TIM_MspPostInit+0x64>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d11b      	bne.n	80081b2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800817a:	4b11      	ldr	r3, [pc, #68]	; (80081c0 <HAL_TIM_MspPostInit+0x68>)
 800817c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800817e:	4a10      	ldr	r2, [pc, #64]	; (80081c0 <HAL_TIM_MspPostInit+0x68>)
 8008180:	f043 0304 	orr.w	r3, r3, #4
 8008184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008186:	4b0e      	ldr	r3, [pc, #56]	; (80081c0 <HAL_TIM_MspPostInit+0x68>)
 8008188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800818a:	f003 0304 	and.w	r3, r3, #4
 800818e:	60bb      	str	r3, [r7, #8]
 8008190:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008192:	2340      	movs	r3, #64	; 0x40
 8008194:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008196:	2302      	movs	r3, #2
 8008198:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800819a:	2300      	movs	r3, #0
 800819c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800819e:	2300      	movs	r3, #0
 80081a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80081a2:	2302      	movs	r3, #2
 80081a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081a6:	f107 030c 	add.w	r3, r7, #12
 80081aa:	4619      	mov	r1, r3
 80081ac:	4805      	ldr	r0, [pc, #20]	; (80081c4 <HAL_TIM_MspPostInit+0x6c>)
 80081ae:	f7fa ff0f 	bl	8002fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80081b2:	bf00      	nop
 80081b4:	3720      	adds	r7, #32
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	40000400 	.word	0x40000400
 80081c0:	40021000 	.word	0x40021000
 80081c4:	48000800 	.word	0x48000800

080081c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08c      	sub	sp, #48	; 0x30
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80081de:	4b2d      	ldr	r3, [pc, #180]	; (8008294 <HAL_InitTick+0xcc>)
 80081e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e2:	4a2c      	ldr	r2, [pc, #176]	; (8008294 <HAL_InitTick+0xcc>)
 80081e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80081e8:	6613      	str	r3, [r2, #96]	; 0x60
 80081ea:	4b2a      	ldr	r3, [pc, #168]	; (8008294 <HAL_InitTick+0xcc>)
 80081ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081f2:	60bb      	str	r3, [r7, #8]
 80081f4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80081f6:	f107 020c 	add.w	r2, r7, #12
 80081fa:	f107 0310 	add.w	r3, r7, #16
 80081fe:	4611      	mov	r1, r2
 8008200:	4618      	mov	r0, r3
 8008202:	f7fd f9c1 	bl	8005588 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8008206:	f7fd f9a9 	bl	800555c <HAL_RCC_GetPCLK2Freq>
 800820a:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	4a22      	ldr	r2, [pc, #136]	; (8008298 <HAL_InitTick+0xd0>)
 8008210:	fba2 2303 	umull	r2, r3, r2, r3
 8008214:	0c9b      	lsrs	r3, r3, #18
 8008216:	3b01      	subs	r3, #1
 8008218:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800821a:	4b20      	ldr	r3, [pc, #128]	; (800829c <HAL_InitTick+0xd4>)
 800821c:	4a20      	ldr	r2, [pc, #128]	; (80082a0 <HAL_InitTick+0xd8>)
 800821e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8008220:	4b1e      	ldr	r3, [pc, #120]	; (800829c <HAL_InitTick+0xd4>)
 8008222:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008226:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8008228:	4a1c      	ldr	r2, [pc, #112]	; (800829c <HAL_InitTick+0xd4>)
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800822e:	4b1b      	ldr	r3, [pc, #108]	; (800829c <HAL_InitTick+0xd4>)
 8008230:	2200      	movs	r2, #0
 8008232:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008234:	4b19      	ldr	r3, [pc, #100]	; (800829c <HAL_InitTick+0xd4>)
 8008236:	2200      	movs	r2, #0
 8008238:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800823a:	4818      	ldr	r0, [pc, #96]	; (800829c <HAL_InitTick+0xd4>)
 800823c:	f7fd fc68 	bl	8005b10 <HAL_TIM_Base_Init>
 8008240:	4603      	mov	r3, r0
 8008242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8008246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800824a:	2b00      	cmp	r3, #0
 800824c:	d11b      	bne.n	8008286 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800824e:	4813      	ldr	r0, [pc, #76]	; (800829c <HAL_InitTick+0xd4>)
 8008250:	f7fd fcb6 	bl	8005bc0 <HAL_TIM_Base_Start_IT>
 8008254:	4603      	mov	r3, r0
 8008256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800825a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800825e:	2b00      	cmp	r3, #0
 8008260:	d111      	bne.n	8008286 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8008262:	2019      	movs	r0, #25
 8008264:	f7fa f9f0 	bl	8002648 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b0f      	cmp	r3, #15
 800826c:	d808      	bhi.n	8008280 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800826e:	2200      	movs	r2, #0
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	2019      	movs	r0, #25
 8008274:	f7fa f9ce 	bl	8002614 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008278:	4a0a      	ldr	r2, [pc, #40]	; (80082a4 <HAL_InitTick+0xdc>)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6013      	str	r3, [r2, #0]
 800827e:	e002      	b.n	8008286 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8008286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800828a:	4618      	mov	r0, r3
 800828c:	3730      	adds	r7, #48	; 0x30
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	40021000 	.word	0x40021000
 8008298:	431bde83 	.word	0x431bde83
 800829c:	200002bc 	.word	0x200002bc
 80082a0:	40012c00 	.word	0x40012c00
 80082a4:	20000000 	.word	0x20000000

080082a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80082a8:	b480      	push	{r7}
 80082aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80082ac:	e7fe      	b.n	80082ac <NMI_Handler+0x4>

080082ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80082ae:	b480      	push	{r7}
 80082b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80082b2:	e7fe      	b.n	80082b2 <HardFault_Handler+0x4>

080082b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80082b4:	b480      	push	{r7}
 80082b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80082b8:	e7fe      	b.n	80082b8 <MemManage_Handler+0x4>

080082ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80082ba:	b480      	push	{r7}
 80082bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80082be:	e7fe      	b.n	80082be <BusFault_Handler+0x4>

080082c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80082c0:	b480      	push	{r7}
 80082c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80082c4:	e7fe      	b.n	80082c4 <UsageFault_Handler+0x4>

080082c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80082c6:	b480      	push	{r7}
 80082c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80082ca:	bf00      	nop
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80082d4:	b480      	push	{r7}
 80082d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80082d8:	bf00      	nop
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80082e2:	b480      	push	{r7}
 80082e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80082e6:	bf00      	nop
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80082f0:	b480      	push	{r7}
 80082f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  {
    extern volatile uint32_t remainAutoReloadTimerLoopVal_S;

    /* Manage number of loop before interrupt has to be processed. */
    if (remainAutoReloadTimerLoopVal_S) {
 80082f4:	4b06      	ldr	r3, [pc, #24]	; (8008310 <SysTick_Handler+0x20>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d004      	beq.n	8008306 <SysTick_Handler+0x16>
      remainAutoReloadTimerLoopVal_S--;
 80082fc:	4b04      	ldr	r3, [pc, #16]	; (8008310 <SysTick_Handler+0x20>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	3b01      	subs	r3, #1
 8008302:	4a03      	ldr	r2, [pc, #12]	; (8008310 <SysTick_Handler+0x20>)
 8008304:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008306:	bf00      	nop
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	20000028 	.word	0x20000028

08008314 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8008318:	4802      	ldr	r0, [pc, #8]	; (8008324 <ADC1_2_IRQHandler+0x10>)
 800831a:	f7f9 f8ed 	bl	80014f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800831e:	bf00      	nop
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	200000a8 	.word	0x200000a8

08008328 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800832c:	4802      	ldr	r0, [pc, #8]	; (8008338 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800832e:	f7fd fe33 	bl	8005f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8008332:	bf00      	nop
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	200002bc 	.word	0x200002bc

0800833c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008340:	4802      	ldr	r0, [pc, #8]	; (800834c <TIM3_IRQHandler+0x10>)
 8008342:	f7fd fe29 	bl	8005f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008346:	bf00      	nop
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	20000114 	.word	0x20000114

08008350 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008354:	4802      	ldr	r0, [pc, #8]	; (8008360 <DMA2_Channel1_IRQHandler+0x10>)
 8008356:	f7fa fcec 	bl	8002d32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800835a:	bf00      	nop
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	2000025c 	.word	0x2000025c

08008364 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008364:	b480      	push	{r7}
 8008366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008368:	4b06      	ldr	r3, [pc, #24]	; (8008384 <SystemInit+0x20>)
 800836a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800836e:	4a05      	ldr	r2, [pc, #20]	; (8008384 <SystemInit+0x20>)
 8008370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008378:	bf00      	nop
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	e000ed00 	.word	0xe000ed00

08008388 <Reset_Handler>:
 8008388:	480d      	ldr	r0, [pc, #52]	; (80083c0 <LoopForever+0x2>)
 800838a:	4685      	mov	sp, r0
 800838c:	480d      	ldr	r0, [pc, #52]	; (80083c4 <LoopForever+0x6>)
 800838e:	490e      	ldr	r1, [pc, #56]	; (80083c8 <LoopForever+0xa>)
 8008390:	4a0e      	ldr	r2, [pc, #56]	; (80083cc <LoopForever+0xe>)
 8008392:	2300      	movs	r3, #0
 8008394:	e002      	b.n	800839c <LoopCopyDataInit>

08008396 <CopyDataInit>:
 8008396:	58d4      	ldr	r4, [r2, r3]
 8008398:	50c4      	str	r4, [r0, r3]
 800839a:	3304      	adds	r3, #4

0800839c <LoopCopyDataInit>:
 800839c:	18c4      	adds	r4, r0, r3
 800839e:	428c      	cmp	r4, r1
 80083a0:	d3f9      	bcc.n	8008396 <CopyDataInit>
 80083a2:	4a0b      	ldr	r2, [pc, #44]	; (80083d0 <LoopForever+0x12>)
 80083a4:	4c0b      	ldr	r4, [pc, #44]	; (80083d4 <LoopForever+0x16>)
 80083a6:	2300      	movs	r3, #0
 80083a8:	e001      	b.n	80083ae <LoopFillZerobss>

080083aa <FillZerobss>:
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	3204      	adds	r2, #4

080083ae <LoopFillZerobss>:
 80083ae:	42a2      	cmp	r2, r4
 80083b0:	d3fb      	bcc.n	80083aa <FillZerobss>
 80083b2:	f7ff ffd7 	bl	8008364 <SystemInit>
 80083b6:	f000 fa29 	bl	800880c <__libc_init_array>
 80083ba:	f7ff f879 	bl	80074b0 <main>

080083be <LoopForever>:
 80083be:	e7fe      	b.n	80083be <LoopForever>
 80083c0:	20020000 	.word	0x20020000
 80083c4:	20000000 	.word	0x20000000
 80083c8:	20000068 	.word	0x20000068
 80083cc:	080088a8 	.word	0x080088a8
 80083d0:	20000068 	.word	0x20000068
 80083d4:	20000438 	.word	0x20000438

080083d8 <ADC3_IRQHandler>:
 80083d8:	e7fe      	b.n	80083d8 <ADC3_IRQHandler>
	...

080083dc <Test_LED_Amine_step>:
static RT_MODEL_Test_LED_Amine Test_LED_Amine_M_;
RT_MODEL_Test_LED_Amine *const Test_LED_Amine_M = &Test_LED_Amine_M_;

/* Model step function */
void Test_LED_Amine_step(void)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
  /* S-Function (DAC_Write): '<Root>/DAC_Write' incorporates:
   *  Constant: '<Root>/Constant'
   */
  {
    HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, ((uint16_T)2028U));
 80083e0:	f240 73ec 	movw	r3, #2028	; 0x7ec
 80083e4:	2200      	movs	r2, #0
 80083e6:	2100      	movs	r1, #0
 80083e8:	4804      	ldr	r0, [pc, #16]	; (80083fc <Test_LED_Amine_step+0x20>)
 80083ea:	f7fa f9b0 	bl	800274e <HAL_DAC_SetValue>
    HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 80083ee:	2100      	movs	r1, #0
 80083f0:	4802      	ldr	r0, [pc, #8]	; (80083fc <Test_LED_Amine_step+0x20>)
 80083f2:	f7fa f959 	bl	80026a8 <HAL_DAC_Start>
  /* Update for S-Function (TIMERS_Config): '<Root>/Timers' */
  {
  }

  /* End of Update for S-Function (TIMERS_Config): '<Root>/Timers' */
}
 80083f6:	bf00      	nop
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	20000094 	.word	0x20000094

08008400 <Test_LED_Amine_initialize>:

/* Model initialize function */
void Test_LED_Amine_initialize(void)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize error status */
  rtmSetErrorStatus(Test_LED_Amine_M, (NULL));
 8008404:	4b56      	ldr	r3, [pc, #344]	; (8008560 <Test_LED_Amine_initialize+0x160>)
 8008406:	2200      	movs	r2, #0
 8008408:	601a      	str	r2, [r3, #0]

  /* block I/O */
  (void) memset(((void *) &Test_LED_Amine_B), 0,
 800840a:	2208      	movs	r2, #8
 800840c:	2100      	movs	r1, #0
 800840e:	4855      	ldr	r0, [pc, #340]	; (8008564 <Test_LED_Amine_initialize+0x164>)
 8008410:	f000 fa20 	bl	8008854 <memset>
  {
    /* user code (Start function Header) */
    {
      /* ADC2 initialization. */
      /* Store ADC2 informations and its handler. */
      G_ADC_Conf = &ADC2_Conf;
 8008414:	4b54      	ldr	r3, [pc, #336]	; (8008568 <Test_LED_Amine_initialize+0x168>)
 8008416:	4a55      	ldr	r2, [pc, #340]	; (800856c <Test_LED_Amine_initialize+0x16c>)
 8008418:	601a      	str	r2, [r3, #0]
      G_ADC_Handler = &hadc2;
 800841a:	4b55      	ldr	r3, [pc, #340]	; (8008570 <Test_LED_Amine_initialize+0x170>)
 800841c:	4a55      	ldr	r2, [pc, #340]	; (8008574 <Test_LED_Amine_initialize+0x174>)
 800841e:	601a      	str	r2, [r3, #0]

      /* ADC2 Regular channel DMA buffer pointer initialization. */
      ADC2_DmaBuff = &ADC2_RegularConvertedValue[0];
 8008420:	4b55      	ldr	r3, [pc, #340]	; (8008578 <Test_LED_Amine_initialize+0x178>)
 8008422:	4a56      	ldr	r2, [pc, #344]	; (800857c <Test_LED_Amine_initialize+0x17c>)
 8008424:	601a      	str	r2, [r3, #0]

      /* ADC2 Regular channel DMA Half transfer complete buffer pointer initialization. */
      ADC2_DmaHalf = &ADC2_RegularConvertedValue[0];
 8008426:	4b56      	ldr	r3, [pc, #344]	; (8008580 <Test_LED_Amine_initialize+0x180>)
 8008428:	4a54      	ldr	r2, [pc, #336]	; (800857c <Test_LED_Amine_initialize+0x17c>)
 800842a:	601a      	str	r2, [r3, #0]

      /* ADC2 Regular channel DMA Full transfer complete buffer pointer initialization. */
      ADC2_DmaFull = &ADC2_RegularConvertedValue[(ADC2_DMA_BUFF_SIZE>1) ?
 800842c:	4b55      	ldr	r3, [pc, #340]	; (8008584 <Test_LED_Amine_initialize+0x184>)
 800842e:	4a53      	ldr	r2, [pc, #332]	; (800857c <Test_LED_Amine_initialize+0x17c>)
 8008430:	601a      	str	r2, [r3, #0]
        (ADC2_DMA_BUFF_SIZE/2-1) : 0];

      /* ADC2 DMA buffer size. */
      ADC2_Conf.dmaBuffSize = ADC2_DMA_BUFF_SIZE;
 8008432:	4b4e      	ldr	r3, [pc, #312]	; (800856c <Test_LED_Amine_initialize+0x16c>)
 8008434:	2203      	movs	r2, #3
 8008436:	619a      	str	r2, [r3, #24]
      ADC2_Conf.regularBuffer = ADC2_RegularConvertedValue;
 8008438:	4b4c      	ldr	r3, [pc, #304]	; (800856c <Test_LED_Amine_initialize+0x16c>)
 800843a:	4a50      	ldr	r2, [pc, #320]	; (800857c <Test_LED_Amine_initialize+0x17c>)
 800843c:	601a      	str	r2, [r3, #0]
      ADC2_Conf.regularCount = 1;
 800843e:	4b4b      	ldr	r3, [pc, #300]	; (800856c <Test_LED_Amine_initialize+0x16c>)
 8008440:	2201      	movs	r2, #1
 8008442:	605a      	str	r2, [r3, #4]

      /* DMA acquisition mode. */
      ADC2_Conf.dmaUsed = true;
 8008444:	4b49      	ldr	r3, [pc, #292]	; (800856c <Test_LED_Amine_initialize+0x16c>)
 8008446:	2201      	movs	r2, #1
 8008448:	771a      	strb	r2, [r3, #28]
    }

    {
      /* DAC2 initialization */
      /* Store DAC2 data information and its handler */
      G_DAC_Conf = &DAC2_Conf;
 800844a:	4b4f      	ldr	r3, [pc, #316]	; (8008588 <Test_LED_Amine_initialize+0x188>)
 800844c:	4a4f      	ldr	r2, [pc, #316]	; (800858c <Test_LED_Amine_initialize+0x18c>)
 800844e:	601a      	str	r2, [r3, #0]
      G_DAC_Handler = &hdac2;
 8008450:	4b4f      	ldr	r3, [pc, #316]	; (8008590 <Test_LED_Amine_initialize+0x190>)
 8008452:	4a50      	ldr	r2, [pc, #320]	; (8008594 <Test_LED_Amine_initialize+0x194>)
 8008454:	601a      	str	r2, [r3, #0]

      /* Interrupt vector initialization */
      DAC2_Conf.CpltTrans = NULL;
 8008456:	4b4d      	ldr	r3, [pc, #308]	; (800858c <Test_LED_Amine_initialize+0x18c>)
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]
      DAC2_Conf.HalfTrans = NULL;
 800845c:	4b4b      	ldr	r3, [pc, #300]	; (800858c <Test_LED_Amine_initialize+0x18c>)
 800845e:	2200      	movs	r2, #0
 8008460:	605a      	str	r2, [r3, #4]
      DAC2_Conf.ErrorIt = NULL;
 8008462:	4b4a      	ldr	r3, [pc, #296]	; (800858c <Test_LED_Amine_initialize+0x18c>)
 8008464:	2200      	movs	r2, #0
 8008466:	609a      	str	r2, [r3, #8]
      DAC2_Conf.UnderIt = NULL;
 8008468:	4b48      	ldr	r3, [pc, #288]	; (800858c <Test_LED_Amine_initialize+0x18c>)
 800846a:	2200      	movs	r2, #0
 800846c:	60da      	str	r2, [r3, #12]
    }

    {
      /* TIM3 initialization. */
      /* Store TIM3 informations and its handler. */
      G_TIM_Conf[G_TIM_Count] = &TIM3_Conf;
 800846e:	4b4a      	ldr	r3, [pc, #296]	; (8008598 <Test_LED_Amine_initialize+0x198>)
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	4619      	mov	r1, r3
 8008474:	4b49      	ldr	r3, [pc, #292]	; (800859c <Test_LED_Amine_initialize+0x19c>)
 8008476:	4a4a      	ldr	r2, [pc, #296]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 8008478:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
      G_TIM_Handler[G_TIM_Count] = &htim3;
 800847c:	4b46      	ldr	r3, [pc, #280]	; (8008598 <Test_LED_Amine_initialize+0x198>)
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	4619      	mov	r1, r3
 8008482:	4b48      	ldr	r3, [pc, #288]	; (80085a4 <Test_LED_Amine_initialize+0x1a4>)
 8008484:	4a48      	ldr	r2, [pc, #288]	; (80085a8 <Test_LED_Amine_initialize+0x1a8>)
 8008486:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

      /* Store TIM information. */
      TIM3_Conf.TIM_Prescaler = 1023;
 800848a:	4b45      	ldr	r3, [pc, #276]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 800848c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008490:	601a      	str	r2, [r3, #0]
      TIM3_Conf.TIM_APBClock = 170000000;
 8008492:	4b43      	ldr	r3, [pc, #268]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 8008494:	4a45      	ldr	r2, [pc, #276]	; (80085ac <Test_LED_Amine_initialize+0x1ac>)
 8008496:	605a      	str	r2, [r3, #4]
      TIM3_Conf.TIM_ARR = 166015 - 1;
 8008498:	4b41      	ldr	r3, [pc, #260]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 800849a:	4a45      	ldr	r2, [pc, #276]	; (80085b0 <Test_LED_Amine_initialize+0x1b0>)
 800849c:	609a      	str	r2, [r3, #8]
      TIM3_Conf.TIM_Clock = 166015.63;
 800849e:	4b40      	ldr	r3, [pc, #256]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 80084a0:	4a44      	ldr	r2, [pc, #272]	; (80085b4 <Test_LED_Amine_initialize+0x1b4>)
 80084a2:	60da      	str	r2, [r3, #12]
      TIM3_Conf.TIM_Freq = 1.0;
 80084a4:	4b3e      	ldr	r3, [pc, #248]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 80084a6:	2201      	movs	r2, #1
 80084a8:	611a      	str	r2, [r3, #16]
      TIM3_Conf.CH1_duty = 50;
 80084aa:	4b3d      	ldr	r3, [pc, #244]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 80084ac:	2232      	movs	r2, #50	; 0x32
 80084ae:	619a      	str	r2, [r3, #24]
      TIM3_Conf.CH2_duty = 0.0;
 80084b0:	4b3b      	ldr	r3, [pc, #236]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	61da      	str	r2, [r3, #28]
      TIM3_Conf.CH3_duty = 0.0;
 80084b6:	4b3a      	ldr	r3, [pc, #232]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	621a      	str	r2, [r3, #32]
      TIM3_Conf.CH4_duty = 0.0;
 80084bc:	4b38      	ldr	r3, [pc, #224]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 80084be:	2200      	movs	r2, #0
 80084c0:	625a      	str	r2, [r3, #36]	; 0x24
      TIM3_Conf.CH1_type = OUTPUT_PWM;
 80084c2:	4b37      	ldr	r3, [pc, #220]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 80084c4:	2201      	movs	r2, #1
 80084c6:	751a      	strb	r2, [r3, #20]
      TIM3_Conf.CH2_type = UNKNOWN;
 80084c8:	4b35      	ldr	r3, [pc, #212]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 80084ca:	2209      	movs	r2, #9
 80084cc:	755a      	strb	r2, [r3, #21]
      TIM3_Conf.CH3_type = UNKNOWN;
 80084ce:	4b34      	ldr	r3, [pc, #208]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 80084d0:	2209      	movs	r2, #9
 80084d2:	759a      	strb	r2, [r3, #22]
      TIM3_Conf.CH4_type = UNKNOWN;
 80084d4:	4b32      	ldr	r3, [pc, #200]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 80084d6:	2209      	movs	r2, #9
 80084d8:	75da      	strb	r2, [r3, #23]

      /* Interrupt handler default initialization. */
      TIM3_Conf.ItUpFcn = NULL;
 80084da:	4b31      	ldr	r3, [pc, #196]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 80084dc:	2200      	movs	r2, #0
 80084de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      TIM3_Conf.ItTrgFcn = NULL;
 80084e2:	4b2f      	ldr	r3, [pc, #188]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      TIM3_Conf.ItComFcn = NULL;
 80084ea:	4b2d      	ldr	r3, [pc, #180]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 80084ec:	2200      	movs	r2, #0
 80084ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      TIM3_Conf.ItBrkFcn = NULL;
 80084f2:	4b2b      	ldr	r3, [pc, #172]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      TIM3_Conf.ItCcFcn = NULL;
 80084fa:	4b29      	ldr	r3, [pc, #164]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Update interrupt function. */
      TIM3_Conf.ItUpFcn = TIM3_ItUpFcn;
 8008502:	4b27      	ldr	r3, [pc, #156]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 8008504:	4a2c      	ldr	r2, [pc, #176]	; (80085b8 <Test_LED_Amine_initialize+0x1b8>)
 8008506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /*****Bugzilla 63376 *****/
      /*SET_BIT((&htim3)->Instance->CR1,TIM_CR1_ARPE);*/

      /* Update register value with blockset value. */
      /* Prescaler. */
      __HAL_TIM_SET_PRESCALER(&htim3,TIM3_Conf.TIM_Prescaler);
 800850a:	4b27      	ldr	r3, [pc, #156]	; (80085a8 <Test_LED_Amine_initialize+0x1a8>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a24      	ldr	r2, [pc, #144]	; (80085a0 <Test_LED_Amine_initialize+0x1a0>)
 8008510:	6812      	ldr	r2, [r2, #0]
 8008512:	629a      	str	r2, [r3, #40]	; 0x28

      /* Autoreload: ARR. */
      __HAL_TIM_SET_AUTORELOAD(&htim3,166015 - 1);
 8008514:	4b24      	ldr	r3, [pc, #144]	; (80085a8 <Test_LED_Amine_initialize+0x1a8>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a25      	ldr	r2, [pc, #148]	; (80085b0 <Test_LED_Amine_initialize+0x1b0>)
 800851a:	62da      	str	r2, [r3, #44]	; 0x2c
 800851c:	4b22      	ldr	r3, [pc, #136]	; (80085a8 <Test_LED_Amine_initialize+0x1a8>)
 800851e:	4a24      	ldr	r2, [pc, #144]	; (80085b0 <Test_LED_Amine_initialize+0x1b0>)
 8008520:	60da      	str	r2, [r3, #12]

      /* Set CH1 Pulse value. */
      __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,(uint32_t)(83007));
 8008522:	4b21      	ldr	r3, [pc, #132]	; (80085a8 <Test_LED_Amine_initialize+0x1a8>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a25      	ldr	r2, [pc, #148]	; (80085bc <Test_LED_Amine_initialize+0x1bc>)
 8008528:	635a      	str	r2, [r3, #52]	; 0x34

      /* Update registers before start operation to come. */
      HAL_TIM_GenerateEvent(&htim3,TIM_EVENTSOURCE_UPDATE);
 800852a:	2101      	movs	r1, #1
 800852c:	481e      	ldr	r0, [pc, #120]	; (80085a8 <Test_LED_Amine_initialize+0x1a8>)
 800852e:	f7fd ffc3 	bl	80064b8 <HAL_TIM_GenerateEvent>

    /* user code (Start function Body) */
    {
      /* ADC2 Start. */
      /* Start DMA conversion for ADC2 regular channel. */
      HAL_ADC_Start_DMA(&hadc2, (uint32_t*)&ADC2_RegularConvertedValue[0],
 8008532:	2203      	movs	r2, #3
 8008534:	4911      	ldr	r1, [pc, #68]	; (800857c <Test_LED_Amine_initialize+0x17c>)
 8008536:	480f      	ldr	r0, [pc, #60]	; (8008574 <Test_LED_Amine_initialize+0x174>)
 8008538:	f7f8 ff02 	bl	8001340 <HAL_ADC_Start_DMA>
                        ADC2_DMA_BUFF_SIZE);
    }

    /* HRTIM1 initialization */
    HRTIM1_Initialization();
 800853c:	f000 f8a4 	bl	8008688 <HRTIM1_Initialization>

    {
      /* TIM3 Start. */

      /* Wait for htim3 State READY. */
      while ((&htim3)->State == HAL_TIM_STATE_BUSY) {
 8008540:	bf00      	nop
 8008542:	4b19      	ldr	r3, [pc, #100]	; (80085a8 <Test_LED_Amine_initialize+0x1a8>)
 8008544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b02      	cmp	r3, #2
 800854c:	d0f9      	beq.n	8008542 <Test_LED_Amine_initialize+0x142>
      }

      HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800854e:	2100      	movs	r1, #0
 8008550:	4815      	ldr	r0, [pc, #84]	; (80085a8 <Test_LED_Amine_initialize+0x1a8>)
 8008552:	f7fd fc0f 	bl	8005d74 <HAL_TIM_PWM_Start>

      /* Start interrupt for Update event*/
      HAL_TIM_Base_Start_IT(&htim3);
 8008556:	4814      	ldr	r0, [pc, #80]	; (80085a8 <Test_LED_Amine_initialize+0x1a8>)
 8008558:	f7fd fb32 	bl	8005bc0 <HAL_TIM_Base_Start_IT>
    }
  }
}
 800855c:	bf00      	nop
 800855e:	bd80      	pop	{r7, pc}
 8008560:	20000088 	.word	0x20000088
 8008564:	20000308 	.word	0x20000308
 8008568:	2000031c 	.word	0x2000031c
 800856c:	20000030 	.word	0x20000030
 8008570:	20000320 	.word	0x20000320
 8008574:	200000a8 	.word	0x200000a8
 8008578:	20000318 	.word	0x20000318
 800857c:	20000324 	.word	0x20000324
 8008580:	20000314 	.word	0x20000314
 8008584:	20000310 	.word	0x20000310
 8008588:	2000032c 	.word	0x2000032c
 800858c:	20000334 	.word	0x20000334
 8008590:	20000330 	.word	0x20000330
 8008594:	20000094 	.word	0x20000094
 8008598:	2000008c 	.word	0x2000008c
 800859c:	20000434 	.word	0x20000434
 80085a0:	200003a0 	.word	0x200003a0
 80085a4:	2000039c 	.word	0x2000039c
 80085a8:	20000114 	.word	0x20000114
 80085ac:	0a21fe80 	.word	0x0a21fe80
 80085b0:	0002887e 	.word	0x0002887e
 80085b4:	0002887f 	.word	0x0002887f
 80085b8:	080087d5 	.word	0x080087d5
 80085bc:	0001443f 	.word	0x0001443f

080085c0 <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non-blocking mode.
 * @param hadc ADC handle
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  ADC_ConfTypeDef* pConf;
  ADC_HandleTypeDef* pHandler;
  pConf = G_ADC_Conf;
 80085c8:	4b1e      	ldr	r3, [pc, #120]	; (8008644 <HAL_ADC_ConvCpltCallback+0x84>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	60fb      	str	r3, [r7, #12]
  pHandler = G_ADC_Handler;
 80085ce:	4b1e      	ldr	r3, [pc, #120]	; (8008648 <HAL_ADC_ConvCpltCallback+0x88>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	60bb      	str	r3, [r7, #8]
  if (pHandler == hadc) {
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d12f      	bne.n	800863c <HAL_ADC_ConvCpltCallback+0x7c>
    if (pConf->dmaUsed == false) {
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	7f1b      	ldrb	r3, [r3, #28]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d119      	bne.n	8008618 <HAL_ADC_ConvCpltCallback+0x58>
      /* Process It for current received channel. */
      /* Store converted value of current regular channel. */
      pConf->regularBuffer[pConf->regularRank] = (uint16_t)HAL_ADC_GetValue(hadc);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7f8 ff79 	bl	80014dc <HAL_ADC_GetValue>
 80085ea:	4601      	mov	r1, r0
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	4413      	add	r3, r2
 80085f8:	b28a      	uxth	r2, r1
 80085fa:	801a      	strh	r2, [r3, #0]

      /* Increment rank for next conversion. */
      pConf->regularRank++;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	1c5a      	adds	r2, r3, #1
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	609a      	str	r2, [r3, #8]

      /* Test for max conversion channel number */
      if (pConf->regularRank >= pConf->regularCount) {
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	689a      	ldr	r2, [r3, #8]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	429a      	cmp	r2, r3
 8008610:	d302      	bcc.n	8008618 <HAL_ADC_ConvCpltCallback+0x58>
        pConf->regularRank = 0;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	609a      	str	r2, [r3, #8]
      }
    }

    if (pConf->ItEOCFcn != NULL) {
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <HAL_ADC_ConvCpltCallback+0x66>
      /* Call End Of Conversion function */
      pConf->ItEOCFcn();
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	4798      	blx	r3
    }

    if (pConf->dmaUsed == true) {
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	7f1b      	ldrb	r3, [r3, #28]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d106      	bne.n	800863c <HAL_ADC_ConvCpltCallback+0x7c>
      if (pConf->ItDMAFullFcn != NULL) {
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008632:	2b00      	cmp	r3, #0
 8008634:	d002      	beq.n	800863c <HAL_ADC_ConvCpltCallback+0x7c>
        /* Call DMA transfer complete function */
        pConf->ItDMAFullFcn();
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	4798      	blx	r3
      }
    }
  }
}
 800863c:	bf00      	nop
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	2000031c 	.word	0x2000031c
 8008648:	20000320 	.word	0x20000320

0800864c <HAL_ADC_ConvHalfCpltCallback>:
 * @brief  Conversion DMA half-transfer callback in non-blocking mode.
 * @param hadc ADC handle
 * @retval None
 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  ADC_ConfTypeDef* pConf;
  ADC_HandleTypeDef* pHandler;
  pConf = G_ADC_Conf;
 8008654:	4b0a      	ldr	r3, [pc, #40]	; (8008680 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	60fb      	str	r3, [r7, #12]
  pHandler = G_ADC_Handler;
 800865a:	4b0a      	ldr	r3, [pc, #40]	; (8008684 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	60bb      	str	r3, [r7, #8]
  if (pHandler == hadc) {
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	429a      	cmp	r2, r3
 8008666:	d106      	bne.n	8008676 <HAL_ADC_ConvHalfCpltCallback+0x2a>
    if (pConf->ItDMAHalfFullFcn != NULL) {
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <HAL_ADC_ConvHalfCpltCallback+0x2a>
      /* Call DMA Half transfer complete function */
      pConf->ItDMAHalfFullFcn();
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008674:	4798      	blx	r3
    }
  }
}
 8008676:	bf00      	nop
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	2000031c 	.word	0x2000031c
 8008684:	20000320 	.word	0x20000320

08008688 <HRTIM1_Initialization>:
 * Function Name  : HRTIM1_Initialization
 * Description    : Initialization of HRTIM1
 * Input          : -
 *******************************************************************************/
void HRTIM1_Initialization(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	af00      	add	r7, sp, #0
  /*Store HRTimer frequency */
  HRTIM1_DataLink.HRTIM_Clock = 170000000;
 800868c:	4b3d      	ldr	r3, [pc, #244]	; (8008784 <HRTIM1_Initialization+0xfc>)
 800868e:	4a3e      	ldr	r2, [pc, #248]	; (8008788 <HRTIM1_Initialization+0x100>)
 8008690:	601a      	str	r2, [r3, #0]

  /*Store Master Timer information */
  HRTIM1_DataLink.M_PWM_Period = 200000;
 8008692:	4b3c      	ldr	r3, [pc, #240]	; (8008784 <HRTIM1_Initialization+0xfc>)
 8008694:	4a3d      	ldr	r2, [pc, #244]	; (800878c <HRTIM1_Initialization+0x104>)
 8008696:	605a      	str	r2, [r3, #4]
  HRTIM1_DataLink.M_Unit1 = 1360;
 8008698:	4b3a      	ldr	r3, [pc, #232]	; (8008784 <HRTIM1_Initialization+0xfc>)
 800869a:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 800869e:	609a      	str	r2, [r3, #8]
  HRTIM1_DataLink.M_Unit2 = 6800;
 80086a0:	4b38      	ldr	r3, [pc, #224]	; (8008784 <HRTIM1_Initialization+0xfc>)
 80086a2:	f641 2290 	movw	r2, #6800	; 0x1a90
 80086a6:	60da      	str	r2, [r3, #12]
  HRTIM1_DataLink.M_Unit3 = 3000;
 80086a8:	4b36      	ldr	r3, [pc, #216]	; (8008784 <HRTIM1_Initialization+0xfc>)
 80086aa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80086ae:	611a      	str	r2, [r3, #16]
  HRTIM1_DataLink.M_Unit4 = 0;
 80086b0:	4b34      	ldr	r3, [pc, #208]	; (8008784 <HRTIM1_Initialization+0xfc>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	615a      	str	r2, [r3, #20]

  /*Store Timer A information */
  HRTIM1_DataLink.A_PWM_Period = 200000;
 80086b6:	4b33      	ldr	r3, [pc, #204]	; (8008784 <HRTIM1_Initialization+0xfc>)
 80086b8:	4a34      	ldr	r2, [pc, #208]	; (800878c <HRTIM1_Initialization+0x104>)
 80086ba:	619a      	str	r2, [r3, #24]
  HRTIM1_DataLink.A_Unit1 = 6800;
 80086bc:	4b31      	ldr	r3, [pc, #196]	; (8008784 <HRTIM1_Initialization+0xfc>)
 80086be:	f641 2290 	movw	r2, #6800	; 0x1a90
 80086c2:	61da      	str	r2, [r3, #28]
  HRTIM1_DataLink.A_Unit2 = 0;
 80086c4:	4b2f      	ldr	r3, [pc, #188]	; (8008784 <HRTIM1_Initialization+0xfc>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	621a      	str	r2, [r3, #32]
  HRTIM1_DataLink.A_Unit3 = 0;
 80086ca:	4b2e      	ldr	r3, [pc, #184]	; (8008784 <HRTIM1_Initialization+0xfc>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	625a      	str	r2, [r3, #36]	; 0x24
  HRTIM1_DataLink.A_Unit4 = 0;
 80086d0:	4b2c      	ldr	r3, [pc, #176]	; (8008784 <HRTIM1_Initialization+0xfc>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	629a      	str	r2, [r3, #40]	; 0x28
  HRTIM1_DataLink.A_ICVal1 = 0;
 80086d6:	4b2b      	ldr	r3, [pc, #172]	; (8008784 <HRTIM1_Initialization+0xfc>)
 80086d8:	2200      	movs	r2, #0
 80086da:	62da      	str	r2, [r3, #44]	; 0x2c
  HRTIM1_DataLink.A_ICVal2 = 0;
 80086dc:	4b29      	ldr	r3, [pc, #164]	; (8008784 <HRTIM1_Initialization+0xfc>)
 80086de:	2200      	movs	r2, #0
 80086e0:	631a      	str	r2, [r3, #48]	; 0x30

  /*Store Timer B information */
  HRTIM1_DataLink.B_PWM_Period = 200000;
 80086e2:	4b28      	ldr	r3, [pc, #160]	; (8008784 <HRTIM1_Initialization+0xfc>)
 80086e4:	4a29      	ldr	r2, [pc, #164]	; (800878c <HRTIM1_Initialization+0x104>)
 80086e6:	635a      	str	r2, [r3, #52]	; 0x34
  HRTIM1_DataLink.B_Unit1 = 6800;
 80086e8:	4b26      	ldr	r3, [pc, #152]	; (8008784 <HRTIM1_Initialization+0xfc>)
 80086ea:	f641 2290 	movw	r2, #6800	; 0x1a90
 80086ee:	639a      	str	r2, [r3, #56]	; 0x38
  HRTIM1_DataLink.B_Unit2 = 0;
 80086f0:	4b24      	ldr	r3, [pc, #144]	; (8008784 <HRTIM1_Initialization+0xfc>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	63da      	str	r2, [r3, #60]	; 0x3c
  HRTIM1_DataLink.B_Unit3 = 0;
 80086f6:	4b23      	ldr	r3, [pc, #140]	; (8008784 <HRTIM1_Initialization+0xfc>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	641a      	str	r2, [r3, #64]	; 0x40
  HRTIM1_DataLink.B_Unit4 = 0;
 80086fc:	4b21      	ldr	r3, [pc, #132]	; (8008784 <HRTIM1_Initialization+0xfc>)
 80086fe:	2200      	movs	r2, #0
 8008700:	645a      	str	r2, [r3, #68]	; 0x44
  HRTIM1_DataLink.B_ICVal1 = 0;
 8008702:	4b20      	ldr	r3, [pc, #128]	; (8008784 <HRTIM1_Initialization+0xfc>)
 8008704:	2200      	movs	r2, #0
 8008706:	649a      	str	r2, [r3, #72]	; 0x48
  HRTIM1_DataLink.B_ICVal2 = 0;
 8008708:	4b1e      	ldr	r3, [pc, #120]	; (8008784 <HRTIM1_Initialization+0xfc>)
 800870a:	2200      	movs	r2, #0
 800870c:	64da      	str	r2, [r3, #76]	; 0x4c

  /*Set Master compare registers */
  __HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_1,
 800870e:	4b20      	ldr	r3, [pc, #128]	; (8008790 <HRTIM1_Initialization+0x108>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 8008716:	61da      	str	r2, [r3, #28]
    (uint32_t)(1360));
  __HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_2,
 8008718:	4b1d      	ldr	r3, [pc, #116]	; (8008790 <HRTIM1_Initialization+0x108>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f641 2290 	movw	r2, #6800	; 0x1a90
 8008720:	625a      	str	r2, [r3, #36]	; 0x24
    (uint32_t)(6800));
  __HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_3,
 8008722:	4b1b      	ldr	r3, [pc, #108]	; (8008790 <HRTIM1_Initialization+0x108>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800872a:	629a      	str	r2, [r3, #40]	; 0x28
    (uint32_t)(3000));

  /* Start Master Timer counter*/
  HAL_HRTIM_SimpleBaseStart(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 800872c:	2106      	movs	r1, #6
 800872e:	4818      	ldr	r0, [pc, #96]	; (8008790 <HRTIM1_Initialization+0x108>)
 8008730:	f7fa ff86 	bl	8003640 <HAL_HRTIM_SimpleBaseStart>

  /*Set Timer A compare registers */
  __HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1,
 8008734:	4b16      	ldr	r3, [pc, #88]	; (8008790 <HRTIM1_Initialization+0x108>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f641 2290 	movw	r2, #6800	; 0x1a90
 800873c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    (uint32_t)(6800));

  /* Start PWM output counter */
  HAL_HRTIM_WaveformCountStart(&hhrtim1,HRTIM_TIMERID_TIMER_A);
 8008740:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8008744:	4812      	ldr	r0, [pc, #72]	; (8008790 <HRTIM1_Initialization+0x108>)
 8008746:	f7fb fd3b 	bl	80041c0 <HAL_HRTIM_WaveformCountStart>

  /* Start PWM output signal TA1 */
  HAL_HRTIM_WaveformOutputStart(&hhrtim1,HRTIM_OUTPUT_TA1);
 800874a:	2101      	movs	r1, #1
 800874c:	4810      	ldr	r0, [pc, #64]	; (8008790 <HRTIM1_Initialization+0x108>)
 800874e:	f7fb fd0a 	bl	8004166 <HAL_HRTIM_WaveformOutputStart>

  /* Start PWM output signal TA2 */
  HAL_HRTIM_WaveformOutputStart(&hhrtim1,HRTIM_OUTPUT_TA2);
 8008752:	2102      	movs	r1, #2
 8008754:	480e      	ldr	r0, [pc, #56]	; (8008790 <HRTIM1_Initialization+0x108>)
 8008756:	f7fb fd06 	bl	8004166 <HAL_HRTIM_WaveformOutputStart>

  /*Set Timer B compare registers */
  __HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1,
 800875a:	4b0d      	ldr	r3, [pc, #52]	; (8008790 <HRTIM1_Initialization+0x108>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f641 2290 	movw	r2, #6800	; 0x1a90
 8008762:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    (uint32_t)(6800));

  /* Start PWM output counter */
  HAL_HRTIM_WaveformCountStart(&hhrtim1,HRTIM_TIMERID_TIMER_B);
 8008766:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800876a:	4809      	ldr	r0, [pc, #36]	; (8008790 <HRTIM1_Initialization+0x108>)
 800876c:	f7fb fd28 	bl	80041c0 <HAL_HRTIM_WaveformCountStart>

  /* Start PWM output signal TB1 */
  HAL_HRTIM_WaveformOutputStart(&hhrtim1,HRTIM_OUTPUT_TB1);
 8008770:	2104      	movs	r1, #4
 8008772:	4807      	ldr	r0, [pc, #28]	; (8008790 <HRTIM1_Initialization+0x108>)
 8008774:	f7fb fcf7 	bl	8004166 <HAL_HRTIM_WaveformOutputStart>

  /* Start PWM output signal TB2 */
  HAL_HRTIM_WaveformOutputStart(&hhrtim1,HRTIM_OUTPUT_TB2);
 8008778:	2108      	movs	r1, #8
 800877a:	4805      	ldr	r0, [pc, #20]	; (8008790 <HRTIM1_Initialization+0x108>)
 800877c:	f7fb fcf3 	bl	8004166 <HAL_HRTIM_WaveformOutputStart>
}
 8008780:	bf00      	nop
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20000348 	.word	0x20000348
 8008788:	0a21fe80 	.word	0x0a21fe80
 800878c:	00030d40 	.word	0x00030d40
 8008790:	20000160 	.word	0x20000160

08008794 <TIM_PeriodElapsedCustomCallback>:
 * Function Name  : TIM_PeriodElapsedCustomCallback
 * Description    : Timer callback for update event
 * Input          : TIM_HandleTypeDef*   TIM IC handle
 *******************************************************************************/
void TIM_PeriodElapsedCustomCallback(TIM_HandleTypeDef *htim)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  TIM_ConfTypeDef * pConf = G_TIM_Conf[0];
 800879c:	4b0b      	ldr	r3, [pc, #44]	; (80087cc <TIM_PeriodElapsedCustomCallback+0x38>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	60fb      	str	r3, [r7, #12]
  TIM_HandleTypeDef* pHandler = G_TIM_Handler[0];
 80087a2:	4b0b      	ldr	r3, [pc, #44]	; (80087d0 <TIM_PeriodElapsedCustomCallback+0x3c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	60bb      	str	r3, [r7, #8]
  if (pHandler == htim) {
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d108      	bne.n	80087c2 <TIM_PeriodElapsedCustomCallback+0x2e>
    if (pConf->ItUpFcn != NULL) {
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <TIM_PeriodElapsedCustomCallback+0x2e>
      /* Call update function for TIM3. */
      pConf->ItUpFcn();
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087c0:	4798      	blx	r3
    }
  }
}
 80087c2:	bf00      	nop
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20000434 	.word	0x20000434
 80087d0:	2000039c 	.word	0x2000039c

080087d4 <TIM3_ItUpFcn>:
 * Input          : None
 * TIM3_ItUpFcn is called from TIM_PeriodElapsedCustomCallback function
 * in Test_LED_Amine_TIM.c file.
 *******************************************************************************/
void TIM3_ItUpFcn()
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	af00      	add	r7, sp, #0
    /* Output and update for function-call system: '<Root>/Control  - Atomic Subsystem' */

    /* S-Function (ADC_Read): '<S1>/ADC_Read2' */

    /* Get regular rank1 output value from ADC2 regular value buffer */
    Test_LED_Amine_B.ADC_Read2_o1 = ADC2_RegularConvertedValue[0];
 80087d8:	4b0a      	ldr	r3, [pc, #40]	; (8008804 <TIM3_ItUpFcn+0x30>)
 80087da:	881b      	ldrh	r3, [r3, #0]
 80087dc:	ee07 3a90 	vmov	s15, r3
 80087e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e4:	4b08      	ldr	r3, [pc, #32]	; (8008808 <TIM3_ItUpFcn+0x34>)
 80087e6:	edc3 7a00 	vstr	s15, [r3]

    /* Get regular rank3 output value from ADC2 regular value buffer. */
    Test_LED_Amine_B.ADC_Read2_o2 = ADC2_RegularConvertedValue[2];
 80087ea:	4b06      	ldr	r3, [pc, #24]	; (8008804 <TIM3_ItUpFcn+0x30>)
 80087ec:	889b      	ldrh	r3, [r3, #4]
 80087ee:	b21a      	sxth	r2, r3
 80087f0:	4b05      	ldr	r3, [pc, #20]	; (8008808 <TIM3_ItUpFcn+0x34>)
 80087f2:	809a      	strh	r2, [r3, #4]

    /* End of If: '<S1>/If' */

    /* S-Function (GPIO_Write): '<S1>/GPIO_Write' */
    {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80087f4:	2120      	movs	r1, #32
 80087f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80087fa:	f7fa fd83 	bl	8003304 <HAL_GPIO_TogglePin>
    }

    /* End of Outputs for S-Function (TIMERS_Config): '<Root>/Timers' */
  }
}
 80087fe:	bf00      	nop
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000324 	.word	0x20000324
 8008808:	20000308 	.word	0x20000308

0800880c <__libc_init_array>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	4e0d      	ldr	r6, [pc, #52]	; (8008844 <__libc_init_array+0x38>)
 8008810:	4c0d      	ldr	r4, [pc, #52]	; (8008848 <__libc_init_array+0x3c>)
 8008812:	1ba4      	subs	r4, r4, r6
 8008814:	10a4      	asrs	r4, r4, #2
 8008816:	2500      	movs	r5, #0
 8008818:	42a5      	cmp	r5, r4
 800881a:	d109      	bne.n	8008830 <__libc_init_array+0x24>
 800881c:	4e0b      	ldr	r6, [pc, #44]	; (800884c <__libc_init_array+0x40>)
 800881e:	4c0c      	ldr	r4, [pc, #48]	; (8008850 <__libc_init_array+0x44>)
 8008820:	f000 f820 	bl	8008864 <_init>
 8008824:	1ba4      	subs	r4, r4, r6
 8008826:	10a4      	asrs	r4, r4, #2
 8008828:	2500      	movs	r5, #0
 800882a:	42a5      	cmp	r5, r4
 800882c:	d105      	bne.n	800883a <__libc_init_array+0x2e>
 800882e:	bd70      	pop	{r4, r5, r6, pc}
 8008830:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008834:	4798      	blx	r3
 8008836:	3501      	adds	r5, #1
 8008838:	e7ee      	b.n	8008818 <__libc_init_array+0xc>
 800883a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800883e:	4798      	blx	r3
 8008840:	3501      	adds	r5, #1
 8008842:	e7f2      	b.n	800882a <__libc_init_array+0x1e>
 8008844:	080088a0 	.word	0x080088a0
 8008848:	080088a0 	.word	0x080088a0
 800884c:	080088a0 	.word	0x080088a0
 8008850:	080088a4 	.word	0x080088a4

08008854 <memset>:
 8008854:	4402      	add	r2, r0
 8008856:	4603      	mov	r3, r0
 8008858:	4293      	cmp	r3, r2
 800885a:	d100      	bne.n	800885e <memset+0xa>
 800885c:	4770      	bx	lr
 800885e:	f803 1b01 	strb.w	r1, [r3], #1
 8008862:	e7f9      	b.n	8008858 <memset+0x4>

08008864 <_init>:
 8008864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008866:	bf00      	nop
 8008868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800886a:	bc08      	pop	{r3}
 800886c:	469e      	mov	lr, r3
 800886e:	4770      	bx	lr

08008870 <_fini>:
 8008870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008872:	bf00      	nop
 8008874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008876:	bc08      	pop	{r3}
 8008878:	469e      	mov	lr, r3
 800887a:	4770      	bx	lr
